#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Resolvers
{
    using System;
    using Utf8Json;

    public class GeneratedResolver : global::Utf8Json.IJsonFormatterResolver
    {
        public static readonly global::Utf8Json.IJsonFormatterResolver Instance = new GeneratedResolver();

        GeneratedResolver()
        {

        }

        public global::Utf8Json.IJsonFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::Utf8Json.IJsonFormatter<T> formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::Utf8Json.IJsonFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(362)
            {
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem[]), 0 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Airandpollen[]), 1 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast[]), 2 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea[]), 3 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.HourlyItem[]), 4 },
                {typeof(global::System.Collections.Generic.List<global::SimpleWeather.Weather_API.AQICN.UviItem>), 5 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Attribution[]), 6 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.O3Item[]), 7 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Pm10Item[]), 8 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Pm25Item[]), 9 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.UviItem[]), 10 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Timesegment[]), 11 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Alert[]), 12 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Additionaldata[]), 13 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Suggestion[]), 14 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Navigationposition[]), 15 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Result[]), 16 },
                {typeof(global::SimpleWeather.Weather_API.HERE.View[]), 17 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Warning[]), 18 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Watch[]), 19 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Observation[]), 20 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Location[]), 21 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Forecast[]), 22 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Forecast1[]), 23 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Astronomy1[]), 24 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items[]), 25 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Timelap[]), 26 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items[]), 27 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Advice[]), 28 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Consequence[]), 29 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item[]), 30 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast[]), 31 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Forecast[]), 32 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast[]), 33 },
                {typeof(global::System.DateTimeOffset[]), 34 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Timesery[]), 35 },
                {typeof(global::SimpleWeather.Weather_API.NWS.AlertGraph[]), 36 },
                {typeof(global::System.Collections.Generic.List<string>), 37 },
                {typeof(global::System.Collections.Generic.List<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem>), 38 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Weather[]), 39 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.List[]), 40 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.List[]), 41 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]), 42 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly[]), 43 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily[]), 44 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert[]), 45 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely[]), 46 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Response[]), 47 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Event[]), 48 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Interval[]), 49 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Timeline[]), 50 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Hour[]), 51 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Forecastday[]), 52 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Alert[]), 53 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.LocationItem[]), 54 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.Alert[]), 55 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum[]), 56 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.Minutely[]), 57 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum[]), 58 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum[]), 59 },
                {typeof(global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe[]), 60 },
                {typeof(global::SimpleWeather.Weather_API.WeatherUnlocked.Day[]), 61 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.UnitsSystem?), 62 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions[]), 63 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.PressureTrend?), 64 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions[]), 65 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute[]), 66 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary[]), 67 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.ResponseType[]), 68 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary[]), 69 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Metric), 70 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Imperial), 71 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature), 72 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature), 73 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade), 74 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint), 75 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection), 76 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed), 77 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentWind), 78 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust), 79 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility), 80 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling), 81 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Pressure), 82 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency), 83 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture), 84 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature), 85 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature), 86 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature), 87 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Precip1hr), 88 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Precipitation), 89 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Pasthour), 90 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past3hours), 91 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past6hours), 92 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past9hours), 93 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past12hours), 94 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past18hours), 95 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past24hours), 96 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary), 97 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum), 98 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum), 99 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange), 100 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange), 101 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange), 102 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary), 103 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem), 104 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.CurrentRootobject), 105 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Headline), 106 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Sun), 107 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Moon), 108 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Minimum), 109 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Maximum), 110 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature), 111 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature), 112 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade), 113 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Heating), 114 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Cooling), 115 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary), 116 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Airandpollen), 117 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Speed), 118 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Direction), 119 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Wind), 120 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Windgust), 121 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Totalliquid), 122 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Rain), 123 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Snow), 124 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Ice), 125 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Day), 126 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Night), 127 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast), 128 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.DailyForecastRootobject), 129 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Region), 130 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Country), 131 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Administrativearea), 132 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Timezone), 133 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.GeoMetric), 134 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.GeoImperial), 135 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Elevation), 136 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Geoposition), 137 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Parentcity), 138 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea), 139 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.GeopositionRootobject), 140 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Temperature), 141 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature), 142 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature), 143 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Dewpoint), 144 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Visibility), 145 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.Ceiling), 146 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.HourlyItem), 147 },
                {typeof(global::SimpleWeather.Weather_API.AccuWeather.HourlyForecastRootobject), 148 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.UviItem), 149 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.AQICNData), 150 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Attribution), 151 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.City), 152 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Co), 153 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.H), 154 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.No2), 155 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.O3), 156 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.P), 157 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Pm25), 158 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.T), 159 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.W), 160 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.So2), 161 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Pm10), 162 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Iaqi), 163 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Time), 164 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.O3Item), 165 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Pm10Item), 166 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Pm25Item), 167 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Daily), 168 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Forecast), 169 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Debug), 170 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Data), 171 },
                {typeof(global::SimpleWeather.Weather_API.AQICN.Rootobject), 172 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Timesegment), 173 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Alert), 174 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Alerts), 175 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Additionaldata), 176 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Address), 177 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Suggestion), 178 },
                {typeof(global::SimpleWeather.Weather_API.HERE.AC_Rootobject), 179 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Metainfo), 180 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Matchquality), 181 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Displayposition), 182 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Navigationposition), 183 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Timezone), 184 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Admininfo), 185 },
                {typeof(global::SimpleWeather.Weather_API.HERE.GeoLocation), 186 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Result), 187 },
                {typeof(global::SimpleWeather.Weather_API.HERE.View), 188 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Response), 189 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Geo_Rootobject), 190 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Warning), 191 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Watch), 192 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Nwsalerts), 193 },
                {typeof(global::SimpleWeather.Weather_API.HERE.TokenRootobject), 194 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Token), 195 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Observation), 196 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Location), 197 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Observations), 198 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Forecast), 199 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Forecastlocation), 200 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Dailyforecasts), 201 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Forecast1), 202 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Forecastlocation1), 203 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Hourlyforecasts), 204 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Astronomy1), 205 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Astronomy), 206 },
                {typeof(global::SimpleWeather.Weather_API.HERE.Rootobject), 207 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items), 208 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Timelap), 209 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items), 210 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Advice), 211 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Consequence), 212 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item), 213 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Comments), 214 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.AlertsRootobject), 215 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition), 216 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Wind), 217 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Weather), 218 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Observation), 219 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.CurrentsRootobject), 220 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Position), 221 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.T), 222 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Humidity), 223 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Precipitation), 224 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Weather12h), 225 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Sun), 226 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast), 227 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.T1), 228 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Rain), 229 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Snow), 230 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Forecast), 231 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast), 232 },
                {typeof(global::SimpleWeather.Weather_API.MeteoFrance.ForecastRootobject), 233 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Geometry), 234 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Sunrise), 235 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Sunset), 236 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Solarnoon), 237 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Solarmidnight), 238 },
                {typeof(global::SimpleWeather.Weather_API.Metno.SunProperties), 239 },
                {typeof(global::SimpleWeather.Weather_API.Metno.SunRootobject), 240 },
                {typeof(global::SimpleWeather.Weather_API.Metno.When), 241 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Moonrise), 242 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Moonset), 243 },
                {typeof(global::SimpleWeather.Weather_API.Metno.High_Moon), 244 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Low_Moon), 245 },
                {typeof(global::SimpleWeather.Weather_API.Metno.MoonProperties), 246 },
                {typeof(global::SimpleWeather.Weather_API.Metno.MoonRootobject), 247 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Units), 248 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Meta), 249 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Details), 250 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Instant), 251 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Summary), 252 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Details1), 253 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Next_12_Hours), 254 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Summary1), 255 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Details2), 256 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Next_1_Hours), 257 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Summary2), 258 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Details3), 259 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Next_6_Hours), 260 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Data), 261 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Timesery), 262 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Properties), 263 },
                {typeof(global::SimpleWeather.Weather_API.Metno.Rootobject), 264 },
                {typeof(global::SimpleWeather.Weather_API.NWS.AlertGraph), 265 },
                {typeof(global::SimpleWeather.Weather_API.NWS.AlertRootobject), 266 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Observation.Location), 267 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Observation.Time), 268 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Observation.Data), 269 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation), 270 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Observation.ForecastRootobject), 271 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Hourly.Location), 272 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem), 273 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Hourly.HourlyForecastResponse), 274 },
                {typeof(global::SimpleWeather.Weather_API.NWS.Hourly.PeriodItem), 275 },
                {typeof(global::SimpleWeather.Weather_API.NWS.SolCalcAstroProvider.AstroData), 276 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Coord), 277 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Weather), 278 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Main), 279 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Wind), 280 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Clouds), 281 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Rain), 282 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Snow), 283 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.CurrentSys), 284 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.CurrentRootobject), 285 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.ForecastSys), 286 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.List), 287 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.City), 288 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.ForecastRootobject), 289 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.Rootobject), 290 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord), 291 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main), 292 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components), 293 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.List), 294 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.AirPollutionRootobject), 295 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain), 296 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow), 297 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather), 298 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current), 299 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly), 300 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp), 301 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like), 302 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily), 303 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert), 304 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely), 305 },
                {typeof(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rootobject), 306 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Response), 307 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues), 308 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Event), 309 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.AlertData), 310 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.AlertRootobject), 311 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Values), 312 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Interval), 313 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Timeline), 314 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Data), 315 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Rootobject), 316 },
                {typeof(global::SimpleWeather.Weather_API.TomorrowIO.Meta), 317 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Location), 318 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Condition), 319 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Air_Quality), 320 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Current), 321 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Day), 322 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Astro), 323 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Hour), 324 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Forecastday), 325 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Forecast), 326 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Alert), 327 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Alerts), 328 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.ForecastRootobject), 329 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.LocationItem), 330 },
                {typeof(global::SimpleWeather.Weather_API.WeatherApi.Rootobject), 331 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.Alert), 332 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.AlertRootobject), 333 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather), 334 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum), 335 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.Minutely), 336 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.CurrentRootobject), 337 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather), 338 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum), 339 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.ForecastRootobject), 340 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum), 341 },
                {typeof(global::SimpleWeather.Weather_API.WeatherBit.HourlyRootobject), 342 },
                {typeof(global::SimpleWeather.Weather_API.WeatherUnlocked.CurrentRootobject), 343 },
                {typeof(global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe), 344 },
                {typeof(global::SimpleWeather.Weather_API.WeatherUnlocked.Day), 345 },
                {typeof(global::SimpleWeather.Weather_API.WeatherUnlocked.ForecastRootobject), 346 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.AvailabilityRootobject), 347 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.Metadata), 348 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather), 349 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast), 350 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions), 351 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.DailyForecast), 352 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions), 353 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast), 354 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute), 355 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary), 356 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast), 357 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary), 358 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection), 359 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.Weather), 360 },
                {typeof(global::SimpleWeather.Weather_API.WeatherKit.ProductData), 361 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key)) return null;

            switch (key)
            {
                case 0: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem>();
                case 1: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AccuWeather.Airandpollen>();
                case 2: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast>();
                case 3: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea>();
                case 4: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AccuWeather.HourlyItem>();
                case 5: return new global::Utf8Json.Formatters.ListFormatter<global::SimpleWeather.Weather_API.AQICN.UviItem>();
                case 6: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AQICN.Attribution>();
                case 7: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AQICN.O3Item>();
                case 8: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AQICN.Pm10Item>();
                case 9: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AQICN.Pm25Item>();
                case 10: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.AQICN.UviItem>();
                case 11: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Timesegment>();
                case 12: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Alert>();
                case 13: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Additionaldata>();
                case 14: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Suggestion>();
                case 15: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Navigationposition>();
                case 16: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Result>();
                case 17: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.View>();
                case 18: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Warning>();
                case 19: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Watch>();
                case 20: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Observation>();
                case 21: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Location>();
                case 22: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Forecast>();
                case 23: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Forecast1>();
                case 24: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.HERE.Astronomy1>();
                case 25: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items>();
                case 26: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Timelap>();
                case 27: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items>();
                case 28: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Advice>();
                case 29: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Consequence>();
                case 30: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item>();
                case 31: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast>();
                case 32: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Forecast>();
                case 33: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast>();
                case 34: return new global::Utf8Json.Formatters.ArrayFormatter<global::System.DateTimeOffset>();
                case 35: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.Metno.Timesery>();
                case 36: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.NWS.AlertGraph>();
                case 37: return new global::Utf8Json.Formatters.ListFormatter<string>();
                case 38: return new global::Utf8Json.Formatters.ListFormatter<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem>();
                case 39: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.Weather>();
                case 40: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.List>();
                case 41: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.List>();
                case 42: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather>();
                case 43: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly>();
                case 44: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily>();
                case 45: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert>();
                case 46: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely>();
                case 47: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Response>();
                case 48: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Event>();
                case 49: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Interval>();
                case 50: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Timeline>();
                case 51: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherApi.Hour>();
                case 52: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherApi.Forecastday>();
                case 53: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherApi.Alert>();
                case 54: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherApi.LocationItem>();
                case 55: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherBit.Alert>();
                case 56: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum>();
                case 57: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherBit.Minutely>();
                case 58: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum>();
                case 59: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum>();
                case 60: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe>();
                case 61: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherUnlocked.Day>();
                case 62: return new global::Utf8Json.Formatters.NullableFormatter<global::SimpleWeather.Weather_API.WeatherKit.UnitsSystem>();
                case 63: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions>();
                case 64: return new global::Utf8Json.Formatters.NullableFormatter<global::SimpleWeather.Weather_API.WeatherKit.PressureTrend>();
                case 65: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions>();
                case 66: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute>();
                case 67: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary>();
                case 68: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherKit.ResponseType>();
                case 69: return new global::Utf8Json.Formatters.ArrayFormatter<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary>();
                case 70: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.MetricFormatter();
                case 71: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.ImperialFormatter();
                case 72: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentTemperatureFormatter();
                case 73: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureFormatter();
                case 74: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshadeFormatter();
                case 75: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentDewpointFormatter();
                case 76: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentDirectionFormatter();
                case 77: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentSpeedFormatter();
                case 78: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentWindFormatter();
                case 79: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentWindgustFormatter();
                case 80: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentVisibilityFormatter();
                case 81: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentCeilingFormatter();
                case 82: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.PressureFormatter();
                case 83: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.PressuretendencyFormatter();
                case 84: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedepartureFormatter();
                case 85: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.ApparenttemperatureFormatter();
                case 86: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.WindchilltemperatureFormatter();
                case 87: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperatureFormatter();
                case 88: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Precip1hrFormatter();
                case 89: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.PrecipitationFormatter();
                case 90: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.PasthourFormatter();
                case 91: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past3hoursFormatter();
                case 92: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past6hoursFormatter();
                case 93: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past9hoursFormatter();
                case 94: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past12hoursFormatter();
                case 95: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past18hoursFormatter();
                case 96: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past24hoursFormatter();
                case 97: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.PrecipitationsummaryFormatter();
                case 98: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentMinimumFormatter();
                case 99: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentMaximumFormatter();
                case 100: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past6hourrangeFormatter();
                case 101: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past12hourrangeFormatter();
                case 102: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.Past24hourrangeFormatter();
                case 103: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.TemperaturesummaryFormatter();
                case 104: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentsItemFormatter();
                case 105: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CurrentRootobjectFormatter();
                case 106: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.HeadlineFormatter();
                case 107: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.SunFormatter();
                case 108: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.MoonFormatter();
                case 109: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.MinimumFormatter();
                case 110: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.MaximumFormatter();
                case 111: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DailyTemperatureFormatter();
                case 112: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureFormatter();
                case 113: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshadeFormatter();
                case 114: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.HeatingFormatter();
                case 115: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CoolingFormatter();
                case 116: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DegreedaysummaryFormatter();
                case 117: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.AirandpollenFormatter();
                case 118: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.SpeedFormatter();
                case 119: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DirectionFormatter();
                case 120: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.WindFormatter();
                case 121: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.WindgustFormatter();
                case 122: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.TotalliquidFormatter();
                case 123: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.RainFormatter();
                case 124: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.SnowFormatter();
                case 125: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.IceFormatter();
                case 126: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DayFormatter();
                case 127: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.NightFormatter();
                case 128: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DailyforecastFormatter();
                case 129: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DailyForecastRootobjectFormatter();
                case 130: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.RegionFormatter();
                case 131: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CountryFormatter();
                case 132: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.AdministrativeareaFormatter();
                case 133: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.TimezoneFormatter();
                case 134: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.GeoMetricFormatter();
                case 135: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.GeoImperialFormatter();
                case 136: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.ElevationFormatter();
                case 137: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.GeopositionFormatter();
                case 138: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.ParentcityFormatter();
                case 139: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.SupplementaladminareaFormatter();
                case 140: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.GeopositionRootobjectFormatter();
                case 141: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.TemperatureFormatter();
                case 142: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.RealfeeltemperatureFormatter();
                case 143: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.WetbulbtemperatureFormatter();
                case 144: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.DewpointFormatter();
                case 145: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.VisibilityFormatter();
                case 146: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.CeilingFormatter();
                case 147: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.HourlyItemFormatter();
                case 148: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather.HourlyForecastRootobjectFormatter();
                case 149: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.UviItemFormatter();
                case 150: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.AQICNDataFormatter();
                case 151: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.AttributionFormatter();
                case 152: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.CityFormatter();
                case 153: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.CoFormatter();
                case 154: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.HFormatter();
                case 155: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.No2Formatter();
                case 156: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.O3Formatter();
                case 157: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.PFormatter();
                case 158: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.Pm25Formatter();
                case 159: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.TFormatter();
                case 160: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.WFormatter();
                case 161: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.So2Formatter();
                case 162: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.Pm10Formatter();
                case 163: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.IaqiFormatter();
                case 164: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.TimeFormatter();
                case 165: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.O3ItemFormatter();
                case 166: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.Pm10ItemFormatter();
                case 167: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.Pm25ItemFormatter();
                case 168: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.DailyFormatter();
                case 169: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.ForecastFormatter();
                case 170: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.DebugFormatter();
                case 171: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.DataFormatter();
                case 172: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN.RootobjectFormatter();
                case 173: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.TimesegmentFormatter();
                case 174: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AlertFormatter();
                case 175: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AlertsFormatter();
                case 176: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AdditionaldataFormatter();
                case 177: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AddressFormatter();
                case 178: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.SuggestionFormatter();
                case 179: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AC_RootobjectFormatter();
                case 180: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.MetainfoFormatter();
                case 181: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.MatchqualityFormatter();
                case 182: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.DisplaypositionFormatter();
                case 183: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.NavigationpositionFormatter();
                case 184: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.TimezoneFormatter();
                case 185: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AdmininfoFormatter();
                case 186: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.GeoLocationFormatter();
                case 187: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ResultFormatter();
                case 188: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ViewFormatter();
                case 189: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ResponseFormatter();
                case 190: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.Geo_RootobjectFormatter();
                case 191: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.WarningFormatter();
                case 192: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.WatchFormatter();
                case 193: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.NwsalertsFormatter();
                case 194: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.TokenRootobjectFormatter();
                case 195: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.TokenFormatter();
                case 196: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ObservationFormatter();
                case 197: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.LocationFormatter();
                case 198: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ObservationsFormatter();
                case 199: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ForecastFormatter();
                case 200: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.ForecastlocationFormatter();
                case 201: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.DailyforecastsFormatter();
                case 202: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.Forecast1Formatter();
                case 203: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.Forecastlocation1Formatter();
                case 204: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.HourlyforecastsFormatter();
                case 205: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.Astronomy1Formatter();
                case 206: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.AstronomyFormatter();
                case 207: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE.RootobjectFormatter();
                case 208: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.Timelaps_ItemsFormatter();
                case 209: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.TimelapFormatter();
                case 210: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.Phenomenons_ItemsFormatter();
                case 211: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.AdviceFormatter();
                case 212: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.ConsequenceFormatter();
                case 213: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_ItemFormatter();
                case 214: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.CommentsFormatter();
                case 215: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.AlertsRootobjectFormatter();
                case 216: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.CurrentsPositionFormatter();
                case 217: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.WindFormatter();
                case 218: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.WeatherFormatter();
                case 219: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.ObservationFormatter();
                case 220: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.CurrentsRootobjectFormatter();
                case 221: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.PositionFormatter();
                case 222: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.TFormatter();
                case 223: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.HumidityFormatter();
                case 224: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.PrecipitationFormatter();
                case 225: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.Weather12hFormatter();
                case 226: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.SunFormatter();
                case 227: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.Daily_ForecastFormatter();
                case 228: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.T1Formatter();
                case 229: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.RainFormatter();
                case 230: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.SnowFormatter();
                case 231: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.ForecastFormatter();
                case 232: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.Probability_ForecastFormatter();
                case 233: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance.ForecastRootobjectFormatter();
                case 234: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.GeometryFormatter();
                case 235: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SunriseFormatter();
                case 236: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SunsetFormatter();
                case 237: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SolarnoonFormatter();
                case 238: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SolarmidnightFormatter();
                case 239: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SunPropertiesFormatter();
                case 240: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SunRootobjectFormatter();
                case 241: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.WhenFormatter();
                case 242: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.MoonriseFormatter();
                case 243: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.MoonsetFormatter();
                case 244: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.High_MoonFormatter();
                case 245: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Low_MoonFormatter();
                case 246: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.MoonPropertiesFormatter();
                case 247: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.MoonRootobjectFormatter();
                case 248: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.UnitsFormatter();
                case 249: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.MetaFormatter();
                case 250: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.DetailsFormatter();
                case 251: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.InstantFormatter();
                case 252: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.SummaryFormatter();
                case 253: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Details1Formatter();
                case 254: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Next_12_HoursFormatter();
                case 255: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Summary1Formatter();
                case 256: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Details2Formatter();
                case 257: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Next_1_HoursFormatter();
                case 258: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Summary2Formatter();
                case 259: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Details3Formatter();
                case 260: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.Next_6_HoursFormatter();
                case 261: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.DataFormatter();
                case 262: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.TimeseryFormatter();
                case 263: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.PropertiesFormatter();
                case 264: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno.RootobjectFormatter();
                case 265: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.AlertGraphFormatter();
                case 266: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.AlertRootobjectFormatter();
                case 267: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Observation.LocationFormatter();
                case 268: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Observation.TimeFormatter();
                case 269: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Observation.DataFormatter();
                case 270: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Observation.CurrentobservationFormatter();
                case 271: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Observation.ForecastRootobjectFormatter();
                case 272: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Hourly.LocationFormatter();
                case 273: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Hourly.PeriodsItemFormatter();
                case 274: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Hourly.HourlyForecastResponseFormatter();
                case 275: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Hourly.PeriodItemFormatter();
                case 276: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.SolCalcAstroProvider_AstroDataFormatter();
                case 277: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.CoordFormatter();
                case 278: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.WeatherFormatter();
                case 279: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.MainFormatter();
                case 280: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.WindFormatter();
                case 281: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.CloudsFormatter();
                case 282: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.RainFormatter();
                case 283: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.SnowFormatter();
                case 284: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.CurrentSysFormatter();
                case 285: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.CurrentRootobjectFormatter();
                case 286: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.ForecastSysFormatter();
                case 287: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.ListFormatter();
                case 288: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.CityFormatter();
                case 289: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.ForecastRootobjectFormatter();
                case 290: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.RootobjectFormatter();
                case 291: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.CoordFormatter();
                case 292: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.MainFormatter();
                case 293: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.ComponentsFormatter();
                case 294: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.ListFormatter();
                case 295: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.AirPollutionRootobjectFormatter();
                case 296: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.RainFormatter();
                case 297: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.SnowFormatter();
                case 298: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.WeatherFormatter();
                case 299: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.CurrentFormatter();
                case 300: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.HourlyFormatter();
                case 301: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.TempFormatter();
                case 302: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_LikeFormatter();
                case 303: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.DailyFormatter();
                case 304: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.AlertFormatter();
                case 305: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.MinutelyFormatter();
                case 306: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall.RootobjectFormatter();
                case 307: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.ResponseFormatter();
                case 308: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.EventvaluesFormatter();
                case 309: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.EventFormatter();
                case 310: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.AlertDataFormatter();
                case 311: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.AlertRootobjectFormatter();
                case 312: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.ValuesFormatter();
                case 313: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.IntervalFormatter();
                case 314: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.TimelineFormatter();
                case 315: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.DataFormatter();
                case 316: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.RootobjectFormatter();
                case 317: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO.MetaFormatter();
                case 318: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.LocationFormatter();
                case 319: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.ConditionFormatter();
                case 320: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.Air_QualityFormatter();
                case 321: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.CurrentFormatter();
                case 322: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.DayFormatter();
                case 323: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.AstroFormatter();
                case 324: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.HourFormatter();
                case 325: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.ForecastdayFormatter();
                case 326: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.ForecastFormatter();
                case 327: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.AlertFormatter();
                case 328: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.AlertsFormatter();
                case 329: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.ForecastRootobjectFormatter();
                case 330: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.LocationItemFormatter();
                case 331: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi.RootobjectFormatter();
                case 332: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.AlertFormatter();
                case 333: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.AlertRootobjectFormatter();
                case 334: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.CurrentWeatherFormatter();
                case 335: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.CurrentDatumFormatter();
                case 336: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.MinutelyFormatter();
                case 337: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.CurrentRootobjectFormatter();
                case 338: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.ForecastWeatherFormatter();
                case 339: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.ForecastDatumFormatter();
                case 340: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.ForecastRootobjectFormatter();
                case 341: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.HourlyDatumFormatter();
                case 342: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit.HourlyRootobjectFormatter();
                case 343: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherUnlocked.CurrentRootobjectFormatter();
                case 344: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherUnlocked.TimeframeFormatter();
                case 345: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherUnlocked.DayFormatter();
                case 346: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherUnlocked.ForecastRootobjectFormatter();
                case 347: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.AvailabilityRootobjectFormatter();
                case 348: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.MetadataFormatter();
                case 349: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.CurrentWeatherFormatter();
                case 350: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.DayPartForecastFormatter();
                case 351: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.DayWeatherConditionsFormatter();
                case 352: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.DailyForecastFormatter();
                case 353: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.HourWeatherConditionsFormatter();
                case 354: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.HourlyForecastFormatter();
                case 355: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.ForecastMinuteFormatter();
                case 356: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummaryFormatter();
                case 357: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.NextHourForecastFormatter();
                case 358: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummaryFormatter();
                case 359: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollectionFormatter();
                case 360: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.WeatherFormatter();
                case 361: return new SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit.ProductDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning disable 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AccuWeather
{
    using System;
    using Utf8Json;


    public sealed class MetricFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Metric>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MetricFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Metric value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Metric Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Metric();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class ImperialFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Imperial>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ImperialFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Imperial value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Imperial Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Imperial();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class CurrentTemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentTemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentRealfeeltemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentRealfeeltemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentRealfeeltemperatureshadeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentRealfeeltemperatureshadeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentDewpointFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentDewpointFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentDirectionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentDirectionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Degrees"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Localized"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("English"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Degrees"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Localized"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("English"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Degrees, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Localized);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.English);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Degrees__ = default(int?);
            var __Degrees__b__ = false;
            var __Localized__ = default(string);
            var __Localized__b__ = false;
            var __English__ = default(string);
            var __English__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Degrees__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Degrees__b__ = true;
                        break;
                    case 1:
                        __Localized__ = reader.ReadString();
                        __Localized__b__ = true;
                        break;
                    case 2:
                        __English__ = reader.ReadString();
                        __English__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection();
            if(__Degrees__b__) ____result.Degrees = __Degrees__;
            if(__Localized__b__) ____result.Localized = __Localized__;
            if(__English__b__) ____result.English = __English__;

            return ____result;
        }
    }


    public sealed class CurrentSpeedFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentSpeedFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentWindFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentWind>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentWindFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Direction"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Speed"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Direction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Speed"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentWind value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection>().Serialize(ref writer, value.Direction, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed>().Serialize(ref writer, value.Speed, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentWind Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Direction__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection);
            var __Direction__b__ = false;
            var __Speed__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed);
            var __Speed__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Direction__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentDirection>().Deserialize(ref reader, formatterResolver);
                        __Direction__b__ = true;
                        break;
                    case 1:
                        __Speed__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed>().Deserialize(ref reader, formatterResolver);
                        __Speed__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentWind();
            if(__Direction__b__) ____result.Direction = __Direction__;
            if(__Speed__b__) ____result.Speed = __Speed__;

            return ____result;
        }
    }


    public sealed class CurrentWindgustFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentWindgustFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Speed"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Speed"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed>().Serialize(ref writer, value.Speed, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Speed__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed);
            var __Speed__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Speed__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentSpeed>().Deserialize(ref reader, formatterResolver);
                        __Speed__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust();
            if(__Speed__b__) ____result.Speed = __Speed__;

            return ____result;
        }
    }


    public sealed class CurrentVisibilityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentVisibilityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentCeilingFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentCeilingFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class PressureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Pressure>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PressureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Pressure value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Pressure Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Pressure();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class PressuretendencyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PressuretendencyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedText"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Code"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("LocalizedText"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.LocalizedText);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Code);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __LocalizedText__ = default(string);
            var __LocalizedText__b__ = false;
            var __Code__ = default(string);
            var __Code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __LocalizedText__ = reader.ReadString();
                        __LocalizedText__b__ = true;
                        break;
                    case 1:
                        __Code__ = reader.ReadString();
                        __Code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency();
            if(__LocalizedText__b__) ____result.LocalizedText = __LocalizedText__;
            if(__Code__b__) ____result.Code = __Code__;

            return ____result;
        }
    }


    public sealed class Past24hourtemperaturedepartureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past24hourtemperaturedepartureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class ApparenttemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ApparenttemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class WindchilltemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WindchilltemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentWetbulbtemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentWetbulbtemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Precip1hrFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Precip1hr>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Precip1hrFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Precip1hr value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Precip1hr Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Precip1hr();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class PrecipitationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Precipitation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PrecipitationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Precipitation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Precipitation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Precipitation();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class PasthourFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Pasthour>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PasthourFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Pasthour value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Pasthour Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Pasthour();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past3hoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past3hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past3hoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past3hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past3hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past3hours();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past6hoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past6hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past6hoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past6hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past6hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past6hours();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past9hoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past9hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past9hoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past9hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past9hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past9hours();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past12hoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past12hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past12hoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past12hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past12hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past12hours();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past18hoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past18hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past18hoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past18hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past18hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past18hours();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past24hoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past24hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past24hoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past24hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past24hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past24hours();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class PrecipitationsummaryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PrecipitationsummaryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Precipitation"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PastHour"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past3Hours"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past6Hours"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past9Hours"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past12Hours"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past18Hours"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past24Hours"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Precipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PastHour"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past3Hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past6Hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past9Hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past12Hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past18Hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past24Hours"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Precipitation>().Serialize(ref writer, value.Precipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Pasthour>().Serialize(ref writer, value.PastHour, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past3hours>().Serialize(ref writer, value.Past3Hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past6hours>().Serialize(ref writer, value.Past6Hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past9hours>().Serialize(ref writer, value.Past9Hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past12hours>().Serialize(ref writer, value.Past12Hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past18hours>().Serialize(ref writer, value.Past18Hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past24hours>().Serialize(ref writer, value.Past24Hours, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Precipitation__ = default(global::SimpleWeather.Weather_API.AccuWeather.Precipitation);
            var __Precipitation__b__ = false;
            var __PastHour__ = default(global::SimpleWeather.Weather_API.AccuWeather.Pasthour);
            var __PastHour__b__ = false;
            var __Past3Hours__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past3hours);
            var __Past3Hours__b__ = false;
            var __Past6Hours__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past6hours);
            var __Past6Hours__b__ = false;
            var __Past9Hours__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past9hours);
            var __Past9Hours__b__ = false;
            var __Past12Hours__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past12hours);
            var __Past12Hours__b__ = false;
            var __Past18Hours__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past18hours);
            var __Past18Hours__b__ = false;
            var __Past24Hours__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past24hours);
            var __Past24Hours__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Precipitation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Precipitation>().Deserialize(ref reader, formatterResolver);
                        __Precipitation__b__ = true;
                        break;
                    case 1:
                        __PastHour__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Pasthour>().Deserialize(ref reader, formatterResolver);
                        __PastHour__b__ = true;
                        break;
                    case 2:
                        __Past3Hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past3hours>().Deserialize(ref reader, formatterResolver);
                        __Past3Hours__b__ = true;
                        break;
                    case 3:
                        __Past6Hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past6hours>().Deserialize(ref reader, formatterResolver);
                        __Past6Hours__b__ = true;
                        break;
                    case 4:
                        __Past9Hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past9hours>().Deserialize(ref reader, formatterResolver);
                        __Past9Hours__b__ = true;
                        break;
                    case 5:
                        __Past12Hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past12hours>().Deserialize(ref reader, formatterResolver);
                        __Past12Hours__b__ = true;
                        break;
                    case 6:
                        __Past18Hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past18hours>().Deserialize(ref reader, formatterResolver);
                        __Past18Hours__b__ = true;
                        break;
                    case 7:
                        __Past24Hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past24hours>().Deserialize(ref reader, formatterResolver);
                        __Past24Hours__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary();
            if(__Precipitation__b__) ____result.Precipitation = __Precipitation__;
            if(__PastHour__b__) ____result.PastHour = __PastHour__;
            if(__Past3Hours__b__) ____result.Past3Hours = __Past3Hours__;
            if(__Past6Hours__b__) ____result.Past6Hours = __Past6Hours__;
            if(__Past9Hours__b__) ____result.Past9Hours = __Past9Hours__;
            if(__Past12Hours__b__) ____result.Past12Hours = __Past12Hours__;
            if(__Past18Hours__b__) ____result.Past18Hours = __Past18Hours__;
            if(__Past24Hours__b__) ____result.Past24Hours = __Past24Hours__;

            return ____result;
        }
    }


    public sealed class CurrentMinimumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentMinimumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class CurrentMaximumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentMaximumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.Metric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.Imperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Metric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Imperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class Past6hourrangeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past6hourrangeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Minimum"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Maximum"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Minimum"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Maximum"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>().Serialize(ref writer, value.Minimum, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>().Serialize(ref writer, value.Maximum, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Minimum__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum);
            var __Minimum__b__ = false;
            var __Maximum__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum);
            var __Maximum__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Minimum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>().Deserialize(ref reader, formatterResolver);
                        __Minimum__b__ = true;
                        break;
                    case 1:
                        __Maximum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>().Deserialize(ref reader, formatterResolver);
                        __Maximum__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange();
            if(__Minimum__b__) ____result.Minimum = __Minimum__;
            if(__Maximum__b__) ____result.Maximum = __Maximum__;

            return ____result;
        }
    }


    public sealed class Past12hourrangeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past12hourrangeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Minimum"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Maximum"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Minimum"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Maximum"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>().Serialize(ref writer, value.Minimum, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>().Serialize(ref writer, value.Maximum, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Minimum__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum);
            var __Minimum__b__ = false;
            var __Maximum__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum);
            var __Maximum__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Minimum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>().Deserialize(ref reader, formatterResolver);
                        __Minimum__b__ = true;
                        break;
                    case 1:
                        __Maximum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>().Deserialize(ref reader, formatterResolver);
                        __Maximum__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange();
            if(__Minimum__b__) ____result.Minimum = __Minimum__;
            if(__Maximum__b__) ____result.Maximum = __Maximum__;

            return ____result;
        }
    }


    public sealed class Past24hourrangeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Past24hourrangeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Minimum"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Maximum"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Minimum"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Maximum"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>().Serialize(ref writer, value.Minimum, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>().Serialize(ref writer, value.Maximum, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Minimum__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum);
            var __Minimum__b__ = false;
            var __Maximum__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum);
            var __Maximum__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Minimum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMinimum>().Deserialize(ref reader, formatterResolver);
                        __Minimum__b__ = true;
                        break;
                    case 1:
                        __Maximum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentMaximum>().Deserialize(ref reader, formatterResolver);
                        __Maximum__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange();
            if(__Minimum__b__) ____result.Minimum = __Minimum__;
            if(__Maximum__b__) ____result.Maximum = __Maximum__;

            return ____result;
        }
    }


    public sealed class TemperaturesummaryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TemperaturesummaryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past6HourRange"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past12HourRange"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past24HourRange"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Past6HourRange"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past12HourRange"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past24HourRange"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange>().Serialize(ref writer, value.Past6HourRange, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange>().Serialize(ref writer, value.Past12HourRange, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange>().Serialize(ref writer, value.Past24HourRange, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Past6HourRange__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange);
            var __Past6HourRange__b__ = false;
            var __Past12HourRange__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange);
            var __Past12HourRange__b__ = false;
            var __Past24HourRange__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange);
            var __Past24HourRange__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Past6HourRange__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past6hourrange>().Deserialize(ref reader, formatterResolver);
                        __Past6HourRange__b__ = true;
                        break;
                    case 1:
                        __Past12HourRange__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past12hourrange>().Deserialize(ref reader, formatterResolver);
                        __Past12HourRange__b__ = true;
                        break;
                    case 2:
                        __Past24HourRange__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past24hourrange>().Deserialize(ref reader, formatterResolver);
                        __Past24HourRange__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary();
            if(__Past6HourRange__b__) ____result.Past6HourRange = __Past6HourRange__;
            if(__Past12HourRange__b__) ____result.Past12HourRange = __Past12HourRange__;
            if(__Past24HourRange__b__) ____result.Past24HourRange = __Past24HourRange__;

            return ____result;
        }
    }


    public sealed class CurrentsItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentsItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalObservationDateTime"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochTime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WeatherText"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WeatherIcon"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HasPrecipitation"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationType"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IsDayTime"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Temperature"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RealFeelTemperature"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RealFeelTemperatureShade"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RelativeHumidity"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IndoorRelativeHumidity"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("DewPoint"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Wind"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WindGust"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UVIndex"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UVIndexText"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Visibility"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ObstructionsToVisibility"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("CloudCover"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Ceiling"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Pressure"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PressureTendency"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Past24HourTemperatureDeparture"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ApparentTemperature"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WindChillTemperature"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WetBulbTemperature"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Precip1hr"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationSummary"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("TemperatureSummary"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("MobileLink"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Link"), 31},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("LocalObservationDateTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WeatherText"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WeatherIcon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HasPrecipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IsDayTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RealFeelTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RealFeelTemperatureShade"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RelativeHumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IndoorRelativeHumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("DewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WindGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UVIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UVIndexText"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ObstructionsToVisibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("CloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Ceiling"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PressureTendency"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Past24HourTemperatureDeparture"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ApparentTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WindChillTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WetBulbTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Precip1hr"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationSummary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("TemperatureSummary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("MobileLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Link"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.LocalObservationDateTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.WeatherText);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.WeatherIcon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.HasPrecipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.PrecipitationType);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.IsDayTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature>().Serialize(ref writer, value.Temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature>().Serialize(ref writer, value.RealFeelTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade>().Serialize(ref writer, value.RealFeelTemperatureShade, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.RelativeHumidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.IndoorRelativeHumidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint>().Serialize(ref writer, value.DewPoint, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentWind>().Serialize(ref writer, value.Wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust>().Serialize(ref writer, value.WindGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.UVIndex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteString(value.UVIndexText);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility>().Serialize(ref writer, value.Visibility, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteString(value.ObstructionsToVisibility);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.CloudCover, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling>().Serialize(ref writer, value.Ceiling, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[21]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Pressure>().Serialize(ref writer, value.Pressure, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[22]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency>().Serialize(ref writer, value.PressureTendency, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[23]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture>().Serialize(ref writer, value.Past24HourTemperatureDeparture, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[24]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature>().Serialize(ref writer, value.ApparentTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[25]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature>().Serialize(ref writer, value.WindChillTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[26]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature>().Serialize(ref writer, value.WetBulbTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[27]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Precip1hr>().Serialize(ref writer, value.Precip1hr, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[28]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary>().Serialize(ref writer, value.PrecipitationSummary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[29]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary>().Serialize(ref writer, value.TemperatureSummary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[30]);
            writer.WriteString(value.MobileLink);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteString(value.Link);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __LocalObservationDateTime__ = default(global::System.DateTimeOffset);
            var __LocalObservationDateTime__b__ = false;
            var __EpochTime__ = default(long?);
            var __EpochTime__b__ = false;
            var __WeatherText__ = default(string);
            var __WeatherText__b__ = false;
            var __WeatherIcon__ = default(int?);
            var __WeatherIcon__b__ = false;
            var __HasPrecipitation__ = default(bool?);
            var __HasPrecipitation__b__ = false;
            var __PrecipitationType__ = default(string);
            var __PrecipitationType__b__ = false;
            var __IsDayTime__ = default(bool?);
            var __IsDayTime__b__ = false;
            var __Temperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature);
            var __Temperature__b__ = false;
            var __RealFeelTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature);
            var __RealFeelTemperature__b__ = false;
            var __RealFeelTemperatureShade__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade);
            var __RealFeelTemperatureShade__b__ = false;
            var __RelativeHumidity__ = default(int?);
            var __RelativeHumidity__b__ = false;
            var __IndoorRelativeHumidity__ = default(int?);
            var __IndoorRelativeHumidity__b__ = false;
            var __DewPoint__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint);
            var __DewPoint__b__ = false;
            var __Wind__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentWind);
            var __Wind__b__ = false;
            var __WindGust__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust);
            var __WindGust__b__ = false;
            var __UVIndex__ = default(float?);
            var __UVIndex__b__ = false;
            var __UVIndexText__ = default(string);
            var __UVIndexText__b__ = false;
            var __Visibility__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility);
            var __Visibility__b__ = false;
            var __ObstructionsToVisibility__ = default(string);
            var __ObstructionsToVisibility__b__ = false;
            var __CloudCover__ = default(int?);
            var __CloudCover__b__ = false;
            var __Ceiling__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling);
            var __Ceiling__b__ = false;
            var __Pressure__ = default(global::SimpleWeather.Weather_API.AccuWeather.Pressure);
            var __Pressure__b__ = false;
            var __PressureTendency__ = default(global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency);
            var __PressureTendency__b__ = false;
            var __Past24HourTemperatureDeparture__ = default(global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture);
            var __Past24HourTemperatureDeparture__b__ = false;
            var __ApparentTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature);
            var __ApparentTemperature__b__ = false;
            var __WindChillTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature);
            var __WindChillTemperature__b__ = false;
            var __WetBulbTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature);
            var __WetBulbTemperature__b__ = false;
            var __Precip1hr__ = default(global::SimpleWeather.Weather_API.AccuWeather.Precip1hr);
            var __Precip1hr__b__ = false;
            var __PrecipitationSummary__ = default(global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary);
            var __PrecipitationSummary__b__ = false;
            var __TemperatureSummary__ = default(global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary);
            var __TemperatureSummary__b__ = false;
            var __MobileLink__ = default(string);
            var __MobileLink__b__ = false;
            var __Link__ = default(string);
            var __Link__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __LocalObservationDateTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __LocalObservationDateTime__b__ = true;
                        break;
                    case 1:
                        __EpochTime__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochTime__b__ = true;
                        break;
                    case 2:
                        __WeatherText__ = reader.ReadString();
                        __WeatherText__b__ = true;
                        break;
                    case 3:
                        __WeatherIcon__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __WeatherIcon__b__ = true;
                        break;
                    case 4:
                        __HasPrecipitation__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __HasPrecipitation__b__ = true;
                        break;
                    case 5:
                        __PrecipitationType__ = reader.ReadString();
                        __PrecipitationType__b__ = true;
                        break;
                    case 6:
                        __IsDayTime__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __IsDayTime__b__ = true;
                        break;
                    case 7:
                        __Temperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentTemperature>().Deserialize(ref reader, formatterResolver);
                        __Temperature__b__ = true;
                        break;
                    case 8:
                        __RealFeelTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperature>().Deserialize(ref reader, formatterResolver);
                        __RealFeelTemperature__b__ = true;
                        break;
                    case 9:
                        __RealFeelTemperatureShade__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentRealfeeltemperatureshade>().Deserialize(ref reader, formatterResolver);
                        __RealFeelTemperatureShade__b__ = true;
                        break;
                    case 10:
                        __RelativeHumidity__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __RelativeHumidity__b__ = true;
                        break;
                    case 11:
                        __IndoorRelativeHumidity__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __IndoorRelativeHumidity__b__ = true;
                        break;
                    case 12:
                        __DewPoint__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentDewpoint>().Deserialize(ref reader, formatterResolver);
                        __DewPoint__b__ = true;
                        break;
                    case 13:
                        __Wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentWind>().Deserialize(ref reader, formatterResolver);
                        __Wind__b__ = true;
                        break;
                    case 14:
                        __WindGust__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentWindgust>().Deserialize(ref reader, formatterResolver);
                        __WindGust__b__ = true;
                        break;
                    case 15:
                        __UVIndex__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __UVIndex__b__ = true;
                        break;
                    case 16:
                        __UVIndexText__ = reader.ReadString();
                        __UVIndexText__b__ = true;
                        break;
                    case 17:
                        __Visibility__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentVisibility>().Deserialize(ref reader, formatterResolver);
                        __Visibility__b__ = true;
                        break;
                    case 18:
                        __ObstructionsToVisibility__ = reader.ReadString();
                        __ObstructionsToVisibility__b__ = true;
                        break;
                    case 19:
                        __CloudCover__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __CloudCover__b__ = true;
                        break;
                    case 20:
                        __Ceiling__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentCeiling>().Deserialize(ref reader, formatterResolver);
                        __Ceiling__b__ = true;
                        break;
                    case 21:
                        __Pressure__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Pressure>().Deserialize(ref reader, formatterResolver);
                        __Pressure__b__ = true;
                        break;
                    case 22:
                        __PressureTendency__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Pressuretendency>().Deserialize(ref reader, formatterResolver);
                        __PressureTendency__b__ = true;
                        break;
                    case 23:
                        __Past24HourTemperatureDeparture__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Past24hourtemperaturedeparture>().Deserialize(ref reader, formatterResolver);
                        __Past24HourTemperatureDeparture__b__ = true;
                        break;
                    case 24:
                        __ApparentTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Apparenttemperature>().Deserialize(ref reader, formatterResolver);
                        __ApparentTemperature__b__ = true;
                        break;
                    case 25:
                        __WindChillTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windchilltemperature>().Deserialize(ref reader, formatterResolver);
                        __WindChillTemperature__b__ = true;
                        break;
                    case 26:
                        __WetBulbTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentWetbulbtemperature>().Deserialize(ref reader, formatterResolver);
                        __WetBulbTemperature__b__ = true;
                        break;
                    case 27:
                        __Precip1hr__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Precip1hr>().Deserialize(ref reader, formatterResolver);
                        __Precip1hr__b__ = true;
                        break;
                    case 28:
                        __PrecipitationSummary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Precipitationsummary>().Deserialize(ref reader, formatterResolver);
                        __PrecipitationSummary__b__ = true;
                        break;
                    case 29:
                        __TemperatureSummary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Temperaturesummary>().Deserialize(ref reader, formatterResolver);
                        __TemperatureSummary__b__ = true;
                        break;
                    case 30:
                        __MobileLink__ = reader.ReadString();
                        __MobileLink__b__ = true;
                        break;
                    case 31:
                        __Link__ = reader.ReadString();
                        __Link__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem();
            if(__LocalObservationDateTime__b__) ____result.LocalObservationDateTime = __LocalObservationDateTime__;
            if(__EpochTime__b__) ____result.EpochTime = __EpochTime__;
            if(__WeatherText__b__) ____result.WeatherText = __WeatherText__;
            if(__WeatherIcon__b__) ____result.WeatherIcon = __WeatherIcon__;
            if(__HasPrecipitation__b__) ____result.HasPrecipitation = __HasPrecipitation__;
            if(__PrecipitationType__b__) ____result.PrecipitationType = __PrecipitationType__;
            if(__IsDayTime__b__) ____result.IsDayTime = __IsDayTime__;
            if(__Temperature__b__) ____result.Temperature = __Temperature__;
            if(__RealFeelTemperature__b__) ____result.RealFeelTemperature = __RealFeelTemperature__;
            if(__RealFeelTemperatureShade__b__) ____result.RealFeelTemperatureShade = __RealFeelTemperatureShade__;
            if(__RelativeHumidity__b__) ____result.RelativeHumidity = __RelativeHumidity__;
            if(__IndoorRelativeHumidity__b__) ____result.IndoorRelativeHumidity = __IndoorRelativeHumidity__;
            if(__DewPoint__b__) ____result.DewPoint = __DewPoint__;
            if(__Wind__b__) ____result.Wind = __Wind__;
            if(__WindGust__b__) ____result.WindGust = __WindGust__;
            if(__UVIndex__b__) ____result.UVIndex = __UVIndex__;
            if(__UVIndexText__b__) ____result.UVIndexText = __UVIndexText__;
            if(__Visibility__b__) ____result.Visibility = __Visibility__;
            if(__ObstructionsToVisibility__b__) ____result.ObstructionsToVisibility = __ObstructionsToVisibility__;
            if(__CloudCover__b__) ____result.CloudCover = __CloudCover__;
            if(__Ceiling__b__) ____result.Ceiling = __Ceiling__;
            if(__Pressure__b__) ____result.Pressure = __Pressure__;
            if(__PressureTendency__b__) ____result.PressureTendency = __PressureTendency__;
            if(__Past24HourTemperatureDeparture__b__) ____result.Past24HourTemperatureDeparture = __Past24HourTemperatureDeparture__;
            if(__ApparentTemperature__b__) ____result.ApparentTemperature = __ApparentTemperature__;
            if(__WindChillTemperature__b__) ____result.WindChillTemperature = __WindChillTemperature__;
            if(__WetBulbTemperature__b__) ____result.WetBulbTemperature = __WetBulbTemperature__;
            if(__Precip1hr__b__) ____result.Precip1hr = __Precip1hr__;
            if(__PrecipitationSummary__b__) ____result.PrecipitationSummary = __PrecipitationSummary__;
            if(__TemperatureSummary__b__) ____result.TemperatureSummary = __TemperatureSummary__;
            if(__MobileLink__b__) ____result.MobileLink = __MobileLink__;
            if(__Link__b__) ____result.Link = __Link__;

            return ____result;
        }
    }


    public sealed class CurrentRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.CurrentRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Items"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Items"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.CurrentRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem[]>().Serialize(ref writer, value.Items, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.CurrentRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Items__ = default(global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem[]);
            var __Items__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Items__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.CurrentsItem[]>().Deserialize(ref reader, formatterResolver);
                        __Items__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.CurrentRootobject();
            if(__Items__b__) ____result.Items = __Items__;

            return ____result;
        }
    }


    public sealed class HeadlineFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Headline>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HeadlineFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EffectiveDate"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EffectiveEpochDate"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Severity"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Text"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Category"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EndDate"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EndEpochDate"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("MobileLink"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Link"), 8},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("EffectiveDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EffectiveEpochDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Text"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Category"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EndDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EndEpochDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("MobileLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Link"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Headline value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.EffectiveDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EffectiveEpochDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Severity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.Text);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.Category);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.EndDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EndEpochDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.MobileLink);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.Link);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Headline Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __EffectiveDate__ = default(global::System.DateTimeOffset);
            var __EffectiveDate__b__ = false;
            var __EffectiveEpochDate__ = default(long?);
            var __EffectiveEpochDate__b__ = false;
            var __Severity__ = default(int?);
            var __Severity__b__ = false;
            var __Text__ = default(string);
            var __Text__b__ = false;
            var __Category__ = default(string);
            var __Category__b__ = false;
            var __EndDate__ = default(global::System.DateTimeOffset);
            var __EndDate__b__ = false;
            var __EndEpochDate__ = default(long?);
            var __EndEpochDate__b__ = false;
            var __MobileLink__ = default(string);
            var __MobileLink__b__ = false;
            var __Link__ = default(string);
            var __Link__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __EffectiveDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __EffectiveDate__b__ = true;
                        break;
                    case 1:
                        __EffectiveEpochDate__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EffectiveEpochDate__b__ = true;
                        break;
                    case 2:
                        __Severity__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Severity__b__ = true;
                        break;
                    case 3:
                        __Text__ = reader.ReadString();
                        __Text__b__ = true;
                        break;
                    case 4:
                        __Category__ = reader.ReadString();
                        __Category__b__ = true;
                        break;
                    case 5:
                        __EndDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __EndDate__b__ = true;
                        break;
                    case 6:
                        __EndEpochDate__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EndEpochDate__b__ = true;
                        break;
                    case 7:
                        __MobileLink__ = reader.ReadString();
                        __MobileLink__b__ = true;
                        break;
                    case 8:
                        __Link__ = reader.ReadString();
                        __Link__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Headline();
            if(__EffectiveDate__b__) ____result.EffectiveDate = __EffectiveDate__;
            if(__EffectiveEpochDate__b__) ____result.EffectiveEpochDate = __EffectiveEpochDate__;
            if(__Severity__b__) ____result.Severity = __Severity__;
            if(__Text__b__) ____result.Text = __Text__;
            if(__Category__b__) ____result.Category = __Category__;
            if(__EndDate__b__) ____result.EndDate = __EndDate__;
            if(__EndEpochDate__b__) ____result.EndEpochDate = __EndEpochDate__;
            if(__MobileLink__b__) ____result.MobileLink = __MobileLink__;
            if(__Link__b__) ____result.Link = __Link__;

            return ____result;
        }
    }


    public sealed class SunFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Sun>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SunFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rise"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochRise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Set"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochSet"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Rise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochRise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Set"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochSet"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Sun value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.Rise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochRise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.Set, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochSet, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Sun Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Rise__ = default(global::System.DateTimeOffset?);
            var __Rise__b__ = false;
            var __EpochRise__ = default(long?);
            var __EpochRise__b__ = false;
            var __Set__ = default(global::System.DateTimeOffset?);
            var __Set__b__ = false;
            var __EpochSet__ = default(long?);
            var __EpochSet__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Rise__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __Rise__b__ = true;
                        break;
                    case 1:
                        __EpochRise__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochRise__b__ = true;
                        break;
                    case 2:
                        __Set__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __Set__b__ = true;
                        break;
                    case 3:
                        __EpochSet__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochSet__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Sun();
            if(__Rise__b__) ____result.Rise = __Rise__;
            if(__EpochRise__b__) ____result.EpochRise = __EpochRise__;
            if(__Set__b__) ____result.Set = __Set__;
            if(__EpochSet__b__) ____result.EpochSet = __EpochSet__;

            return ____result;
        }
    }


    public sealed class MoonFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Moon>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MoonFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rise"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochRise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Set"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochSet"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Phase"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Age"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Rise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochRise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Set"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochSet"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Phase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Age"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Moon value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.Rise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochRise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.Set, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochSet, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.Phase);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Age, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Moon Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Rise__ = default(global::System.DateTimeOffset?);
            var __Rise__b__ = false;
            var __EpochRise__ = default(long?);
            var __EpochRise__b__ = false;
            var __Set__ = default(global::System.DateTimeOffset?);
            var __Set__b__ = false;
            var __EpochSet__ = default(long?);
            var __EpochSet__b__ = false;
            var __Phase__ = default(string);
            var __Phase__b__ = false;
            var __Age__ = default(int?);
            var __Age__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Rise__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __Rise__b__ = true;
                        break;
                    case 1:
                        __EpochRise__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochRise__b__ = true;
                        break;
                    case 2:
                        __Set__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __Set__b__ = true;
                        break;
                    case 3:
                        __EpochSet__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochSet__b__ = true;
                        break;
                    case 4:
                        __Phase__ = reader.ReadString();
                        __Phase__b__ = true;
                        break;
                    case 5:
                        __Age__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Age__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Moon();
            if(__Rise__b__) ____result.Rise = __Rise__;
            if(__EpochRise__b__) ____result.EpochRise = __EpochRise__;
            if(__Set__b__) ____result.Set = __Set__;
            if(__EpochSet__b__) ____result.EpochSet = __EpochSet__;
            if(__Phase__b__) ____result.Phase = __Phase__;
            if(__Age__b__) ____result.Age = __Age__;

            return ____result;
        }
    }


    public sealed class MinimumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Minimum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MinimumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Minimum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Minimum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Minimum();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class MaximumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Maximum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MaximumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Maximum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Maximum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Maximum();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class DailyTemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyTemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Minimum"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Maximum"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Minimum"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Maximum"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Minimum>().Serialize(ref writer, value.Minimum, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Maximum>().Serialize(ref writer, value.Maximum, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Minimum__ = default(global::SimpleWeather.Weather_API.AccuWeather.Minimum);
            var __Minimum__b__ = false;
            var __Maximum__ = default(global::SimpleWeather.Weather_API.AccuWeather.Maximum);
            var __Maximum__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Minimum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Minimum>().Deserialize(ref reader, formatterResolver);
                        __Minimum__b__ = true;
                        break;
                    case 1:
                        __Maximum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Maximum>().Deserialize(ref reader, formatterResolver);
                        __Maximum__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature();
            if(__Minimum__b__) ____result.Minimum = __Minimum__;
            if(__Maximum__b__) ____result.Maximum = __Maximum__;

            return ____result;
        }
    }


    public sealed class DailyRealfeeltemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyRealfeeltemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Minimum"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Maximum"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Minimum"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Maximum"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Minimum>().Serialize(ref writer, value.Minimum, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Maximum>().Serialize(ref writer, value.Maximum, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Minimum__ = default(global::SimpleWeather.Weather_API.AccuWeather.Minimum);
            var __Minimum__b__ = false;
            var __Maximum__ = default(global::SimpleWeather.Weather_API.AccuWeather.Maximum);
            var __Maximum__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Minimum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Minimum>().Deserialize(ref reader, formatterResolver);
                        __Minimum__b__ = true;
                        break;
                    case 1:
                        __Maximum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Maximum>().Deserialize(ref reader, formatterResolver);
                        __Maximum__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature();
            if(__Minimum__b__) ____result.Minimum = __Minimum__;
            if(__Maximum__b__) ____result.Maximum = __Maximum__;

            return ____result;
        }
    }


    public sealed class DailyRealfeeltemperatureshadeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyRealfeeltemperatureshadeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Minimum"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Maximum"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Minimum"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Maximum"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Minimum>().Serialize(ref writer, value.Minimum, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Maximum>().Serialize(ref writer, value.Maximum, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Minimum__ = default(global::SimpleWeather.Weather_API.AccuWeather.Minimum);
            var __Minimum__b__ = false;
            var __Maximum__ = default(global::SimpleWeather.Weather_API.AccuWeather.Maximum);
            var __Maximum__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Minimum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Minimum>().Deserialize(ref reader, formatterResolver);
                        __Minimum__b__ = true;
                        break;
                    case 1:
                        __Maximum__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Maximum>().Deserialize(ref reader, formatterResolver);
                        __Maximum__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade();
            if(__Minimum__b__) ____result.Minimum = __Minimum__;
            if(__Maximum__b__) ____result.Maximum = __Maximum__;

            return ____result;
        }
    }


    public sealed class HeatingFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Heating>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HeatingFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Heating value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Heating Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Heating();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class CoolingFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Cooling>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CoolingFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Cooling value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Cooling Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Cooling();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class DegreedaysummaryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DegreedaysummaryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Heating"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Cooling"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Heating"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Cooling"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Heating>().Serialize(ref writer, value.Heating, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Cooling>().Serialize(ref writer, value.Cooling, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Heating__ = default(global::SimpleWeather.Weather_API.AccuWeather.Heating);
            var __Heating__b__ = false;
            var __Cooling__ = default(global::SimpleWeather.Weather_API.AccuWeather.Cooling);
            var __Cooling__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Heating__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Heating>().Deserialize(ref reader, formatterResolver);
                        __Heating__b__ = true;
                        break;
                    case 1:
                        __Cooling__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Cooling>().Deserialize(ref reader, formatterResolver);
                        __Cooling__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary();
            if(__Heating__b__) ____result.Heating = __Heating__;
            if(__Cooling__b__) ____result.Cooling = __Cooling__;

            return ____result;
        }
    }


    public sealed class AirandpollenFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Airandpollen>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AirandpollenFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Name"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Category"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("CategoryValue"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Type"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Category"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("CategoryValue"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Type"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Airandpollen value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.Name);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.Category);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.CategoryValue, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.Type);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Airandpollen Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Name__ = default(string);
            var __Name__b__ = false;
            var __Value__ = default(int?);
            var __Value__b__ = false;
            var __Category__ = default(string);
            var __Category__b__ = false;
            var __CategoryValue__ = default(int?);
            var __CategoryValue__b__ = false;
            var __Type__ = default(string);
            var __Type__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = reader.ReadString();
                        __Name__b__ = true;
                        break;
                    case 1:
                        __Value__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 2:
                        __Category__ = reader.ReadString();
                        __Category__b__ = true;
                        break;
                    case 3:
                        __CategoryValue__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __CategoryValue__b__ = true;
                        break;
                    case 4:
                        __Type__ = reader.ReadString();
                        __Type__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Airandpollen();
            if(__Name__b__) ____result.Name = __Name__;
            if(__Value__b__) ____result.Value = __Value__;
            if(__Category__b__) ____result.Category = __Category__;
            if(__CategoryValue__b__) ____result.CategoryValue = __CategoryValue__;
            if(__Type__b__) ____result.Type = __Type__;

            return ____result;
        }
    }


    public sealed class SpeedFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Speed>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SpeedFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Speed value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Speed Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Speed();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class DirectionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Direction>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DirectionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Degrees"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Localized"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("English"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Degrees"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Localized"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("English"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Direction value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Degrees, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Localized);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.English);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Direction Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Degrees__ = default(float?);
            var __Degrees__b__ = false;
            var __Localized__ = default(string);
            var __Localized__b__ = false;
            var __English__ = default(string);
            var __English__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Degrees__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Degrees__b__ = true;
                        break;
                    case 1:
                        __Localized__ = reader.ReadString();
                        __Localized__b__ = true;
                        break;
                    case 2:
                        __English__ = reader.ReadString();
                        __English__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Direction();
            if(__Degrees__b__) ____result.Degrees = __Degrees__;
            if(__Localized__b__) ____result.Localized = __Localized__;
            if(__English__b__) ____result.English = __English__;

            return ____result;
        }
    }


    public sealed class WindFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Wind>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WindFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Speed"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Direction"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Direction"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Wind value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Speed>().Serialize(ref writer, value.Speed, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Direction>().Serialize(ref writer, value.Direction, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Wind Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Speed__ = default(global::SimpleWeather.Weather_API.AccuWeather.Speed);
            var __Speed__b__ = false;
            var __Direction__ = default(global::SimpleWeather.Weather_API.AccuWeather.Direction);
            var __Direction__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Speed__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Speed>().Deserialize(ref reader, formatterResolver);
                        __Speed__b__ = true;
                        break;
                    case 1:
                        __Direction__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Direction>().Deserialize(ref reader, formatterResolver);
                        __Direction__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Wind();
            if(__Speed__b__) ____result.Speed = __Speed__;
            if(__Direction__b__) ____result.Direction = __Direction__;

            return ____result;
        }
    }


    public sealed class WindgustFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Windgust>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WindgustFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Speed"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Direction"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Direction"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Windgust value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Speed>().Serialize(ref writer, value.Speed, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Direction>().Serialize(ref writer, value.Direction, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Windgust Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Speed__ = default(global::SimpleWeather.Weather_API.AccuWeather.Speed);
            var __Speed__b__ = false;
            var __Direction__ = default(global::SimpleWeather.Weather_API.AccuWeather.Direction);
            var __Direction__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Speed__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Speed>().Deserialize(ref reader, formatterResolver);
                        __Speed__b__ = true;
                        break;
                    case 1:
                        __Direction__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Direction>().Deserialize(ref reader, formatterResolver);
                        __Direction__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Windgust();
            if(__Speed__b__) ____result.Speed = __Speed__;
            if(__Direction__b__) ____result.Direction = __Direction__;

            return ____result;
        }
    }


    public sealed class TotalliquidFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TotalliquidFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Totalliquid value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Totalliquid Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Totalliquid();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class RainFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Rain>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RainFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Rain value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Rain Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Rain();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class SnowFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Snow>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SnowFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Snow value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Snow Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Snow();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class IceFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Ice>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public IceFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Ice value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Ice Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Ice();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class DayFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Day>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DayFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Icon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IconPhrase"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HasPrecipitation"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ShortPhrase"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LongPhrase"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationProbability"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ThunderstormProbability"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RainProbability"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("SnowProbability"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IceProbability"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Wind"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WindGust"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("TotalLiquid"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rain"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Snow"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Ice"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfPrecipitation"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfRain"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfSnow"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfIce"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("CloudCover"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationType"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationIntensity"), 22},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IconPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HasPrecipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ShortPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LongPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ThunderstormProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RainProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("SnowProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IceProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WindGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("TotalLiquid"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Ice"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfPrecipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfRain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfSnow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfIce"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("CloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationIntensity"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Day value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Icon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.IconPhrase);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.HasPrecipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.ShortPhrase);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.LongPhrase);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.PrecipitationProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.ThunderstormProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.RainProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.SnowProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.IceProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wind>().Serialize(ref writer, value.Wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windgust>().Serialize(ref writer, value.WindGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>().Serialize(ref writer, value.TotalLiquid, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Rain>().Serialize(ref writer, value.Rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Snow>().Serialize(ref writer, value.Snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ice>().Serialize(ref writer, value.Ice, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfPrecipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfRain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfSnow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfIce, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.CloudCover, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteString(value.PrecipitationType);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteString(value.PrecipitationIntensity);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Day Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Icon__ = default(int?);
            var __Icon__b__ = false;
            var __IconPhrase__ = default(string);
            var __IconPhrase__b__ = false;
            var __HasPrecipitation__ = default(bool?);
            var __HasPrecipitation__b__ = false;
            var __ShortPhrase__ = default(string);
            var __ShortPhrase__b__ = false;
            var __LongPhrase__ = default(string);
            var __LongPhrase__b__ = false;
            var __PrecipitationProbability__ = default(int?);
            var __PrecipitationProbability__b__ = false;
            var __ThunderstormProbability__ = default(int?);
            var __ThunderstormProbability__b__ = false;
            var __RainProbability__ = default(int?);
            var __RainProbability__b__ = false;
            var __SnowProbability__ = default(int?);
            var __SnowProbability__b__ = false;
            var __IceProbability__ = default(int?);
            var __IceProbability__b__ = false;
            var __Wind__ = default(global::SimpleWeather.Weather_API.AccuWeather.Wind);
            var __Wind__b__ = false;
            var __WindGust__ = default(global::SimpleWeather.Weather_API.AccuWeather.Windgust);
            var __WindGust__b__ = false;
            var __TotalLiquid__ = default(global::SimpleWeather.Weather_API.AccuWeather.Totalliquid);
            var __TotalLiquid__b__ = false;
            var __Rain__ = default(global::SimpleWeather.Weather_API.AccuWeather.Rain);
            var __Rain__b__ = false;
            var __Snow__ = default(global::SimpleWeather.Weather_API.AccuWeather.Snow);
            var __Snow__b__ = false;
            var __Ice__ = default(global::SimpleWeather.Weather_API.AccuWeather.Ice);
            var __Ice__b__ = false;
            var __HoursOfPrecipitation__ = default(float?);
            var __HoursOfPrecipitation__b__ = false;
            var __HoursOfRain__ = default(float?);
            var __HoursOfRain__b__ = false;
            var __HoursOfSnow__ = default(float?);
            var __HoursOfSnow__b__ = false;
            var __HoursOfIce__ = default(float?);
            var __HoursOfIce__b__ = false;
            var __CloudCover__ = default(float?);
            var __CloudCover__b__ = false;
            var __PrecipitationType__ = default(string);
            var __PrecipitationType__b__ = false;
            var __PrecipitationIntensity__ = default(string);
            var __PrecipitationIntensity__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Icon__b__ = true;
                        break;
                    case 1:
                        __IconPhrase__ = reader.ReadString();
                        __IconPhrase__b__ = true;
                        break;
                    case 2:
                        __HasPrecipitation__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __HasPrecipitation__b__ = true;
                        break;
                    case 3:
                        __ShortPhrase__ = reader.ReadString();
                        __ShortPhrase__b__ = true;
                        break;
                    case 4:
                        __LongPhrase__ = reader.ReadString();
                        __LongPhrase__b__ = true;
                        break;
                    case 5:
                        __PrecipitationProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __PrecipitationProbability__b__ = true;
                        break;
                    case 6:
                        __ThunderstormProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __ThunderstormProbability__b__ = true;
                        break;
                    case 7:
                        __RainProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __RainProbability__b__ = true;
                        break;
                    case 8:
                        __SnowProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __SnowProbability__b__ = true;
                        break;
                    case 9:
                        __IceProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __IceProbability__b__ = true;
                        break;
                    case 10:
                        __Wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wind>().Deserialize(ref reader, formatterResolver);
                        __Wind__b__ = true;
                        break;
                    case 11:
                        __WindGust__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windgust>().Deserialize(ref reader, formatterResolver);
                        __WindGust__b__ = true;
                        break;
                    case 12:
                        __TotalLiquid__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>().Deserialize(ref reader, formatterResolver);
                        __TotalLiquid__b__ = true;
                        break;
                    case 13:
                        __Rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Rain>().Deserialize(ref reader, formatterResolver);
                        __Rain__b__ = true;
                        break;
                    case 14:
                        __Snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Snow>().Deserialize(ref reader, formatterResolver);
                        __Snow__b__ = true;
                        break;
                    case 15:
                        __Ice__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ice>().Deserialize(ref reader, formatterResolver);
                        __Ice__b__ = true;
                        break;
                    case 16:
                        __HoursOfPrecipitation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfPrecipitation__b__ = true;
                        break;
                    case 17:
                        __HoursOfRain__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfRain__b__ = true;
                        break;
                    case 18:
                        __HoursOfSnow__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfSnow__b__ = true;
                        break;
                    case 19:
                        __HoursOfIce__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfIce__b__ = true;
                        break;
                    case 20:
                        __CloudCover__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __CloudCover__b__ = true;
                        break;
                    case 21:
                        __PrecipitationType__ = reader.ReadString();
                        __PrecipitationType__b__ = true;
                        break;
                    case 22:
                        __PrecipitationIntensity__ = reader.ReadString();
                        __PrecipitationIntensity__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Day();
            if(__Icon__b__) ____result.Icon = __Icon__;
            if(__IconPhrase__b__) ____result.IconPhrase = __IconPhrase__;
            if(__HasPrecipitation__b__) ____result.HasPrecipitation = __HasPrecipitation__;
            if(__ShortPhrase__b__) ____result.ShortPhrase = __ShortPhrase__;
            if(__LongPhrase__b__) ____result.LongPhrase = __LongPhrase__;
            if(__PrecipitationProbability__b__) ____result.PrecipitationProbability = __PrecipitationProbability__;
            if(__ThunderstormProbability__b__) ____result.ThunderstormProbability = __ThunderstormProbability__;
            if(__RainProbability__b__) ____result.RainProbability = __RainProbability__;
            if(__SnowProbability__b__) ____result.SnowProbability = __SnowProbability__;
            if(__IceProbability__b__) ____result.IceProbability = __IceProbability__;
            if(__Wind__b__) ____result.Wind = __Wind__;
            if(__WindGust__b__) ____result.WindGust = __WindGust__;
            if(__TotalLiquid__b__) ____result.TotalLiquid = __TotalLiquid__;
            if(__Rain__b__) ____result.Rain = __Rain__;
            if(__Snow__b__) ____result.Snow = __Snow__;
            if(__Ice__b__) ____result.Ice = __Ice__;
            if(__HoursOfPrecipitation__b__) ____result.HoursOfPrecipitation = __HoursOfPrecipitation__;
            if(__HoursOfRain__b__) ____result.HoursOfRain = __HoursOfRain__;
            if(__HoursOfSnow__b__) ____result.HoursOfSnow = __HoursOfSnow__;
            if(__HoursOfIce__b__) ____result.HoursOfIce = __HoursOfIce__;
            if(__CloudCover__b__) ____result.CloudCover = __CloudCover__;
            if(__PrecipitationType__b__) ____result.PrecipitationType = __PrecipitationType__;
            if(__PrecipitationIntensity__b__) ____result.PrecipitationIntensity = __PrecipitationIntensity__;

            return ____result;
        }
    }


    public sealed class NightFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Night>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public NightFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Icon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IconPhrase"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HasPrecipitation"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ShortPhrase"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LongPhrase"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationProbability"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ThunderstormProbability"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RainProbability"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("SnowProbability"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IceProbability"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Wind"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WindGust"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("TotalLiquid"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rain"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Snow"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Ice"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfPrecipitation"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfRain"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfSnow"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfIce"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("CloudCover"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationType"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationIntensity"), 22},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IconPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HasPrecipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ShortPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LongPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ThunderstormProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RainProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("SnowProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IceProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WindGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("TotalLiquid"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Ice"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfPrecipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfRain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfSnow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfIce"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("CloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationIntensity"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Night value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Icon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.IconPhrase);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.HasPrecipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.ShortPhrase);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.LongPhrase);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.PrecipitationProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.ThunderstormProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.RainProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.SnowProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.IceProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wind>().Serialize(ref writer, value.Wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windgust>().Serialize(ref writer, value.WindGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>().Serialize(ref writer, value.TotalLiquid, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Rain>().Serialize(ref writer, value.Rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Snow>().Serialize(ref writer, value.Snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ice>().Serialize(ref writer, value.Ice, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfPrecipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfRain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfSnow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfIce, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.CloudCover, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteString(value.PrecipitationType);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteString(value.PrecipitationIntensity);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Night Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Icon__ = default(int?);
            var __Icon__b__ = false;
            var __IconPhrase__ = default(string);
            var __IconPhrase__b__ = false;
            var __HasPrecipitation__ = default(bool?);
            var __HasPrecipitation__b__ = false;
            var __ShortPhrase__ = default(string);
            var __ShortPhrase__b__ = false;
            var __LongPhrase__ = default(string);
            var __LongPhrase__b__ = false;
            var __PrecipitationProbability__ = default(int?);
            var __PrecipitationProbability__b__ = false;
            var __ThunderstormProbability__ = default(int?);
            var __ThunderstormProbability__b__ = false;
            var __RainProbability__ = default(int?);
            var __RainProbability__b__ = false;
            var __SnowProbability__ = default(int?);
            var __SnowProbability__b__ = false;
            var __IceProbability__ = default(int?);
            var __IceProbability__b__ = false;
            var __Wind__ = default(global::SimpleWeather.Weather_API.AccuWeather.Wind);
            var __Wind__b__ = false;
            var __WindGust__ = default(global::SimpleWeather.Weather_API.AccuWeather.Windgust);
            var __WindGust__b__ = false;
            var __TotalLiquid__ = default(global::SimpleWeather.Weather_API.AccuWeather.Totalliquid);
            var __TotalLiquid__b__ = false;
            var __Rain__ = default(global::SimpleWeather.Weather_API.AccuWeather.Rain);
            var __Rain__b__ = false;
            var __Snow__ = default(global::SimpleWeather.Weather_API.AccuWeather.Snow);
            var __Snow__b__ = false;
            var __Ice__ = default(global::SimpleWeather.Weather_API.AccuWeather.Ice);
            var __Ice__b__ = false;
            var __HoursOfPrecipitation__ = default(float?);
            var __HoursOfPrecipitation__b__ = false;
            var __HoursOfRain__ = default(float?);
            var __HoursOfRain__b__ = false;
            var __HoursOfSnow__ = default(float?);
            var __HoursOfSnow__b__ = false;
            var __HoursOfIce__ = default(float?);
            var __HoursOfIce__b__ = false;
            var __CloudCover__ = default(float?);
            var __CloudCover__b__ = false;
            var __PrecipitationType__ = default(string);
            var __PrecipitationType__b__ = false;
            var __PrecipitationIntensity__ = default(string);
            var __PrecipitationIntensity__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Icon__b__ = true;
                        break;
                    case 1:
                        __IconPhrase__ = reader.ReadString();
                        __IconPhrase__b__ = true;
                        break;
                    case 2:
                        __HasPrecipitation__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __HasPrecipitation__b__ = true;
                        break;
                    case 3:
                        __ShortPhrase__ = reader.ReadString();
                        __ShortPhrase__b__ = true;
                        break;
                    case 4:
                        __LongPhrase__ = reader.ReadString();
                        __LongPhrase__b__ = true;
                        break;
                    case 5:
                        __PrecipitationProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __PrecipitationProbability__b__ = true;
                        break;
                    case 6:
                        __ThunderstormProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __ThunderstormProbability__b__ = true;
                        break;
                    case 7:
                        __RainProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __RainProbability__b__ = true;
                        break;
                    case 8:
                        __SnowProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __SnowProbability__b__ = true;
                        break;
                    case 9:
                        __IceProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __IceProbability__b__ = true;
                        break;
                    case 10:
                        __Wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wind>().Deserialize(ref reader, formatterResolver);
                        __Wind__b__ = true;
                        break;
                    case 11:
                        __WindGust__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windgust>().Deserialize(ref reader, formatterResolver);
                        __WindGust__b__ = true;
                        break;
                    case 12:
                        __TotalLiquid__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>().Deserialize(ref reader, formatterResolver);
                        __TotalLiquid__b__ = true;
                        break;
                    case 13:
                        __Rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Rain>().Deserialize(ref reader, formatterResolver);
                        __Rain__b__ = true;
                        break;
                    case 14:
                        __Snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Snow>().Deserialize(ref reader, formatterResolver);
                        __Snow__b__ = true;
                        break;
                    case 15:
                        __Ice__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ice>().Deserialize(ref reader, formatterResolver);
                        __Ice__b__ = true;
                        break;
                    case 16:
                        __HoursOfPrecipitation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfPrecipitation__b__ = true;
                        break;
                    case 17:
                        __HoursOfRain__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfRain__b__ = true;
                        break;
                    case 18:
                        __HoursOfSnow__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfSnow__b__ = true;
                        break;
                    case 19:
                        __HoursOfIce__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfIce__b__ = true;
                        break;
                    case 20:
                        __CloudCover__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __CloudCover__b__ = true;
                        break;
                    case 21:
                        __PrecipitationType__ = reader.ReadString();
                        __PrecipitationType__b__ = true;
                        break;
                    case 22:
                        __PrecipitationIntensity__ = reader.ReadString();
                        __PrecipitationIntensity__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Night();
            if(__Icon__b__) ____result.Icon = __Icon__;
            if(__IconPhrase__b__) ____result.IconPhrase = __IconPhrase__;
            if(__HasPrecipitation__b__) ____result.HasPrecipitation = __HasPrecipitation__;
            if(__ShortPhrase__b__) ____result.ShortPhrase = __ShortPhrase__;
            if(__LongPhrase__b__) ____result.LongPhrase = __LongPhrase__;
            if(__PrecipitationProbability__b__) ____result.PrecipitationProbability = __PrecipitationProbability__;
            if(__ThunderstormProbability__b__) ____result.ThunderstormProbability = __ThunderstormProbability__;
            if(__RainProbability__b__) ____result.RainProbability = __RainProbability__;
            if(__SnowProbability__b__) ____result.SnowProbability = __SnowProbability__;
            if(__IceProbability__b__) ____result.IceProbability = __IceProbability__;
            if(__Wind__b__) ____result.Wind = __Wind__;
            if(__WindGust__b__) ____result.WindGust = __WindGust__;
            if(__TotalLiquid__b__) ____result.TotalLiquid = __TotalLiquid__;
            if(__Rain__b__) ____result.Rain = __Rain__;
            if(__Snow__b__) ____result.Snow = __Snow__;
            if(__Ice__b__) ____result.Ice = __Ice__;
            if(__HoursOfPrecipitation__b__) ____result.HoursOfPrecipitation = __HoursOfPrecipitation__;
            if(__HoursOfRain__b__) ____result.HoursOfRain = __HoursOfRain__;
            if(__HoursOfSnow__b__) ____result.HoursOfSnow = __HoursOfSnow__;
            if(__HoursOfIce__b__) ____result.HoursOfIce = __HoursOfIce__;
            if(__CloudCover__b__) ____result.CloudCover = __CloudCover__;
            if(__PrecipitationType__b__) ____result.PrecipitationType = __PrecipitationType__;
            if(__PrecipitationIntensity__b__) ____result.PrecipitationIntensity = __PrecipitationIntensity__;

            return ____result;
        }
    }


    public sealed class DailyforecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyforecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Date"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochDate"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Sun"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Moon"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Temperature"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RealFeelTemperature"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RealFeelTemperatureShade"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HoursOfSun"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("DegreeDaySummary"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("AirAndPollen"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Day"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Night"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Sources"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("MobileLink"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Link"), 14},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Date"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Sun"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Moon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RealFeelTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RealFeelTemperatureShade"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HoursOfSun"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("DegreeDaySummary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("AirAndPollen"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Night"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Sources"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("MobileLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Link"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.Date, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Sun>().Serialize(ref writer, value.Sun, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Moon>().Serialize(ref writer, value.Moon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature>().Serialize(ref writer, value.Temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature>().Serialize(ref writer, value.RealFeelTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade>().Serialize(ref writer, value.RealFeelTemperatureShade, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.HoursOfSun, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary>().Serialize(ref writer, value.DegreeDaySummary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Airandpollen[]>().Serialize(ref writer, value.AirAndPollen, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Day>().Serialize(ref writer, value.Day, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Night>().Serialize(ref writer, value.Night, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.Sources, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.MobileLink);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.Link);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Date__ = default(global::System.DateTimeOffset);
            var __Date__b__ = false;
            var __EpochDate__ = default(long?);
            var __EpochDate__b__ = false;
            var __Sun__ = default(global::SimpleWeather.Weather_API.AccuWeather.Sun);
            var __Sun__b__ = false;
            var __Moon__ = default(global::SimpleWeather.Weather_API.AccuWeather.Moon);
            var __Moon__b__ = false;
            var __Temperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature);
            var __Temperature__b__ = false;
            var __RealFeelTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature);
            var __RealFeelTemperature__b__ = false;
            var __RealFeelTemperatureShade__ = default(global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade);
            var __RealFeelTemperatureShade__b__ = false;
            var __HoursOfSun__ = default(float?);
            var __HoursOfSun__b__ = false;
            var __DegreeDaySummary__ = default(global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary);
            var __DegreeDaySummary__b__ = false;
            var __AirAndPollen__ = default(global::SimpleWeather.Weather_API.AccuWeather.Airandpollen[]);
            var __AirAndPollen__b__ = false;
            var __Day__ = default(global::SimpleWeather.Weather_API.AccuWeather.Day);
            var __Day__b__ = false;
            var __Night__ = default(global::SimpleWeather.Weather_API.AccuWeather.Night);
            var __Night__b__ = false;
            var __Sources__ = default(string[]);
            var __Sources__b__ = false;
            var __MobileLink__ = default(string);
            var __MobileLink__b__ = false;
            var __Link__ = default(string);
            var __Link__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Date__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __Date__b__ = true;
                        break;
                    case 1:
                        __EpochDate__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochDate__b__ = true;
                        break;
                    case 2:
                        __Sun__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Sun>().Deserialize(ref reader, formatterResolver);
                        __Sun__b__ = true;
                        break;
                    case 3:
                        __Moon__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Moon>().Deserialize(ref reader, formatterResolver);
                        __Moon__b__ = true;
                        break;
                    case 4:
                        __Temperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.DailyTemperature>().Deserialize(ref reader, formatterResolver);
                        __Temperature__b__ = true;
                        break;
                    case 5:
                        __RealFeelTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperature>().Deserialize(ref reader, formatterResolver);
                        __RealFeelTemperature__b__ = true;
                        break;
                    case 6:
                        __RealFeelTemperatureShade__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.DailyRealfeeltemperatureshade>().Deserialize(ref reader, formatterResolver);
                        __RealFeelTemperatureShade__b__ = true;
                        break;
                    case 7:
                        __HoursOfSun__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __HoursOfSun__b__ = true;
                        break;
                    case 8:
                        __DegreeDaySummary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Degreedaysummary>().Deserialize(ref reader, formatterResolver);
                        __DegreeDaySummary__b__ = true;
                        break;
                    case 9:
                        __AirAndPollen__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Airandpollen[]>().Deserialize(ref reader, formatterResolver);
                        __AirAndPollen__b__ = true;
                        break;
                    case 10:
                        __Day__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Day>().Deserialize(ref reader, formatterResolver);
                        __Day__b__ = true;
                        break;
                    case 11:
                        __Night__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Night>().Deserialize(ref reader, formatterResolver);
                        __Night__b__ = true;
                        break;
                    case 12:
                        __Sources__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __Sources__b__ = true;
                        break;
                    case 13:
                        __MobileLink__ = reader.ReadString();
                        __MobileLink__b__ = true;
                        break;
                    case 14:
                        __Link__ = reader.ReadString();
                        __Link__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast();
            if(__Date__b__) ____result.Date = __Date__;
            if(__EpochDate__b__) ____result.EpochDate = __EpochDate__;
            if(__Sun__b__) ____result.Sun = __Sun__;
            if(__Moon__b__) ____result.Moon = __Moon__;
            if(__Temperature__b__) ____result.Temperature = __Temperature__;
            if(__RealFeelTemperature__b__) ____result.RealFeelTemperature = __RealFeelTemperature__;
            if(__RealFeelTemperatureShade__b__) ____result.RealFeelTemperatureShade = __RealFeelTemperatureShade__;
            if(__HoursOfSun__b__) ____result.HoursOfSun = __HoursOfSun__;
            if(__DegreeDaySummary__b__) ____result.DegreeDaySummary = __DegreeDaySummary__;
            if(__AirAndPollen__b__) ____result.AirAndPollen = __AirAndPollen__;
            if(__Day__b__) ____result.Day = __Day__;
            if(__Night__b__) ____result.Night = __Night__;
            if(__Sources__b__) ____result.Sources = __Sources__;
            if(__MobileLink__b__) ____result.MobileLink = __MobileLink__;
            if(__Link__b__) ____result.Link = __Link__;

            return ____result;
        }
    }


    public sealed class DailyForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.DailyForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Headline"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("DailyForecasts"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Headline"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("DailyForecasts"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.DailyForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Headline>().Serialize(ref writer, value.Headline, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast[]>().Serialize(ref writer, value.DailyForecasts, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.DailyForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Headline__ = default(global::SimpleWeather.Weather_API.AccuWeather.Headline);
            var __Headline__b__ = false;
            var __DailyForecasts__ = default(global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast[]);
            var __DailyForecasts__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Headline__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Headline>().Deserialize(ref reader, formatterResolver);
                        __Headline__b__ = true;
                        break;
                    case 1:
                        __DailyForecasts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Dailyforecast[]>().Deserialize(ref reader, formatterResolver);
                        __DailyForecasts__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.DailyForecastRootobject();
            if(__Headline__b__) ____result.Headline = __Headline__;
            if(__DailyForecasts__b__) ____result.DailyForecasts = __DailyForecasts__;

            return ____result;
        }
    }


    public sealed class RegionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Region>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RegionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ID"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishName"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("ID"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishName"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Region value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.ID);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.LocalizedName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.EnglishName);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Region Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __ID__ = default(string);
            var __ID__b__ = false;
            var __LocalizedName__ = default(string);
            var __LocalizedName__b__ = false;
            var __EnglishName__ = default(string);
            var __EnglishName__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __ID__ = reader.ReadString();
                        __ID__b__ = true;
                        break;
                    case 1:
                        __LocalizedName__ = reader.ReadString();
                        __LocalizedName__b__ = true;
                        break;
                    case 2:
                        __EnglishName__ = reader.ReadString();
                        __EnglishName__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Region();
            if(__ID__b__) ____result.ID = __ID__;
            if(__LocalizedName__b__) ____result.LocalizedName = __LocalizedName__;
            if(__EnglishName__b__) ____result.EnglishName = __EnglishName__;

            return ____result;
        }
    }


    public sealed class CountryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Country>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CountryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ID"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishName"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("ID"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishName"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Country value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.ID);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.LocalizedName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.EnglishName);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Country Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __ID__ = default(string);
            var __ID__b__ = false;
            var __LocalizedName__ = default(string);
            var __LocalizedName__b__ = false;
            var __EnglishName__ = default(string);
            var __EnglishName__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __ID__ = reader.ReadString();
                        __ID__b__ = true;
                        break;
                    case 1:
                        __LocalizedName__ = reader.ReadString();
                        __LocalizedName__b__ = true;
                        break;
                    case 2:
                        __EnglishName__ = reader.ReadString();
                        __EnglishName__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Country();
            if(__ID__b__) ____result.ID = __ID__;
            if(__LocalizedName__b__) ____result.LocalizedName = __LocalizedName__;
            if(__EnglishName__b__) ____result.EnglishName = __EnglishName__;

            return ____result;
        }
    }


    public sealed class AdministrativeareaFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Administrativearea>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AdministrativeareaFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ID"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishName"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Level"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedType"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishType"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("CountryID"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("ID"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Level"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("CountryID"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Administrativearea value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.ID);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.LocalizedName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.EnglishName);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Level, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.LocalizedType);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.EnglishType);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.CountryID);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Administrativearea Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __ID__ = default(string);
            var __ID__b__ = false;
            var __LocalizedName__ = default(string);
            var __LocalizedName__b__ = false;
            var __EnglishName__ = default(string);
            var __EnglishName__b__ = false;
            var __Level__ = default(int?);
            var __Level__b__ = false;
            var __LocalizedType__ = default(string);
            var __LocalizedType__b__ = false;
            var __EnglishType__ = default(string);
            var __EnglishType__b__ = false;
            var __CountryID__ = default(string);
            var __CountryID__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __ID__ = reader.ReadString();
                        __ID__b__ = true;
                        break;
                    case 1:
                        __LocalizedName__ = reader.ReadString();
                        __LocalizedName__b__ = true;
                        break;
                    case 2:
                        __EnglishName__ = reader.ReadString();
                        __EnglishName__b__ = true;
                        break;
                    case 3:
                        __Level__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Level__b__ = true;
                        break;
                    case 4:
                        __LocalizedType__ = reader.ReadString();
                        __LocalizedType__b__ = true;
                        break;
                    case 5:
                        __EnglishType__ = reader.ReadString();
                        __EnglishType__b__ = true;
                        break;
                    case 6:
                        __CountryID__ = reader.ReadString();
                        __CountryID__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Administrativearea();
            if(__ID__b__) ____result.ID = __ID__;
            if(__LocalizedName__b__) ____result.LocalizedName = __LocalizedName__;
            if(__EnglishName__b__) ____result.EnglishName = __EnglishName__;
            if(__Level__b__) ____result.Level = __Level__;
            if(__LocalizedType__b__) ____result.LocalizedType = __LocalizedType__;
            if(__EnglishType__b__) ____result.EnglishType = __EnglishType__;
            if(__CountryID__b__) ____result.CountryID = __CountryID__;

            return ____result;
        }
    }


    public sealed class TimezoneFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Timezone>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimezoneFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Code"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("GmtOffset"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IsDaylightSaving"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("NextOffsetChange"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("GmtOffset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IsDaylightSaving"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("NextOffsetChange"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Timezone value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.Code);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.GmtOffset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.IsDaylightSaving, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.NextOffsetChange, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Timezone Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Code__ = default(string);
            var __Code__b__ = false;
            var __Name__ = default(string);
            var __Name__b__ = false;
            var __GmtOffset__ = default(float?);
            var __GmtOffset__b__ = false;
            var __IsDaylightSaving__ = default(bool?);
            var __IsDaylightSaving__b__ = false;
            var __NextOffsetChange__ = default(global::System.DateTimeOffset);
            var __NextOffsetChange__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Code__ = reader.ReadString();
                        __Code__b__ = true;
                        break;
                    case 1:
                        __Name__ = reader.ReadString();
                        __Name__b__ = true;
                        break;
                    case 2:
                        __GmtOffset__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __GmtOffset__b__ = true;
                        break;
                    case 3:
                        __IsDaylightSaving__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __IsDaylightSaving__b__ = true;
                        break;
                    case 4:
                        __NextOffsetChange__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __NextOffsetChange__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Timezone();
            if(__Code__b__) ____result.Code = __Code__;
            if(__Name__b__) ____result.Name = __Name__;
            if(__GmtOffset__b__) ____result.GmtOffset = __GmtOffset__;
            if(__IsDaylightSaving__b__) ____result.IsDaylightSaving = __IsDaylightSaving__;
            if(__NextOffsetChange__b__) ____result.NextOffsetChange = __NextOffsetChange__;

            return ____result;
        }
    }


    public sealed class GeoMetricFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.GeoMetric>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GeoMetricFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.GeoMetric value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.GeoMetric Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.GeoMetric();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class GeoImperialFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.GeoImperial>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GeoImperialFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.GeoImperial value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.GeoImperial Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.GeoImperial();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class ElevationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Elevation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ElevationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Metric"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Imperial"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Imperial"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Elevation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.GeoMetric>().Serialize(ref writer, value.Metric, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.GeoImperial>().Serialize(ref writer, value.Imperial, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Elevation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Metric__ = default(global::SimpleWeather.Weather_API.AccuWeather.GeoMetric);
            var __Metric__b__ = false;
            var __Imperial__ = default(global::SimpleWeather.Weather_API.AccuWeather.GeoImperial);
            var __Imperial__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Metric__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.GeoMetric>().Deserialize(ref reader, formatterResolver);
                        __Metric__b__ = true;
                        break;
                    case 1:
                        __Imperial__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.GeoImperial>().Deserialize(ref reader, formatterResolver);
                        __Imperial__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Elevation();
            if(__Metric__b__) ____result.Metric = __Metric__;
            if(__Imperial__b__) ____result.Imperial = __Imperial__;

            return ____result;
        }
    }


    public sealed class GeopositionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Geoposition>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GeopositionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Latitude"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Longitude"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Elevation"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Elevation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Geoposition value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Latitude, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Longitude, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Elevation>().Serialize(ref writer, value.Elevation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Geoposition Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Latitude__ = default(float?);
            var __Latitude__b__ = false;
            var __Longitude__ = default(float?);
            var __Longitude__b__ = false;
            var __Elevation__ = default(global::SimpleWeather.Weather_API.AccuWeather.Elevation);
            var __Elevation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Latitude__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Latitude__b__ = true;
                        break;
                    case 1:
                        __Longitude__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Longitude__b__ = true;
                        break;
                    case 2:
                        __Elevation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Elevation>().Deserialize(ref reader, formatterResolver);
                        __Elevation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Geoposition();
            if(__Latitude__b__) ____result.Latitude = __Latitude__;
            if(__Longitude__b__) ____result.Longitude = __Longitude__;
            if(__Elevation__b__) ____result.Elevation = __Elevation__;

            return ____result;
        }
    }


    public sealed class ParentcityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Parentcity>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ParentcityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Key"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishName"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Key"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishName"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Parentcity value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.Key);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.LocalizedName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.EnglishName);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Parentcity Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Key__ = default(string);
            var __Key__b__ = false;
            var __LocalizedName__ = default(string);
            var __LocalizedName__b__ = false;
            var __EnglishName__ = default(string);
            var __EnglishName__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Key__ = reader.ReadString();
                        __Key__b__ = true;
                        break;
                    case 1:
                        __LocalizedName__ = reader.ReadString();
                        __LocalizedName__b__ = true;
                        break;
                    case 2:
                        __EnglishName__ = reader.ReadString();
                        __EnglishName__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Parentcity();
            if(__Key__b__) ____result.Key = __Key__;
            if(__LocalizedName__b__) ____result.LocalizedName = __LocalizedName__;
            if(__EnglishName__b__) ____result.EnglishName = __EnglishName__;

            return ____result;
        }
    }


    public sealed class SupplementaladminareaFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SupplementaladminareaFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Level"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishName"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Level"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishName"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Level, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.LocalizedName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.EnglishName);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Level__ = default(int?);
            var __Level__b__ = false;
            var __LocalizedName__ = default(string);
            var __LocalizedName__b__ = false;
            var __EnglishName__ = default(string);
            var __EnglishName__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Level__b__ = true;
                        break;
                    case 1:
                        __LocalizedName__ = reader.ReadString();
                        __LocalizedName__b__ = true;
                        break;
                    case 2:
                        __EnglishName__ = reader.ReadString();
                        __EnglishName__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea();
            if(__Level__b__) ____result.Level = __Level__;
            if(__LocalizedName__b__) ____result.LocalizedName = __LocalizedName__;
            if(__EnglishName__b__) ____result.EnglishName = __EnglishName__;

            return ____result;
        }
    }


    public sealed class GeopositionRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.GeopositionRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GeopositionRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Version"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Key"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Type"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rank"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocalizedName"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EnglishName"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrimaryPostalCode"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Region"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Country"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("AdministrativeArea"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("TimeZone"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("GeoPosition"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IsAlias"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ParentCity"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("SupplementalAdminAreas"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("DataSets"), 15},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Version"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Key"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Rank"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("LocalizedName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EnglishName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrimaryPostalCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Region"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("AdministrativeArea"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("TimeZone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("GeoPosition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IsAlias"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ParentCity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("SupplementalAdminAreas"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("DataSets"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.GeopositionRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Version, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Key);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.Type);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.Rank, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.LocalizedName);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.EnglishName);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.PrimaryPostalCode);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Region>().Serialize(ref writer, value.Region, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Country>().Serialize(ref writer, value.Country, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Administrativearea>().Serialize(ref writer, value.AdministrativeArea, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Timezone>().Serialize(ref writer, value.TimeZone, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Geoposition>().Serialize(ref writer, value.GeoPosition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.IsAlias, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Parentcity>().Serialize(ref writer, value.ParentCity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea[]>().Serialize(ref writer, value.SupplementalAdminAreas, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.DataSets, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.GeopositionRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Version__ = default(int?);
            var __Version__b__ = false;
            var __Key__ = default(string);
            var __Key__b__ = false;
            var __Type__ = default(string);
            var __Type__b__ = false;
            var __Rank__ = default(int?);
            var __Rank__b__ = false;
            var __LocalizedName__ = default(string);
            var __LocalizedName__b__ = false;
            var __EnglishName__ = default(string);
            var __EnglishName__b__ = false;
            var __PrimaryPostalCode__ = default(string);
            var __PrimaryPostalCode__b__ = false;
            var __Region__ = default(global::SimpleWeather.Weather_API.AccuWeather.Region);
            var __Region__b__ = false;
            var __Country__ = default(global::SimpleWeather.Weather_API.AccuWeather.Country);
            var __Country__b__ = false;
            var __AdministrativeArea__ = default(global::SimpleWeather.Weather_API.AccuWeather.Administrativearea);
            var __AdministrativeArea__b__ = false;
            var __TimeZone__ = default(global::SimpleWeather.Weather_API.AccuWeather.Timezone);
            var __TimeZone__b__ = false;
            var __GeoPosition__ = default(global::SimpleWeather.Weather_API.AccuWeather.Geoposition);
            var __GeoPosition__b__ = false;
            var __IsAlias__ = default(bool?);
            var __IsAlias__b__ = false;
            var __ParentCity__ = default(global::SimpleWeather.Weather_API.AccuWeather.Parentcity);
            var __ParentCity__b__ = false;
            var __SupplementalAdminAreas__ = default(global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea[]);
            var __SupplementalAdminAreas__b__ = false;
            var __DataSets__ = default(string[]);
            var __DataSets__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Version__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Version__b__ = true;
                        break;
                    case 1:
                        __Key__ = reader.ReadString();
                        __Key__b__ = true;
                        break;
                    case 2:
                        __Type__ = reader.ReadString();
                        __Type__b__ = true;
                        break;
                    case 3:
                        __Rank__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __Rank__b__ = true;
                        break;
                    case 4:
                        __LocalizedName__ = reader.ReadString();
                        __LocalizedName__b__ = true;
                        break;
                    case 5:
                        __EnglishName__ = reader.ReadString();
                        __EnglishName__b__ = true;
                        break;
                    case 6:
                        __PrimaryPostalCode__ = reader.ReadString();
                        __PrimaryPostalCode__b__ = true;
                        break;
                    case 7:
                        __Region__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Region>().Deserialize(ref reader, formatterResolver);
                        __Region__b__ = true;
                        break;
                    case 8:
                        __Country__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Country>().Deserialize(ref reader, formatterResolver);
                        __Country__b__ = true;
                        break;
                    case 9:
                        __AdministrativeArea__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Administrativearea>().Deserialize(ref reader, formatterResolver);
                        __AdministrativeArea__b__ = true;
                        break;
                    case 10:
                        __TimeZone__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Timezone>().Deserialize(ref reader, formatterResolver);
                        __TimeZone__b__ = true;
                        break;
                    case 11:
                        __GeoPosition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Geoposition>().Deserialize(ref reader, formatterResolver);
                        __GeoPosition__b__ = true;
                        break;
                    case 12:
                        __IsAlias__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __IsAlias__b__ = true;
                        break;
                    case 13:
                        __ParentCity__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Parentcity>().Deserialize(ref reader, formatterResolver);
                        __ParentCity__b__ = true;
                        break;
                    case 14:
                        __SupplementalAdminAreas__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Supplementaladminarea[]>().Deserialize(ref reader, formatterResolver);
                        __SupplementalAdminAreas__b__ = true;
                        break;
                    case 15:
                        __DataSets__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __DataSets__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.GeopositionRootobject();
            if(__Version__b__) ____result.Version = __Version__;
            if(__Key__b__) ____result.Key = __Key__;
            if(__Type__b__) ____result.Type = __Type__;
            if(__Rank__b__) ____result.Rank = __Rank__;
            if(__LocalizedName__b__) ____result.LocalizedName = __LocalizedName__;
            if(__EnglishName__b__) ____result.EnglishName = __EnglishName__;
            if(__PrimaryPostalCode__b__) ____result.PrimaryPostalCode = __PrimaryPostalCode__;
            if(__Region__b__) ____result.Region = __Region__;
            if(__Country__b__) ____result.Country = __Country__;
            if(__AdministrativeArea__b__) ____result.AdministrativeArea = __AdministrativeArea__;
            if(__TimeZone__b__) ____result.TimeZone = __TimeZone__;
            if(__GeoPosition__b__) ____result.GeoPosition = __GeoPosition__;
            if(__IsAlias__b__) ____result.IsAlias = __IsAlias__;
            if(__ParentCity__b__) ____result.ParentCity = __ParentCity__;
            if(__SupplementalAdminAreas__b__) ____result.SupplementalAdminAreas = __SupplementalAdminAreas__;
            if(__DataSets__b__) ____result.DataSets = __DataSets__;

            return ____result;
        }
    }


    public sealed class TemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Temperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Temperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Temperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Temperature();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class RealfeeltemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RealfeeltemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class WetbulbtemperatureFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WetbulbtemperatureFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class DewpointFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Dewpoint>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DewpointFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Dewpoint value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Dewpoint Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Dewpoint();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class VisibilityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Visibility>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public VisibilityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Visibility value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Visibility Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Visibility();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class CeilingFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.Ceiling>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CeilingFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Unit"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UnitType"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Unit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UnitType"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.Ceiling value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.Value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.Unit);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UnitType, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.Ceiling Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Value__ = default(float?);
            var __Value__b__ = false;
            var __Unit__ = default(string);
            var __Unit__b__ = false;
            var __UnitType__ = default(int?);
            var __UnitType__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __Value__b__ = true;
                        break;
                    case 1:
                        __Unit__ = reader.ReadString();
                        __Unit__b__ = true;
                        break;
                    case 2:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __UnitType__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.Ceiling();
            if(__Value__b__) ____result.Value = __Value__;
            if(__Unit__b__) ____result.Unit = __Unit__;
            if(__UnitType__b__) ____result.UnitType = __UnitType__;

            return ____result;
        }
    }


    public sealed class HourlyItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.HourlyItem>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("DateTime"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("EpochDateTime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WeatherIcon"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IconPhrase"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("HasPrecipitation"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IsDaylight"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Temperature"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RealFeelTemperature"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WetBulbTemperature"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("DewPoint"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Wind"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WindGust"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RelativeHumidity"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IndoorRelativeHumidity"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Visibility"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Ceiling"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UVIndex"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("UVIndexText"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("PrecipitationProbability"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("RainProbability"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("SnowProbability"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("IceProbability"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("TotalLiquid"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Rain"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Snow"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Ice"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("CloudCover"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("MobileLink"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Link"), 28},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("DateTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("EpochDateTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WeatherIcon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IconPhrase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("HasPrecipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IsDaylight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RealFeelTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WetBulbTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("DewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WindGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RelativeHumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IndoorRelativeHumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Ceiling"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UVIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("UVIndexText"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("PrecipitationProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("RainProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("SnowProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("IceProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("TotalLiquid"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Ice"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("CloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("MobileLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Link"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.HourlyItem value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.DateTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.EpochDateTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.WeatherIcon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.IconPhrase);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.HasPrecipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.IsDaylight, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Temperature>().Serialize(ref writer, value.Temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature>().Serialize(ref writer, value.RealFeelTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature>().Serialize(ref writer, value.WetBulbTemperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Dewpoint>().Serialize(ref writer, value.DewPoint, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wind>().Serialize(ref writer, value.Wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windgust>().Serialize(ref writer, value.WindGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.RelativeHumidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.IndoorRelativeHumidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Visibility>().Serialize(ref writer, value.Visibility, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ceiling>().Serialize(ref writer, value.Ceiling, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.UVIndex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteString(value.UVIndexText);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.PrecipitationProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.RainProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.SnowProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[21]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.IceProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[22]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>().Serialize(ref writer, value.TotalLiquid, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[23]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Rain>().Serialize(ref writer, value.Rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[24]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Snow>().Serialize(ref writer, value.Snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[25]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ice>().Serialize(ref writer, value.Ice, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[26]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.CloudCover, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteString(value.MobileLink);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteString(value.Link);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.HourlyItem Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __DateTime__ = default(global::System.DateTimeOffset);
            var __DateTime__b__ = false;
            var __EpochDateTime__ = default(long?);
            var __EpochDateTime__b__ = false;
            var __WeatherIcon__ = default(int?);
            var __WeatherIcon__b__ = false;
            var __IconPhrase__ = default(string);
            var __IconPhrase__b__ = false;
            var __HasPrecipitation__ = default(bool?);
            var __HasPrecipitation__b__ = false;
            var __IsDaylight__ = default(bool?);
            var __IsDaylight__b__ = false;
            var __Temperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.Temperature);
            var __Temperature__b__ = false;
            var __RealFeelTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature);
            var __RealFeelTemperature__b__ = false;
            var __WetBulbTemperature__ = default(global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature);
            var __WetBulbTemperature__b__ = false;
            var __DewPoint__ = default(global::SimpleWeather.Weather_API.AccuWeather.Dewpoint);
            var __DewPoint__b__ = false;
            var __Wind__ = default(global::SimpleWeather.Weather_API.AccuWeather.Wind);
            var __Wind__b__ = false;
            var __WindGust__ = default(global::SimpleWeather.Weather_API.AccuWeather.Windgust);
            var __WindGust__b__ = false;
            var __RelativeHumidity__ = default(int?);
            var __RelativeHumidity__b__ = false;
            var __IndoorRelativeHumidity__ = default(int?);
            var __IndoorRelativeHumidity__b__ = false;
            var __Visibility__ = default(global::SimpleWeather.Weather_API.AccuWeather.Visibility);
            var __Visibility__b__ = false;
            var __Ceiling__ = default(global::SimpleWeather.Weather_API.AccuWeather.Ceiling);
            var __Ceiling__b__ = false;
            var __UVIndex__ = default(float?);
            var __UVIndex__b__ = false;
            var __UVIndexText__ = default(string);
            var __UVIndexText__b__ = false;
            var __PrecipitationProbability__ = default(int?);
            var __PrecipitationProbability__b__ = false;
            var __RainProbability__ = default(int?);
            var __RainProbability__b__ = false;
            var __SnowProbability__ = default(int?);
            var __SnowProbability__b__ = false;
            var __IceProbability__ = default(int?);
            var __IceProbability__b__ = false;
            var __TotalLiquid__ = default(global::SimpleWeather.Weather_API.AccuWeather.Totalliquid);
            var __TotalLiquid__b__ = false;
            var __Rain__ = default(global::SimpleWeather.Weather_API.AccuWeather.Rain);
            var __Rain__b__ = false;
            var __Snow__ = default(global::SimpleWeather.Weather_API.AccuWeather.Snow);
            var __Snow__b__ = false;
            var __Ice__ = default(global::SimpleWeather.Weather_API.AccuWeather.Ice);
            var __Ice__b__ = false;
            var __CloudCover__ = default(int?);
            var __CloudCover__b__ = false;
            var __MobileLink__ = default(string);
            var __MobileLink__b__ = false;
            var __Link__ = default(string);
            var __Link__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __DateTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __DateTime__b__ = true;
                        break;
                    case 1:
                        __EpochDateTime__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __EpochDateTime__b__ = true;
                        break;
                    case 2:
                        __WeatherIcon__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __WeatherIcon__b__ = true;
                        break;
                    case 3:
                        __IconPhrase__ = reader.ReadString();
                        __IconPhrase__b__ = true;
                        break;
                    case 4:
                        __HasPrecipitation__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __HasPrecipitation__b__ = true;
                        break;
                    case 5:
                        __IsDaylight__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __IsDaylight__b__ = true;
                        break;
                    case 6:
                        __Temperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Temperature>().Deserialize(ref reader, formatterResolver);
                        __Temperature__b__ = true;
                        break;
                    case 7:
                        __RealFeelTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Realfeeltemperature>().Deserialize(ref reader, formatterResolver);
                        __RealFeelTemperature__b__ = true;
                        break;
                    case 8:
                        __WetBulbTemperature__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wetbulbtemperature>().Deserialize(ref reader, formatterResolver);
                        __WetBulbTemperature__b__ = true;
                        break;
                    case 9:
                        __DewPoint__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Dewpoint>().Deserialize(ref reader, formatterResolver);
                        __DewPoint__b__ = true;
                        break;
                    case 10:
                        __Wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Wind>().Deserialize(ref reader, formatterResolver);
                        __Wind__b__ = true;
                        break;
                    case 11:
                        __WindGust__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Windgust>().Deserialize(ref reader, formatterResolver);
                        __WindGust__b__ = true;
                        break;
                    case 12:
                        __RelativeHumidity__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __RelativeHumidity__b__ = true;
                        break;
                    case 13:
                        __IndoorRelativeHumidity__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __IndoorRelativeHumidity__b__ = true;
                        break;
                    case 14:
                        __Visibility__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Visibility>().Deserialize(ref reader, formatterResolver);
                        __Visibility__b__ = true;
                        break;
                    case 15:
                        __Ceiling__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ceiling>().Deserialize(ref reader, formatterResolver);
                        __Ceiling__b__ = true;
                        break;
                    case 16:
                        __UVIndex__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __UVIndex__b__ = true;
                        break;
                    case 17:
                        __UVIndexText__ = reader.ReadString();
                        __UVIndexText__b__ = true;
                        break;
                    case 18:
                        __PrecipitationProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __PrecipitationProbability__b__ = true;
                        break;
                    case 19:
                        __RainProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __RainProbability__b__ = true;
                        break;
                    case 20:
                        __SnowProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __SnowProbability__b__ = true;
                        break;
                    case 21:
                        __IceProbability__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __IceProbability__b__ = true;
                        break;
                    case 22:
                        __TotalLiquid__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Totalliquid>().Deserialize(ref reader, formatterResolver);
                        __TotalLiquid__b__ = true;
                        break;
                    case 23:
                        __Rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Rain>().Deserialize(ref reader, formatterResolver);
                        __Rain__b__ = true;
                        break;
                    case 24:
                        __Snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Snow>().Deserialize(ref reader, formatterResolver);
                        __Snow__b__ = true;
                        break;
                    case 25:
                        __Ice__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.Ice>().Deserialize(ref reader, formatterResolver);
                        __Ice__b__ = true;
                        break;
                    case 26:
                        __CloudCover__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __CloudCover__b__ = true;
                        break;
                    case 27:
                        __MobileLink__ = reader.ReadString();
                        __MobileLink__b__ = true;
                        break;
                    case 28:
                        __Link__ = reader.ReadString();
                        __Link__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.HourlyItem();
            if(__DateTime__b__) ____result.DateTime = __DateTime__;
            if(__EpochDateTime__b__) ____result.EpochDateTime = __EpochDateTime__;
            if(__WeatherIcon__b__) ____result.WeatherIcon = __WeatherIcon__;
            if(__IconPhrase__b__) ____result.IconPhrase = __IconPhrase__;
            if(__HasPrecipitation__b__) ____result.HasPrecipitation = __HasPrecipitation__;
            if(__IsDaylight__b__) ____result.IsDaylight = __IsDaylight__;
            if(__Temperature__b__) ____result.Temperature = __Temperature__;
            if(__RealFeelTemperature__b__) ____result.RealFeelTemperature = __RealFeelTemperature__;
            if(__WetBulbTemperature__b__) ____result.WetBulbTemperature = __WetBulbTemperature__;
            if(__DewPoint__b__) ____result.DewPoint = __DewPoint__;
            if(__Wind__b__) ____result.Wind = __Wind__;
            if(__WindGust__b__) ____result.WindGust = __WindGust__;
            if(__RelativeHumidity__b__) ____result.RelativeHumidity = __RelativeHumidity__;
            if(__IndoorRelativeHumidity__b__) ____result.IndoorRelativeHumidity = __IndoorRelativeHumidity__;
            if(__Visibility__b__) ____result.Visibility = __Visibility__;
            if(__Ceiling__b__) ____result.Ceiling = __Ceiling__;
            if(__UVIndex__b__) ____result.UVIndex = __UVIndex__;
            if(__UVIndexText__b__) ____result.UVIndexText = __UVIndexText__;
            if(__PrecipitationProbability__b__) ____result.PrecipitationProbability = __PrecipitationProbability__;
            if(__RainProbability__b__) ____result.RainProbability = __RainProbability__;
            if(__SnowProbability__b__) ____result.SnowProbability = __SnowProbability__;
            if(__IceProbability__b__) ____result.IceProbability = __IceProbability__;
            if(__TotalLiquid__b__) ____result.TotalLiquid = __TotalLiquid__;
            if(__Rain__b__) ____result.Rain = __Rain__;
            if(__Snow__b__) ____result.Snow = __Snow__;
            if(__Ice__b__) ____result.Ice = __Ice__;
            if(__CloudCover__b__) ____result.CloudCover = __CloudCover__;
            if(__MobileLink__b__) ____result.MobileLink = __MobileLink__;
            if(__Link__b__) ____result.Link = __Link__;

            return ____result;
        }
    }


    public sealed class HourlyForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AccuWeather.HourlyForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Items"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Items"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AccuWeather.HourlyForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.HourlyItem[]>().Serialize(ref writer, value.Items, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AccuWeather.HourlyForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Items__ = default(global::SimpleWeather.Weather_API.AccuWeather.HourlyItem[]);
            var __Items__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Items__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AccuWeather.HourlyItem[]>().Deserialize(ref reader, formatterResolver);
                        __Items__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AccuWeather.HourlyForecastRootobject();
            if(__Items__b__) ____result.Items = __Items__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.AQICN
{
    using System;
    using Utf8Json;


    public sealed class UviItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.UviItem>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public UviItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avg"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("avg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("min"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.UviItem value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.avg);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.day);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.max);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.min);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.UviItem Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __avg__ = default(float);
            var __avg__b__ = false;
            var __day__ = default(string);
            var __day__b__ = false;
            var __max__ = default(float);
            var __max__b__ = false;
            var __min__ = default(float);
            var __min__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __avg__ = reader.ReadSingle();
                        __avg__b__ = true;
                        break;
                    case 1:
                        __day__ = reader.ReadString();
                        __day__b__ = true;
                        break;
                    case 2:
                        __max__ = reader.ReadSingle();
                        __max__b__ = true;
                        break;
                    case 3:
                        __min__ = reader.ReadSingle();
                        __min__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.UviItem();
            if(__avg__b__) ____result.avg = __avg__;
            if(__day__b__) ____result.day = __day__;
            if(__max__b__) ____result.max = __max__;
            if(__min__b__) ____result.min = __min__;

            return ____result;
        }
    }


    public sealed class AQICNDataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.AQICNData>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AQICNDataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvi_forecast"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("uvi_forecast"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.AQICNData value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SimpleWeather.Weather_API.AQICN.UviItem>>().Serialize(ref writer, value.uvi_forecast, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.AQICNData Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            
            
	        throw new InvalidOperationException("generated serializer for IInterface does not support deserialize.");
        }
    }


    public sealed class AttributionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Attribution>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AttributionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("url"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("logo"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("url"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("logo"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Attribution value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.url);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.logo);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Attribution Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __url__ = default(string);
            var __url__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __logo__ = default(string);
            var __logo__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __url__ = reader.ReadString();
                        __url__b__ = true;
                        break;
                    case 1:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 2:
                        __logo__ = reader.ReadString();
                        __logo__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Attribution();
            if(__url__b__) ____result.url = __url__;
            if(__name__b__) ____result.name = __name__;
            if(__logo__b__) ____result.logo = __logo__;

            return ____result;
        }
    }


    public sealed class CityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.City>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("geo"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("url"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("geo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("url"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.City value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.geo, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.url);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.City Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __geo__ = default(float[]);
            var __geo__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __url__ = default(string);
            var __url__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __geo__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, formatterResolver);
                        __geo__b__ = true;
                        break;
                    case 1:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 2:
                        __url__ = reader.ReadString();
                        __url__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.City();
            if(__geo__b__) ____result.geo = __geo__;
            if(__name__b__) ____result.name = __name__;
            if(__url__b__) ____result.url = __url__;

            return ____result;
        }
    }


    public sealed class CoFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Co>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CoFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Co value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Co Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Co();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class HFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.H>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.H value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.H Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.H();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class No2Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.No2>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public No2Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.No2 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.No2 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.No2();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class O3Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.O3>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public O3Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.O3 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.O3 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.O3();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class PFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.P>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.P value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.P Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.P();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class Pm25Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Pm25>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Pm25Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Pm25 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Pm25 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Pm25();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class TFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.T>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.T value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.T Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.T();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class WFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.W>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.W value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.W Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.W();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class So2Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.So2>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public So2Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.So2 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.So2 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.So2();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class Pm10Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Pm10>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Pm10Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("v"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Pm10 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.v);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Pm10 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __v__ = default(float);
            var __v__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __v__ = reader.ReadSingle();
                        __v__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Pm10();
            if(__v__b__) ____result.v = __v__;

            return ____result;
        }
    }


    public sealed class IaqiFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Iaqi>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public IaqiFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("co"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("h"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("no2"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("o3"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("p"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm25"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("t"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("w"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("so2"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm10"), 9},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("co"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("no2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("o3"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("p"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm25"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("t"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("w"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("so2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm10"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Iaqi value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Co>().Serialize(ref writer, value.co, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.H>().Serialize(ref writer, value.h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.No2>().Serialize(ref writer, value.no2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.O3>().Serialize(ref writer, value.o3, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.P>().Serialize(ref writer, value.p, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm25>().Serialize(ref writer, value.pm25, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.T>().Serialize(ref writer, value.t, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.W>().Serialize(ref writer, value.w, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.So2>().Serialize(ref writer, value.so2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm10>().Serialize(ref writer, value.pm10, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Iaqi Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __co__ = default(global::SimpleWeather.Weather_API.AQICN.Co);
            var __co__b__ = false;
            var __h__ = default(global::SimpleWeather.Weather_API.AQICN.H);
            var __h__b__ = false;
            var __no2__ = default(global::SimpleWeather.Weather_API.AQICN.No2);
            var __no2__b__ = false;
            var __o3__ = default(global::SimpleWeather.Weather_API.AQICN.O3);
            var __o3__b__ = false;
            var __p__ = default(global::SimpleWeather.Weather_API.AQICN.P);
            var __p__b__ = false;
            var __pm25__ = default(global::SimpleWeather.Weather_API.AQICN.Pm25);
            var __pm25__b__ = false;
            var __t__ = default(global::SimpleWeather.Weather_API.AQICN.T);
            var __t__b__ = false;
            var __w__ = default(global::SimpleWeather.Weather_API.AQICN.W);
            var __w__b__ = false;
            var __so2__ = default(global::SimpleWeather.Weather_API.AQICN.So2);
            var __so2__b__ = false;
            var __pm10__ = default(global::SimpleWeather.Weather_API.AQICN.Pm10);
            var __pm10__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __co__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Co>().Deserialize(ref reader, formatterResolver);
                        __co__b__ = true;
                        break;
                    case 1:
                        __h__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.H>().Deserialize(ref reader, formatterResolver);
                        __h__b__ = true;
                        break;
                    case 2:
                        __no2__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.No2>().Deserialize(ref reader, formatterResolver);
                        __no2__b__ = true;
                        break;
                    case 3:
                        __o3__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.O3>().Deserialize(ref reader, formatterResolver);
                        __o3__b__ = true;
                        break;
                    case 4:
                        __p__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.P>().Deserialize(ref reader, formatterResolver);
                        __p__b__ = true;
                        break;
                    case 5:
                        __pm25__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm25>().Deserialize(ref reader, formatterResolver);
                        __pm25__b__ = true;
                        break;
                    case 6:
                        __t__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.T>().Deserialize(ref reader, formatterResolver);
                        __t__b__ = true;
                        break;
                    case 7:
                        __w__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.W>().Deserialize(ref reader, formatterResolver);
                        __w__b__ = true;
                        break;
                    case 8:
                        __so2__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.So2>().Deserialize(ref reader, formatterResolver);
                        __so2__b__ = true;
                        break;
                    case 9:
                        __pm10__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm10>().Deserialize(ref reader, formatterResolver);
                        __pm10__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Iaqi();
            if(__co__b__) ____result.co = __co__;
            if(__h__b__) ____result.h = __h__;
            if(__no2__b__) ____result.no2 = __no2__;
            if(__o3__b__) ____result.o3 = __o3__;
            if(__p__b__) ____result.p = __p__;
            if(__pm25__b__) ____result.pm25 = __pm25__;
            if(__t__b__) ____result.t = __t__;
            if(__w__b__) ____result.w = __w__;
            if(__so2__b__) ____result.so2 = __so2__;
            if(__pm10__b__) ____result.pm10 = __pm10__;

            return ____result;
        }
    }


    public sealed class TimeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Time>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("s"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("tz"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("v"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iso"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("s"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("tz"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("v"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iso"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Time value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.s);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.tz);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt64(value.v);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.iso);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Time Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __s__ = default(string);
            var __s__b__ = false;
            var __tz__ = default(string);
            var __tz__b__ = false;
            var __v__ = default(long);
            var __v__b__ = false;
            var __iso__ = default(string);
            var __iso__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __s__ = reader.ReadString();
                        __s__b__ = true;
                        break;
                    case 1:
                        __tz__ = reader.ReadString();
                        __tz__b__ = true;
                        break;
                    case 2:
                        __v__ = reader.ReadInt64();
                        __v__b__ = true;
                        break;
                    case 3:
                        __iso__ = reader.ReadString();
                        __iso__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Time();
            if(__s__b__) ____result.s = __s__;
            if(__tz__b__) ____result.tz = __tz__;
            if(__v__b__) ____result.v = __v__;
            if(__iso__b__) ____result.iso = __iso__;

            return ____result;
        }
    }


    public sealed class O3ItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.O3Item>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public O3ItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avg"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("avg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("min"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.O3Item value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.avg);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.day);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.max);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt32(value.min);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.O3Item Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __avg__ = default(int);
            var __avg__b__ = false;
            var __day__ = default(string);
            var __day__b__ = false;
            var __max__ = default(int);
            var __max__b__ = false;
            var __min__ = default(int);
            var __min__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __avg__ = reader.ReadInt32();
                        __avg__b__ = true;
                        break;
                    case 1:
                        __day__ = reader.ReadString();
                        __day__b__ = true;
                        break;
                    case 2:
                        __max__ = reader.ReadInt32();
                        __max__b__ = true;
                        break;
                    case 3:
                        __min__ = reader.ReadInt32();
                        __min__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.O3Item();
            if(__avg__b__) ____result.avg = __avg__;
            if(__day__b__) ____result.day = __day__;
            if(__max__b__) ____result.max = __max__;
            if(__min__b__) ____result.min = __min__;

            return ____result;
        }
    }


    public sealed class Pm10ItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Pm10Item>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Pm10ItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avg"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("avg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("min"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Pm10Item value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.avg);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.day);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.max);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt32(value.min);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Pm10Item Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __avg__ = default(int);
            var __avg__b__ = false;
            var __day__ = default(string);
            var __day__b__ = false;
            var __max__ = default(int);
            var __max__b__ = false;
            var __min__ = default(int);
            var __min__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __avg__ = reader.ReadInt32();
                        __avg__b__ = true;
                        break;
                    case 1:
                        __day__ = reader.ReadString();
                        __day__b__ = true;
                        break;
                    case 2:
                        __max__ = reader.ReadInt32();
                        __max__b__ = true;
                        break;
                    case 3:
                        __min__ = reader.ReadInt32();
                        __min__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Pm10Item();
            if(__avg__b__) ____result.avg = __avg__;
            if(__day__b__) ____result.day = __day__;
            if(__max__b__) ____result.max = __max__;
            if(__min__b__) ____result.min = __min__;

            return ____result;
        }
    }


    public sealed class Pm25ItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Pm25Item>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Pm25ItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avg"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("avg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("min"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Pm25Item value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.avg);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.day);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.max);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt32(value.min);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Pm25Item Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __avg__ = default(int);
            var __avg__b__ = false;
            var __day__ = default(string);
            var __day__b__ = false;
            var __max__ = default(int);
            var __max__b__ = false;
            var __min__ = default(int);
            var __min__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __avg__ = reader.ReadInt32();
                        __avg__b__ = true;
                        break;
                    case 1:
                        __day__ = reader.ReadString();
                        __day__b__ = true;
                        break;
                    case 2:
                        __max__ = reader.ReadInt32();
                        __max__b__ = true;
                        break;
                    case 3:
                        __min__ = reader.ReadInt32();
                        __min__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Pm25Item();
            if(__avg__b__) ____result.avg = __avg__;
            if(__day__b__) ____result.day = __day__;
            if(__max__b__) ____result.max = __max__;
            if(__min__b__) ____result.min = __min__;

            return ____result;
        }
    }


    public sealed class DailyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Daily>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("o3"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm10"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm25"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvi"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("o3"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm10"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm25"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvi"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Daily value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.O3Item[]>().Serialize(ref writer, value.o3, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm10Item[]>().Serialize(ref writer, value.pm10, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm25Item[]>().Serialize(ref writer, value.pm25, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.UviItem[]>().Serialize(ref writer, value.uvi, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Daily Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __o3__ = default(global::SimpleWeather.Weather_API.AQICN.O3Item[]);
            var __o3__b__ = false;
            var __pm10__ = default(global::SimpleWeather.Weather_API.AQICN.Pm10Item[]);
            var __pm10__b__ = false;
            var __pm25__ = default(global::SimpleWeather.Weather_API.AQICN.Pm25Item[]);
            var __pm25__b__ = false;
            var __uvi__ = default(global::SimpleWeather.Weather_API.AQICN.UviItem[]);
            var __uvi__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __o3__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.O3Item[]>().Deserialize(ref reader, formatterResolver);
                        __o3__b__ = true;
                        break;
                    case 1:
                        __pm10__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm10Item[]>().Deserialize(ref reader, formatterResolver);
                        __pm10__b__ = true;
                        break;
                    case 2:
                        __pm25__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Pm25Item[]>().Deserialize(ref reader, formatterResolver);
                        __pm25__b__ = true;
                        break;
                    case 3:
                        __uvi__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.UviItem[]>().Deserialize(ref reader, formatterResolver);
                        __uvi__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Daily();
            if(__o3__b__) ____result.o3 = __o3__;
            if(__pm10__b__) ____result.pm10 = __pm10__;
            if(__pm25__b__) ____result.pm25 = __pm25__;
            if(__uvi__b__) ____result.uvi = __uvi__;

            return ____result;
        }
    }


    public sealed class ForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Forecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("daily"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Forecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Daily>().Serialize(ref writer, value.daily, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Forecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __daily__ = default(global::SimpleWeather.Weather_API.AQICN.Daily);
            var __daily__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __daily__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Daily>().Deserialize(ref reader, formatterResolver);
                        __daily__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Forecast();
            if(__daily__b__) ____result.daily = __daily__;

            return ____result;
        }
    }


    public sealed class DebugFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Debug>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DebugFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sync"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("sync"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Debug value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.sync);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Debug Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __sync__ = default(string);
            var __sync__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __sync__ = reader.ReadString();
                        __sync__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Debug();
            if(__sync__b__) ____result.sync = __sync__;

            return ____result;
        }
    }


    public sealed class DataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Data>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("aqi"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("idx"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("attributions"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dominentpol"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iaqi"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecast"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("debug"), 8},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("aqi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("idx"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("attributions"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dominentpol"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iaqi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("debug"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Data value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.aqi);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.idx);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Attribution[]>().Serialize(ref writer, value.attributions, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.City>().Serialize(ref writer, value.city, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.dominentpol);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Iaqi>().Serialize(ref writer, value.iaqi, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Time>().Serialize(ref writer, value.time, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Forecast>().Serialize(ref writer, value.forecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Debug>().Serialize(ref writer, value.debug, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Data Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __aqi__ = default(int);
            var __aqi__b__ = false;
            var __idx__ = default(float);
            var __idx__b__ = false;
            var __attributions__ = default(global::SimpleWeather.Weather_API.AQICN.Attribution[]);
            var __attributions__b__ = false;
            var __city__ = default(global::SimpleWeather.Weather_API.AQICN.City);
            var __city__b__ = false;
            var __dominentpol__ = default(string);
            var __dominentpol__b__ = false;
            var __iaqi__ = default(global::SimpleWeather.Weather_API.AQICN.Iaqi);
            var __iaqi__b__ = false;
            var __time__ = default(global::SimpleWeather.Weather_API.AQICN.Time);
            var __time__b__ = false;
            var __forecast__ = default(global::SimpleWeather.Weather_API.AQICN.Forecast);
            var __forecast__b__ = false;
            var __debug__ = default(global::SimpleWeather.Weather_API.AQICN.Debug);
            var __debug__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __aqi__ = reader.ReadInt32();
                        __aqi__b__ = true;
                        break;
                    case 1:
                        __idx__ = reader.ReadSingle();
                        __idx__b__ = true;
                        break;
                    case 2:
                        __attributions__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Attribution[]>().Deserialize(ref reader, formatterResolver);
                        __attributions__b__ = true;
                        break;
                    case 3:
                        __city__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.City>().Deserialize(ref reader, formatterResolver);
                        __city__b__ = true;
                        break;
                    case 4:
                        __dominentpol__ = reader.ReadString();
                        __dominentpol__b__ = true;
                        break;
                    case 5:
                        __iaqi__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Iaqi>().Deserialize(ref reader, formatterResolver);
                        __iaqi__b__ = true;
                        break;
                    case 6:
                        __time__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Time>().Deserialize(ref reader, formatterResolver);
                        __time__b__ = true;
                        break;
                    case 7:
                        __forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Forecast>().Deserialize(ref reader, formatterResolver);
                        __forecast__b__ = true;
                        break;
                    case 8:
                        __debug__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Debug>().Deserialize(ref reader, formatterResolver);
                        __debug__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Data();
            if(__aqi__b__) ____result.aqi = __aqi__;
            if(__idx__b__) ____result.idx = __idx__;
            if(__attributions__b__) ____result.attributions = __attributions__;
            if(__city__b__) ____result.city = __city__;
            if(__dominentpol__b__) ____result.dominentpol = __dominentpol__;
            if(__iaqi__b__) ____result.iaqi = __iaqi__;
            if(__time__b__) ____result.time = __time__;
            if(__forecast__b__) ____result.forecast = __forecast__;
            if(__debug__b__) ____result.debug = __debug__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.AQICN.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("status"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("status"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("data"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.AQICN.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.status);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Data>().Serialize(ref writer, value.data, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.AQICN.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __status__ = default(string);
            var __status__b__ = false;
            var __data__ = default(global::SimpleWeather.Weather_API.AQICN.Data);
            var __data__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __status__ = reader.ReadString();
                        __status__b__ = true;
                        break;
                    case 1:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.AQICN.Data>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.AQICN.Rootobject();
            if(__status__b__) ____result.status = __status__;
            if(__data__b__) ____result.data = __data__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.HERE
{
    using System;
    using Utf8Json;


    public sealed class TimesegmentFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Timesegment>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimesegmentFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("segment"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day_of_week"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("segment"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day_of_week"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Timesegment value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.value);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.segment);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.day_of_week);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Timesegment Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __value__ = default(string);
            var __value__b__ = false;
            var __segment__ = default(string);
            var __segment__b__ = false;
            var __day_of_week__ = default(string);
            var __day_of_week__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadString();
                        __value__b__ = true;
                        break;
                    case 1:
                        __segment__ = reader.ReadString();
                        __segment__b__ = true;
                        break;
                    case 2:
                        __day_of_week__ = reader.ReadString();
                        __day_of_week__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Timesegment();
            if(__value__b__) ____result.value = __value__;
            if(__segment__b__) ____result.segment = __segment__;
            if(__day_of_week__b__) ____result.day_of_week = __day_of_week__;

            return ____result;
        }
    }


    public sealed class AlertFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Alert>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timeSegment"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("timeSegment"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Alert value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Timesegment[]>().Serialize(ref writer, value.timeSegment, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.description);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Alert Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __timeSegment__ = default(global::SimpleWeather.Weather_API.HERE.Timesegment[]);
            var __timeSegment__b__ = false;
            var __type__ = default(string);
            var __type__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __timeSegment__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Timesegment[]>().Deserialize(ref reader, formatterResolver);
                        __timeSegment__b__ = true;
                        break;
                    case 1:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 2:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Alert();
            if(__timeSegment__b__) ____result.timeSegment = __timeSegment__;
            if(__type__b__) ____result.type = __type__;
            if(__description__b__) ____result.description = __description__;

            return ____result;
        }
    }


    public sealed class AlertsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Alerts>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("alerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Alerts value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Alert[]>().Serialize(ref writer, value.alerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteInt32(value.timezone);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Alerts Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __alerts__ = default(global::SimpleWeather.Weather_API.HERE.Alert[]);
            var __alerts__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __timezone__ = default(int);
            var __timezone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Alert[]>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    case 1:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 2:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 4:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 5:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 6:
                        __timezone__ = reader.ReadInt32();
                        __timezone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Alerts();
            if(__alerts__b__) ____result.alerts = __alerts__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__timezone__b__) ____result.timezone = __timezone__;

            return ____result;
        }
    }


    public sealed class AdditionaldataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Additionaldata>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AdditionaldataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("key"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("key"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Additionaldata value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.value);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.key);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Additionaldata Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __value__ = default(string);
            var __value__b__ = false;
            var __key__ = default(string);
            var __key__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadString();
                        __value__b__ = true;
                        break;
                    case 1:
                        __key__ = reader.ReadString();
                        __key__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Additionaldata();
            if(__value__b__) ____result.value = __value__;
            if(__key__b__) ____result.key = __key__;

            return ____result;
        }
    }


    public sealed class AddressFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Address>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AddressFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("county"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("postalCode"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("district"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("street"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("label"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("houseNumber"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("additionalData"), 9},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("county"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("postalCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("district"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("street"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("label"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("houseNumber"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("additionalData"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Address value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.county);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.postalCode);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.district);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.street);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.label);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.houseNumber);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Additionaldata[]>().Serialize(ref writer, value.additionalData, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Address Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __county__ = default(string);
            var __county__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __postalCode__ = default(string);
            var __postalCode__b__ = false;
            var __district__ = default(string);
            var __district__b__ = false;
            var __street__ = default(string);
            var __street__b__ = false;
            var __label__ = default(string);
            var __label__b__ = false;
            var __houseNumber__ = default(string);
            var __houseNumber__b__ = false;
            var __additionalData__ = default(global::SimpleWeather.Weather_API.HERE.Additionaldata[]);
            var __additionalData__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 1:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 2:
                        __county__ = reader.ReadString();
                        __county__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 4:
                        __postalCode__ = reader.ReadString();
                        __postalCode__b__ = true;
                        break;
                    case 5:
                        __district__ = reader.ReadString();
                        __district__b__ = true;
                        break;
                    case 6:
                        __street__ = reader.ReadString();
                        __street__b__ = true;
                        break;
                    case 7:
                        __label__ = reader.ReadString();
                        __label__b__ = true;
                        break;
                    case 8:
                        __houseNumber__ = reader.ReadString();
                        __houseNumber__b__ = true;
                        break;
                    case 9:
                        __additionalData__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Additionaldata[]>().Deserialize(ref reader, formatterResolver);
                        __additionalData__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Address();
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__county__b__) ____result.county = __county__;
            if(__city__b__) ____result.city = __city__;
            if(__postalCode__b__) ____result.postalCode = __postalCode__;
            if(__district__b__) ____result.district = __district__;
            if(__street__b__) ____result.street = __street__;
            if(__label__b__) ____result.label = __label__;
            if(__houseNumber__b__) ____result.houseNumber = __houseNumber__;
            if(__additionalData__b__) ____result.additionalData = __additionalData__;

            return ____result;
        }
    }


    public sealed class SuggestionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Suggestion>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SuggestionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("label"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("language"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("countryCode"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("locationId"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("address"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("matchLevel"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("label"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("language"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("countryCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("locationId"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("address"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("matchLevel"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Suggestion value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.label);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.language);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.countryCode);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.locationId);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Address>().Serialize(ref writer, value.address, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.matchLevel);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Suggestion Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __label__ = default(string);
            var __label__b__ = false;
            var __language__ = default(string);
            var __language__b__ = false;
            var __countryCode__ = default(string);
            var __countryCode__b__ = false;
            var __locationId__ = default(string);
            var __locationId__b__ = false;
            var __address__ = default(global::SimpleWeather.Weather_API.HERE.Address);
            var __address__b__ = false;
            var __matchLevel__ = default(string);
            var __matchLevel__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __label__ = reader.ReadString();
                        __label__b__ = true;
                        break;
                    case 1:
                        __language__ = reader.ReadString();
                        __language__b__ = true;
                        break;
                    case 2:
                        __countryCode__ = reader.ReadString();
                        __countryCode__b__ = true;
                        break;
                    case 3:
                        __locationId__ = reader.ReadString();
                        __locationId__b__ = true;
                        break;
                    case 4:
                        __address__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Address>().Deserialize(ref reader, formatterResolver);
                        __address__b__ = true;
                        break;
                    case 5:
                        __matchLevel__ = reader.ReadString();
                        __matchLevel__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Suggestion();
            if(__label__b__) ____result.label = __label__;
            if(__language__b__) ____result.language = __language__;
            if(__countryCode__b__) ____result.countryCode = __countryCode__;
            if(__locationId__b__) ____result.locationId = __locationId__;
            if(__address__b__) ____result.address = __address__;
            if(__matchLevel__b__) ____result.matchLevel = __matchLevel__;

            return ____result;
        }
    }


    public sealed class AC_RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.AC_Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AC_RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("suggestions"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("suggestions"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.AC_Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Suggestion[]>().Serialize(ref writer, value.suggestions, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.AC_Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __suggestions__ = default(global::SimpleWeather.Weather_API.HERE.Suggestion[]);
            var __suggestions__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __suggestions__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Suggestion[]>().Deserialize(ref reader, formatterResolver);
                        __suggestions__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.AC_Rootobject();
            if(__suggestions__b__) ____result.suggestions = __suggestions__;

            return ____result;
        }
    }


    public sealed class MetainfoFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Metainfo>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MetainfoFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestamp"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nextPageInformation"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("timestamp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nextPageInformation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Metainfo value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.timestamp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.nextPageInformation);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Metainfo Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __timestamp__ = default(string);
            var __timestamp__b__ = false;
            var __nextPageInformation__ = default(string);
            var __nextPageInformation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __timestamp__ = reader.ReadString();
                        __timestamp__b__ = true;
                        break;
                    case 1:
                        __nextPageInformation__ = reader.ReadString();
                        __nextPageInformation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Metainfo();
            if(__timestamp__b__) ____result.timestamp = __timestamp__;
            if(__nextPageInformation__b__) ____result.nextPageInformation = __nextPageInformation__;

            return ____result;
        }
    }


    public sealed class MatchqualityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Matchquality>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchqualityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("county"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("district"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("street"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("houseNumber"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("postalCode"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("county"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("district"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("street"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("houseNumber"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("postalCode"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Matchquality value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.country);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.state);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.county);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.district);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.street, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.houseNumber);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.postalCode);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Matchquality Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __country__ = default(float);
            var __country__b__ = false;
            var __state__ = default(float);
            var __state__b__ = false;
            var __county__ = default(float);
            var __county__b__ = false;
            var __city__ = default(float);
            var __city__b__ = false;
            var __district__ = default(float);
            var __district__b__ = false;
            var __street__ = default(float[]);
            var __street__b__ = false;
            var __houseNumber__ = default(float);
            var __houseNumber__b__ = false;
            var __postalCode__ = default(float);
            var __postalCode__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __country__ = reader.ReadSingle();
                        __country__b__ = true;
                        break;
                    case 1:
                        __state__ = reader.ReadSingle();
                        __state__b__ = true;
                        break;
                    case 2:
                        __county__ = reader.ReadSingle();
                        __county__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadSingle();
                        __city__b__ = true;
                        break;
                    case 4:
                        __district__ = reader.ReadSingle();
                        __district__b__ = true;
                        break;
                    case 5:
                        __street__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, formatterResolver);
                        __street__b__ = true;
                        break;
                    case 6:
                        __houseNumber__ = reader.ReadSingle();
                        __houseNumber__b__ = true;
                        break;
                    case 7:
                        __postalCode__ = reader.ReadSingle();
                        __postalCode__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Matchquality();
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__county__b__) ____result.county = __county__;
            if(__city__b__) ____result.city = __city__;
            if(__district__b__) ____result.district = __district__;
            if(__street__b__) ____result.street = __street__;
            if(__houseNumber__b__) ____result.houseNumber = __houseNumber__;
            if(__postalCode__b__) ____result.postalCode = __postalCode__;

            return ____result;
        }
    }


    public sealed class DisplaypositionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Displayposition>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DisplaypositionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Displayposition value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.longitude);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Displayposition Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 1:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Displayposition();
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;

            return ____result;
        }
    }


    public sealed class NavigationpositionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Navigationposition>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public NavigationpositionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Navigationposition value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.longitude);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Navigationposition Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 1:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Navigationposition();
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;

            return ____result;
        }
    }


    public sealed class TimezoneFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Timezone>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimezoneFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("offset"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rawOffset"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nameShort"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nameLong"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nameDstShort"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nameDstLong"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("inDaylightTime"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dstSavings"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 8},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("offset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rawOffset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nameShort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nameLong"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nameDstShort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nameDstLong"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("inDaylightTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dstSavings"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("id"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Timezone value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.offset);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.rawOffset);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.nameShort);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.nameLong);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.nameDstShort);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.nameDstLong);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteBoolean(value.inDaylightTime);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteInt32(value.dstSavings);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.id);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Timezone Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __offset__ = default(int);
            var __offset__b__ = false;
            var __rawOffset__ = default(int);
            var __rawOffset__b__ = false;
            var __nameShort__ = default(string);
            var __nameShort__b__ = false;
            var __nameLong__ = default(string);
            var __nameLong__b__ = false;
            var __nameDstShort__ = default(string);
            var __nameDstShort__b__ = false;
            var __nameDstLong__ = default(string);
            var __nameDstLong__b__ = false;
            var __inDaylightTime__ = default(bool);
            var __inDaylightTime__b__ = false;
            var __dstSavings__ = default(int);
            var __dstSavings__b__ = false;
            var __id__ = default(string);
            var __id__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __offset__ = reader.ReadInt32();
                        __offset__b__ = true;
                        break;
                    case 1:
                        __rawOffset__ = reader.ReadInt32();
                        __rawOffset__b__ = true;
                        break;
                    case 2:
                        __nameShort__ = reader.ReadString();
                        __nameShort__b__ = true;
                        break;
                    case 3:
                        __nameLong__ = reader.ReadString();
                        __nameLong__b__ = true;
                        break;
                    case 4:
                        __nameDstShort__ = reader.ReadString();
                        __nameDstShort__b__ = true;
                        break;
                    case 5:
                        __nameDstLong__ = reader.ReadString();
                        __nameDstLong__b__ = true;
                        break;
                    case 6:
                        __inDaylightTime__ = reader.ReadBoolean();
                        __inDaylightTime__b__ = true;
                        break;
                    case 7:
                        __dstSavings__ = reader.ReadInt32();
                        __dstSavings__b__ = true;
                        break;
                    case 8:
                        __id__ = reader.ReadString();
                        __id__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Timezone();
            if(__offset__b__) ____result.offset = __offset__;
            if(__rawOffset__b__) ____result.rawOffset = __rawOffset__;
            if(__nameShort__b__) ____result.nameShort = __nameShort__;
            if(__nameLong__b__) ____result.nameLong = __nameLong__;
            if(__nameDstShort__b__) ____result.nameDstShort = __nameDstShort__;
            if(__nameDstLong__b__) ____result.nameDstLong = __nameDstLong__;
            if(__inDaylightTime__b__) ____result.inDaylightTime = __inDaylightTime__;
            if(__dstSavings__b__) ____result.dstSavings = __dstSavings__;
            if(__id__b__) ____result.id = __id__;

            return ____result;
        }
    }


    public sealed class AdmininfoFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Admininfo>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AdmininfoFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("localTime"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("currency"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("drivingSide"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("systemOfMeasure"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timeZone"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("localTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("currency"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("drivingSide"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("systemOfMeasure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timeZone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Admininfo value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.localTime);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.currency);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.drivingSide);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.systemOfMeasure);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Timezone>().Serialize(ref writer, value.timeZone, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Admininfo Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __localTime__ = default(string);
            var __localTime__b__ = false;
            var __currency__ = default(string);
            var __currency__b__ = false;
            var __drivingSide__ = default(string);
            var __drivingSide__b__ = false;
            var __systemOfMeasure__ = default(string);
            var __systemOfMeasure__b__ = false;
            var __timeZone__ = default(global::SimpleWeather.Weather_API.HERE.Timezone);
            var __timeZone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __localTime__ = reader.ReadString();
                        __localTime__b__ = true;
                        break;
                    case 1:
                        __currency__ = reader.ReadString();
                        __currency__b__ = true;
                        break;
                    case 2:
                        __drivingSide__ = reader.ReadString();
                        __drivingSide__b__ = true;
                        break;
                    case 3:
                        __systemOfMeasure__ = reader.ReadString();
                        __systemOfMeasure__b__ = true;
                        break;
                    case 4:
                        __timeZone__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Timezone>().Deserialize(ref reader, formatterResolver);
                        __timeZone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Admininfo();
            if(__localTime__b__) ____result.localTime = __localTime__;
            if(__currency__b__) ____result.currency = __currency__;
            if(__drivingSide__b__) ____result.drivingSide = __drivingSide__;
            if(__systemOfMeasure__b__) ____result.systemOfMeasure = __systemOfMeasure__;
            if(__timeZone__b__) ____result.timeZone = __timeZone__;

            return ____result;
        }
    }


    public sealed class GeoLocationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.GeoLocation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GeoLocationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("locationId"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("locationType"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("displayPosition"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("navigationPosition"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("address"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("adminInfo"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("locationId"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("locationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("displayPosition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("navigationPosition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("address"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("adminInfo"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.GeoLocation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.locationId);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.locationType);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Displayposition>().Serialize(ref writer, value.displayPosition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Navigationposition[]>().Serialize(ref writer, value.navigationPosition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Address>().Serialize(ref writer, value.address, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Admininfo>().Serialize(ref writer, value.adminInfo, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.GeoLocation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __locationId__ = default(string);
            var __locationId__b__ = false;
            var __locationType__ = default(string);
            var __locationType__b__ = false;
            var __displayPosition__ = default(global::SimpleWeather.Weather_API.HERE.Displayposition);
            var __displayPosition__b__ = false;
            var __navigationPosition__ = default(global::SimpleWeather.Weather_API.HERE.Navigationposition[]);
            var __navigationPosition__b__ = false;
            var __address__ = default(global::SimpleWeather.Weather_API.HERE.Address);
            var __address__b__ = false;
            var __adminInfo__ = default(global::SimpleWeather.Weather_API.HERE.Admininfo);
            var __adminInfo__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __locationId__ = reader.ReadString();
                        __locationId__b__ = true;
                        break;
                    case 1:
                        __locationType__ = reader.ReadString();
                        __locationType__b__ = true;
                        break;
                    case 2:
                        __displayPosition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Displayposition>().Deserialize(ref reader, formatterResolver);
                        __displayPosition__b__ = true;
                        break;
                    case 3:
                        __navigationPosition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Navigationposition[]>().Deserialize(ref reader, formatterResolver);
                        __navigationPosition__b__ = true;
                        break;
                    case 4:
                        __address__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Address>().Deserialize(ref reader, formatterResolver);
                        __address__b__ = true;
                        break;
                    case 5:
                        __adminInfo__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Admininfo>().Deserialize(ref reader, formatterResolver);
                        __adminInfo__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.GeoLocation();
            if(__locationId__b__) ____result.locationId = __locationId__;
            if(__locationType__b__) ____result.locationType = __locationType__;
            if(__displayPosition__b__) ____result.displayPosition = __displayPosition__;
            if(__navigationPosition__b__) ____result.navigationPosition = __navigationPosition__;
            if(__address__b__) ____result.address = __address__;
            if(__adminInfo__b__) ____result.adminInfo = __adminInfo__;

            return ____result;
        }
    }


    public sealed class ResultFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Result>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ResultFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("relevance"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("distance"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("matchLevel"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("matchQuality"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("matchType"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("location"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("relevance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("distance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("matchLevel"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("matchQuality"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("matchType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("location"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Result value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.relevance);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.distance);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.matchLevel);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Matchquality>().Serialize(ref writer, value.matchQuality, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.matchType);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.GeoLocation>().Serialize(ref writer, value.location, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Result Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __relevance__ = default(float);
            var __relevance__b__ = false;
            var __distance__ = default(float);
            var __distance__b__ = false;
            var __matchLevel__ = default(string);
            var __matchLevel__b__ = false;
            var __matchQuality__ = default(global::SimpleWeather.Weather_API.HERE.Matchquality);
            var __matchQuality__b__ = false;
            var __matchType__ = default(string);
            var __matchType__b__ = false;
            var __location__ = default(global::SimpleWeather.Weather_API.HERE.GeoLocation);
            var __location__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __relevance__ = reader.ReadSingle();
                        __relevance__b__ = true;
                        break;
                    case 1:
                        __distance__ = reader.ReadSingle();
                        __distance__b__ = true;
                        break;
                    case 2:
                        __matchLevel__ = reader.ReadString();
                        __matchLevel__b__ = true;
                        break;
                    case 3:
                        __matchQuality__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Matchquality>().Deserialize(ref reader, formatterResolver);
                        __matchQuality__b__ = true;
                        break;
                    case 4:
                        __matchType__ = reader.ReadString();
                        __matchType__b__ = true;
                        break;
                    case 5:
                        __location__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.GeoLocation>().Deserialize(ref reader, formatterResolver);
                        __location__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Result();
            if(__relevance__b__) ____result.relevance = __relevance__;
            if(__distance__b__) ____result.distance = __distance__;
            if(__matchLevel__b__) ____result.matchLevel = __matchLevel__;
            if(__matchQuality__b__) ____result.matchQuality = __matchQuality__;
            if(__matchType__b__) ____result.matchType = __matchType__;
            if(__location__b__) ____result.location = __location__;

            return ____result;
        }
    }


    public sealed class ViewFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.View>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ViewFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("result"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("viewId"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("result"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("viewId"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.View value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Result[]>().Serialize(ref writer, value.result, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.viewId);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.View Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __result__ = default(global::SimpleWeather.Weather_API.HERE.Result[]);
            var __result__b__ = false;
            var __viewId__ = default(int);
            var __viewId__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __result__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Result[]>().Deserialize(ref reader, formatterResolver);
                        __result__b__ = true;
                        break;
                    case 1:
                        __viewId__ = reader.ReadInt32();
                        __viewId__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.View();
            if(__result__b__) ____result.result = __result__;
            if(__viewId__b__) ____result.viewId = __viewId__;

            return ____result;
        }
    }


    public sealed class ResponseFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Response>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ResponseFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metaInfo"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("view"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("metaInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("view"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Response value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Metainfo>().Serialize(ref writer, value.metaInfo, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.View[]>().Serialize(ref writer, value.view, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Response Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __metaInfo__ = default(global::SimpleWeather.Weather_API.HERE.Metainfo);
            var __metaInfo__b__ = false;
            var __view__ = default(global::SimpleWeather.Weather_API.HERE.View[]);
            var __view__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __metaInfo__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Metainfo>().Deserialize(ref reader, formatterResolver);
                        __metaInfo__b__ = true;
                        break;
                    case 1:
                        __view__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.View[]>().Deserialize(ref reader, formatterResolver);
                        __view__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Response();
            if(__metaInfo__b__) ____result.metaInfo = __metaInfo__;
            if(__view__b__) ____result.view = __view__;

            return ____result;
        }
    }


    public sealed class Geo_RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Geo_Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Geo_RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("response"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("response"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Geo_Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Response>().Serialize(ref writer, value.response, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Geo_Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __response__ = default(global::SimpleWeather.Weather_API.HERE.Response);
            var __response__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __response__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Response>().Deserialize(ref reader, formatterResolver);
                        __response__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Geo_Rootobject();
            if(__response__b__) ____result.response = __response__;

            return ____result;
        }
    }


    public sealed class WarningFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Warning>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WarningFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("message"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("validFromTimeLocal"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("validUntilTimeLocal"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("message"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("validFromTimeLocal"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("validUntilTimeLocal"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Warning value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.severity);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.message);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.validFromTimeLocal, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.validUntilTimeLocal, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.longitude);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Warning Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __type__ = default(string);
            var __type__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __severity__ = default(int);
            var __severity__b__ = false;
            var __message__ = default(string);
            var __message__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __validFromTimeLocal__ = default(global::System.DateTime);
            var __validFromTimeLocal__b__ = false;
            var __validUntilTimeLocal__ = default(global::System.DateTime);
            var __validUntilTimeLocal__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __latitude__ = default(string);
            var __latitude__b__ = false;
            var __longitude__ = default(string);
            var __longitude__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 1:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 2:
                        __severity__ = reader.ReadInt32();
                        __severity__b__ = true;
                        break;
                    case 3:
                        __message__ = reader.ReadString();
                        __message__b__ = true;
                        break;
                    case 4:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 5:
                        __validFromTimeLocal__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __validFromTimeLocal__b__ = true;
                        break;
                    case 6:
                        __validUntilTimeLocal__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __validUntilTimeLocal__b__ = true;
                        break;
                    case 7:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 8:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 9:
                        __latitude__ = reader.ReadString();
                        __latitude__b__ = true;
                        break;
                    case 10:
                        __longitude__ = reader.ReadString();
                        __longitude__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Warning();
            if(__type__b__) ____result.type = __type__;
            if(__description__b__) ____result.description = __description__;
            if(__severity__b__) ____result.severity = __severity__;
            if(__message__b__) ____result.message = __message__;
            if(__name__b__) ____result.name = __name__;
            if(__validFromTimeLocal__b__) ____result.validFromTimeLocal = __validFromTimeLocal__;
            if(__validUntilTimeLocal__b__) ____result.validUntilTimeLocal = __validUntilTimeLocal__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;

            return ____result;
        }
    }


    public sealed class WatchFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Watch>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WatchFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("message"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("validFromTimeLocal"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("validUntilTimeLocal"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("message"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("validFromTimeLocal"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("validUntilTimeLocal"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Watch value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.severity);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.message);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.validFromTimeLocal, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.validUntilTimeLocal, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.longitude);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Watch Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __type__ = default(string);
            var __type__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __severity__ = default(int);
            var __severity__b__ = false;
            var __message__ = default(string);
            var __message__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __validFromTimeLocal__ = default(global::System.DateTime);
            var __validFromTimeLocal__b__ = false;
            var __validUntilTimeLocal__ = default(global::System.DateTime);
            var __validUntilTimeLocal__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __latitude__ = default(string);
            var __latitude__b__ = false;
            var __longitude__ = default(string);
            var __longitude__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 1:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 2:
                        __severity__ = reader.ReadInt32();
                        __severity__b__ = true;
                        break;
                    case 3:
                        __message__ = reader.ReadString();
                        __message__b__ = true;
                        break;
                    case 4:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 5:
                        __validFromTimeLocal__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __validFromTimeLocal__b__ = true;
                        break;
                    case 6:
                        __validUntilTimeLocal__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __validUntilTimeLocal__b__ = true;
                        break;
                    case 7:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 8:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 9:
                        __latitude__ = reader.ReadString();
                        __latitude__b__ = true;
                        break;
                    case 10:
                        __longitude__ = reader.ReadString();
                        __longitude__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Watch();
            if(__type__b__) ____result.type = __type__;
            if(__description__b__) ____result.description = __description__;
            if(__severity__b__) ____result.severity = __severity__;
            if(__message__b__) ____result.message = __message__;
            if(__name__b__) ____result.name = __name__;
            if(__validFromTimeLocal__b__) ____result.validFromTimeLocal = __validFromTimeLocal__;
            if(__validUntilTimeLocal__b__) ____result.validUntilTimeLocal = __validUntilTimeLocal__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;

            return ____result;
        }
    }


    public sealed class NwsalertsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Nwsalerts>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public NwsalertsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("warning"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("watch"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("warning"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("watch"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Nwsalerts value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Warning[]>().Serialize(ref writer, value.warning, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Watch[]>().Serialize(ref writer, value.watch, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Nwsalerts Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __warning__ = default(global::SimpleWeather.Weather_API.HERE.Warning[]);
            var __warning__b__ = false;
            var __watch__ = default(global::SimpleWeather.Weather_API.HERE.Watch[]);
            var __watch__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __warning__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Warning[]>().Deserialize(ref reader, formatterResolver);
                        __warning__b__ = true;
                        break;
                    case 1:
                        __watch__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Watch[]>().Deserialize(ref reader, formatterResolver);
                        __watch__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Nwsalerts();
            if(__warning__b__) ____result.warning = __warning__;
            if(__watch__b__) ____result.watch = __watch__;

            return ____result;
        }
    }


    public sealed class TokenRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.TokenRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TokenRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("access_token"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("token_type"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expires_in"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("access_token"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("token_type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expires_in"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.TokenRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.access_token);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.token_type);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.expires_in);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.TokenRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __access_token__ = default(string);
            var __access_token__b__ = false;
            var __token_type__ = default(string);
            var __token_type__b__ = false;
            var __expires_in__ = default(int);
            var __expires_in__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __access_token__ = reader.ReadString();
                        __access_token__b__ = true;
                        break;
                    case 1:
                        __token_type__ = reader.ReadString();
                        __token_type__b__ = true;
                        break;
                    case 2:
                        __expires_in__ = reader.ReadInt32();
                        __expires_in__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.TokenRootobject();
            if(__access_token__b__) ____result.access_token = __access_token__;
            if(__token_type__b__) ____result.token_type = __token_type__;
            if(__expires_in__b__) ____result.expires_in = __expires_in__;

            return ____result;
        }
    }


    internal sealed class TokenFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Token>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TokenFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("access_token"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expiration_date"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("access_token"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expiration_date"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Token value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.access_token);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.expiration_date, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Token Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __access_token__ = default(string);
            var __access_token__b__ = false;
            var __expiration_date__ = default(global::System.DateTime);
            var __expiration_date__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __access_token__ = reader.ReadString();
                        __access_token__b__ = true;
                        break;
                    case 1:
                        __expiration_date__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __expiration_date__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Token();
            if(__access_token__b__) ____result.access_token = __access_token__;
            if(__expiration_date__b__) ____result.expiration_date = __expiration_date__;

            return ____result;
        }
    }


    public sealed class ObservationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Observation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ObservationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daylight"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("skyInfo"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("skyDescription"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureDesc"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("comfort"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("highTemperature"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lowTemperature"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewPoint"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation1H"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation3H"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation6H"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation12H"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation24H"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationDesc"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("airInfo"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("airDescription"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDesc"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDescShort"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("barometerPressure"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("barometerTrend"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowCover"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconName"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconLink"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ageMinutes"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("activeAlerts"), 31},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 32},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 33},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 34},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 35},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 36},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("distance"), 37},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("elevation"), 38},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("utcTime"), 39},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("daylight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("skyInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("skyDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("comfort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("highTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lowTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation1H"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation3H"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation6H"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation12H"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation24H"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("airInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("airDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDescShort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("barometerPressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("barometerTrend"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snowCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ageMinutes"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("activeAlerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("distance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("elevation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("utcTime"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Observation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.daylight);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.skyInfo);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.skyDescription);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.temperature);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.temperatureDesc);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.comfort);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.highTemperature);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.lowTemperature);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.dewPoint);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.precipitation1H);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.precipitation3H);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.precipitation6H);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.precipitation12H);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteString(value.precipitation24H);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteString(value.precipitationDesc);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteString(value.airInfo);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteString(value.airDescription);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteString(value.windSpeed);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteString(value.windDirection);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteString(value.windDesc);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteString(value.windDescShort);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteString(value.barometerPressure);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteString(value.barometerTrend);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteString(value.visibility);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteString(value.snowCover);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteString(value.iconName);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteString(value.iconLink);
            writer.WriteRaw(this.____stringByteKeys[30]);
            writer.WriteString(value.ageMinutes);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteString(value.activeAlerts);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[33]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[34]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[35]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[36]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[37]);
            writer.WriteSingle(value.distance);
            writer.WriteRaw(this.____stringByteKeys[38]);
            writer.WriteSingle(value.elevation);
            writer.WriteRaw(this.____stringByteKeys[39]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.utcTime, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Observation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __daylight__ = default(string);
            var __daylight__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __skyInfo__ = default(string);
            var __skyInfo__b__ = false;
            var __skyDescription__ = default(string);
            var __skyDescription__b__ = false;
            var __temperature__ = default(string);
            var __temperature__b__ = false;
            var __temperatureDesc__ = default(string);
            var __temperatureDesc__b__ = false;
            var __comfort__ = default(string);
            var __comfort__b__ = false;
            var __highTemperature__ = default(string);
            var __highTemperature__b__ = false;
            var __lowTemperature__ = default(string);
            var __lowTemperature__b__ = false;
            var __humidity__ = default(string);
            var __humidity__b__ = false;
            var __dewPoint__ = default(string);
            var __dewPoint__b__ = false;
            var __precipitation1H__ = default(string);
            var __precipitation1H__b__ = false;
            var __precipitation3H__ = default(string);
            var __precipitation3H__b__ = false;
            var __precipitation6H__ = default(string);
            var __precipitation6H__b__ = false;
            var __precipitation12H__ = default(string);
            var __precipitation12H__b__ = false;
            var __precipitation24H__ = default(string);
            var __precipitation24H__b__ = false;
            var __precipitationDesc__ = default(string);
            var __precipitationDesc__b__ = false;
            var __airInfo__ = default(string);
            var __airInfo__b__ = false;
            var __airDescription__ = default(string);
            var __airDescription__b__ = false;
            var __windSpeed__ = default(string);
            var __windSpeed__b__ = false;
            var __windDirection__ = default(string);
            var __windDirection__b__ = false;
            var __windDesc__ = default(string);
            var __windDesc__b__ = false;
            var __windDescShort__ = default(string);
            var __windDescShort__b__ = false;
            var __barometerPressure__ = default(string);
            var __barometerPressure__b__ = false;
            var __barometerTrend__ = default(string);
            var __barometerTrend__b__ = false;
            var __visibility__ = default(string);
            var __visibility__b__ = false;
            var __snowCover__ = default(string);
            var __snowCover__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;
            var __iconName__ = default(string);
            var __iconName__b__ = false;
            var __iconLink__ = default(string);
            var __iconLink__b__ = false;
            var __ageMinutes__ = default(string);
            var __ageMinutes__b__ = false;
            var __activeAlerts__ = default(string);
            var __activeAlerts__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __distance__ = default(float);
            var __distance__b__ = false;
            var __elevation__ = default(float);
            var __elevation__b__ = false;
            var __utcTime__ = default(global::System.DateTimeOffset);
            var __utcTime__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __daylight__ = reader.ReadString();
                        __daylight__b__ = true;
                        break;
                    case 1:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 2:
                        __skyInfo__ = reader.ReadString();
                        __skyInfo__b__ = true;
                        break;
                    case 3:
                        __skyDescription__ = reader.ReadString();
                        __skyDescription__b__ = true;
                        break;
                    case 4:
                        __temperature__ = reader.ReadString();
                        __temperature__b__ = true;
                        break;
                    case 5:
                        __temperatureDesc__ = reader.ReadString();
                        __temperatureDesc__b__ = true;
                        break;
                    case 6:
                        __comfort__ = reader.ReadString();
                        __comfort__b__ = true;
                        break;
                    case 7:
                        __highTemperature__ = reader.ReadString();
                        __highTemperature__b__ = true;
                        break;
                    case 8:
                        __lowTemperature__ = reader.ReadString();
                        __lowTemperature__b__ = true;
                        break;
                    case 9:
                        __humidity__ = reader.ReadString();
                        __humidity__b__ = true;
                        break;
                    case 10:
                        __dewPoint__ = reader.ReadString();
                        __dewPoint__b__ = true;
                        break;
                    case 11:
                        __precipitation1H__ = reader.ReadString();
                        __precipitation1H__b__ = true;
                        break;
                    case 12:
                        __precipitation3H__ = reader.ReadString();
                        __precipitation3H__b__ = true;
                        break;
                    case 13:
                        __precipitation6H__ = reader.ReadString();
                        __precipitation6H__b__ = true;
                        break;
                    case 14:
                        __precipitation12H__ = reader.ReadString();
                        __precipitation12H__b__ = true;
                        break;
                    case 15:
                        __precipitation24H__ = reader.ReadString();
                        __precipitation24H__b__ = true;
                        break;
                    case 16:
                        __precipitationDesc__ = reader.ReadString();
                        __precipitationDesc__b__ = true;
                        break;
                    case 17:
                        __airInfo__ = reader.ReadString();
                        __airInfo__b__ = true;
                        break;
                    case 18:
                        __airDescription__ = reader.ReadString();
                        __airDescription__b__ = true;
                        break;
                    case 19:
                        __windSpeed__ = reader.ReadString();
                        __windSpeed__b__ = true;
                        break;
                    case 20:
                        __windDirection__ = reader.ReadString();
                        __windDirection__b__ = true;
                        break;
                    case 21:
                        __windDesc__ = reader.ReadString();
                        __windDesc__b__ = true;
                        break;
                    case 22:
                        __windDescShort__ = reader.ReadString();
                        __windDescShort__b__ = true;
                        break;
                    case 23:
                        __barometerPressure__ = reader.ReadString();
                        __barometerPressure__b__ = true;
                        break;
                    case 24:
                        __barometerTrend__ = reader.ReadString();
                        __barometerTrend__b__ = true;
                        break;
                    case 25:
                        __visibility__ = reader.ReadString();
                        __visibility__b__ = true;
                        break;
                    case 26:
                        __snowCover__ = reader.ReadString();
                        __snowCover__b__ = true;
                        break;
                    case 27:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 28:
                        __iconName__ = reader.ReadString();
                        __iconName__b__ = true;
                        break;
                    case 29:
                        __iconLink__ = reader.ReadString();
                        __iconLink__b__ = true;
                        break;
                    case 30:
                        __ageMinutes__ = reader.ReadString();
                        __ageMinutes__b__ = true;
                        break;
                    case 31:
                        __activeAlerts__ = reader.ReadString();
                        __activeAlerts__b__ = true;
                        break;
                    case 32:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 33:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 34:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 35:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 36:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 37:
                        __distance__ = reader.ReadSingle();
                        __distance__b__ = true;
                        break;
                    case 38:
                        __elevation__ = reader.ReadSingle();
                        __elevation__b__ = true;
                        break;
                    case 39:
                        __utcTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __utcTime__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Observation();
            if(__daylight__b__) ____result.daylight = __daylight__;
            if(__description__b__) ____result.description = __description__;
            if(__skyInfo__b__) ____result.skyInfo = __skyInfo__;
            if(__skyDescription__b__) ____result.skyDescription = __skyDescription__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__temperatureDesc__b__) ____result.temperatureDesc = __temperatureDesc__;
            if(__comfort__b__) ____result.comfort = __comfort__;
            if(__highTemperature__b__) ____result.highTemperature = __highTemperature__;
            if(__lowTemperature__b__) ____result.lowTemperature = __lowTemperature__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__dewPoint__b__) ____result.dewPoint = __dewPoint__;
            if(__precipitation1H__b__) ____result.precipitation1H = __precipitation1H__;
            if(__precipitation3H__b__) ____result.precipitation3H = __precipitation3H__;
            if(__precipitation6H__b__) ____result.precipitation6H = __precipitation6H__;
            if(__precipitation12H__b__) ____result.precipitation12H = __precipitation12H__;
            if(__precipitation24H__b__) ____result.precipitation24H = __precipitation24H__;
            if(__precipitationDesc__b__) ____result.precipitationDesc = __precipitationDesc__;
            if(__airInfo__b__) ____result.airInfo = __airInfo__;
            if(__airDescription__b__) ____result.airDescription = __airDescription__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windDesc__b__) ____result.windDesc = __windDesc__;
            if(__windDescShort__b__) ____result.windDescShort = __windDescShort__;
            if(__barometerPressure__b__) ____result.barometerPressure = __barometerPressure__;
            if(__barometerTrend__b__) ____result.barometerTrend = __barometerTrend__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__snowCover__b__) ____result.snowCover = __snowCover__;
            if(__icon__b__) ____result.icon = __icon__;
            if(__iconName__b__) ____result.iconName = __iconName__;
            if(__iconLink__b__) ____result.iconLink = __iconLink__;
            if(__ageMinutes__b__) ____result.ageMinutes = __ageMinutes__;
            if(__activeAlerts__b__) ____result.activeAlerts = __activeAlerts__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__distance__b__) ____result.distance = __distance__;
            if(__elevation__b__) ____result.elevation = __elevation__;
            if(__utcTime__b__) ____result.utcTime = __utcTime__;

            return ____result;
        }
    }


    public sealed class LocationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Location>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LocationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("observation"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("distance"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("observation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("distance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Location value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Observation[]>().Serialize(ref writer, value.observation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.distance);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteInt32(value.timezone);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Location Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __observation__ = default(global::SimpleWeather.Weather_API.HERE.Observation[]);
            var __observation__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __distance__ = default(float);
            var __distance__b__ = false;
            var __timezone__ = default(int);
            var __timezone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __observation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Observation[]>().Deserialize(ref reader, formatterResolver);
                        __observation__b__ = true;
                        break;
                    case 1:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 2:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 4:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 5:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 6:
                        __distance__ = reader.ReadSingle();
                        __distance__b__ = true;
                        break;
                    case 7:
                        __timezone__ = reader.ReadInt32();
                        __timezone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Location();
            if(__observation__b__) ____result.observation = __observation__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__distance__b__) ____result.distance = __distance__;
            if(__timezone__b__) ____result.timezone = __timezone__;

            return ____result;
        }
    }


    public sealed class ObservationsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Observations>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ObservationsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("location"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("location"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Observations value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Location[]>().Serialize(ref writer, value.location, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Observations Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __location__ = default(global::SimpleWeather.Weather_API.HERE.Location[]);
            var __location__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __location__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Location[]>().Deserialize(ref reader, formatterResolver);
                        __location__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Observations();
            if(__location__b__) ____result.location = __location__;

            return ____result;
        }
    }


    public sealed class ForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Forecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daylight"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("skyInfo"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("skyDescription"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureDesc"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("comfort"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("highTemperature"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lowTemperature"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewPoint"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationProbability"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationDesc"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rainFall"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowFall"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("airInfo"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("airDescription"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDesc"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDescShort"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("beaufortScale"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("beaufortDescription"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvIndex"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvDesc"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("barometerPressure"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconName"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconLink"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dayOfWeek"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weekday"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("utcTime"), 30},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("daylight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("skyInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("skyDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("comfort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("highTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lowTemperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rainFall"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snowFall"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("airInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("airDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDescShort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("beaufortScale"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("beaufortDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("barometerPressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dayOfWeek"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weekday"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("utcTime"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Forecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.daylight);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.skyInfo);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.skyDescription);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.temperatureDesc);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.comfort);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.highTemperature);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.lowTemperature);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.dewPoint);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.precipitationProbability);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.precipitationDesc);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.rainFall);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.snowFall);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.airInfo);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteString(value.airDescription);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteString(value.windSpeed);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteString(value.windDirection);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteString(value.windDesc);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteString(value.windDescShort);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteString(value.beaufortScale);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteString(value.beaufortDescription);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteString(value.uvIndex);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteString(value.uvDesc);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteString(value.barometerPressure);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteString(value.iconName);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteString(value.iconLink);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteString(value.dayOfWeek);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteString(value.weekday);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.utcTime, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Forecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __daylight__ = default(string);
            var __daylight__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __skyInfo__ = default(string);
            var __skyInfo__b__ = false;
            var __skyDescription__ = default(string);
            var __skyDescription__b__ = false;
            var __temperatureDesc__ = default(string);
            var __temperatureDesc__b__ = false;
            var __comfort__ = default(string);
            var __comfort__b__ = false;
            var __highTemperature__ = default(string);
            var __highTemperature__b__ = false;
            var __lowTemperature__ = default(string);
            var __lowTemperature__b__ = false;
            var __humidity__ = default(string);
            var __humidity__b__ = false;
            var __dewPoint__ = default(string);
            var __dewPoint__b__ = false;
            var __precipitationProbability__ = default(string);
            var __precipitationProbability__b__ = false;
            var __precipitationDesc__ = default(string);
            var __precipitationDesc__b__ = false;
            var __rainFall__ = default(string);
            var __rainFall__b__ = false;
            var __snowFall__ = default(string);
            var __snowFall__b__ = false;
            var __airInfo__ = default(string);
            var __airInfo__b__ = false;
            var __airDescription__ = default(string);
            var __airDescription__b__ = false;
            var __windSpeed__ = default(string);
            var __windSpeed__b__ = false;
            var __windDirection__ = default(string);
            var __windDirection__b__ = false;
            var __windDesc__ = default(string);
            var __windDesc__b__ = false;
            var __windDescShort__ = default(string);
            var __windDescShort__b__ = false;
            var __beaufortScale__ = default(string);
            var __beaufortScale__b__ = false;
            var __beaufortDescription__ = default(string);
            var __beaufortDescription__b__ = false;
            var __uvIndex__ = default(string);
            var __uvIndex__b__ = false;
            var __uvDesc__ = default(string);
            var __uvDesc__b__ = false;
            var __barometerPressure__ = default(string);
            var __barometerPressure__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;
            var __iconName__ = default(string);
            var __iconName__b__ = false;
            var __iconLink__ = default(string);
            var __iconLink__b__ = false;
            var __dayOfWeek__ = default(string);
            var __dayOfWeek__b__ = false;
            var __weekday__ = default(string);
            var __weekday__b__ = false;
            var __utcTime__ = default(global::System.DateTimeOffset);
            var __utcTime__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __daylight__ = reader.ReadString();
                        __daylight__b__ = true;
                        break;
                    case 1:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 2:
                        __skyInfo__ = reader.ReadString();
                        __skyInfo__b__ = true;
                        break;
                    case 3:
                        __skyDescription__ = reader.ReadString();
                        __skyDescription__b__ = true;
                        break;
                    case 4:
                        __temperatureDesc__ = reader.ReadString();
                        __temperatureDesc__b__ = true;
                        break;
                    case 5:
                        __comfort__ = reader.ReadString();
                        __comfort__b__ = true;
                        break;
                    case 6:
                        __highTemperature__ = reader.ReadString();
                        __highTemperature__b__ = true;
                        break;
                    case 7:
                        __lowTemperature__ = reader.ReadString();
                        __lowTemperature__b__ = true;
                        break;
                    case 8:
                        __humidity__ = reader.ReadString();
                        __humidity__b__ = true;
                        break;
                    case 9:
                        __dewPoint__ = reader.ReadString();
                        __dewPoint__b__ = true;
                        break;
                    case 10:
                        __precipitationProbability__ = reader.ReadString();
                        __precipitationProbability__b__ = true;
                        break;
                    case 11:
                        __precipitationDesc__ = reader.ReadString();
                        __precipitationDesc__b__ = true;
                        break;
                    case 12:
                        __rainFall__ = reader.ReadString();
                        __rainFall__b__ = true;
                        break;
                    case 13:
                        __snowFall__ = reader.ReadString();
                        __snowFall__b__ = true;
                        break;
                    case 14:
                        __airInfo__ = reader.ReadString();
                        __airInfo__b__ = true;
                        break;
                    case 15:
                        __airDescription__ = reader.ReadString();
                        __airDescription__b__ = true;
                        break;
                    case 16:
                        __windSpeed__ = reader.ReadString();
                        __windSpeed__b__ = true;
                        break;
                    case 17:
                        __windDirection__ = reader.ReadString();
                        __windDirection__b__ = true;
                        break;
                    case 18:
                        __windDesc__ = reader.ReadString();
                        __windDesc__b__ = true;
                        break;
                    case 19:
                        __windDescShort__ = reader.ReadString();
                        __windDescShort__b__ = true;
                        break;
                    case 20:
                        __beaufortScale__ = reader.ReadString();
                        __beaufortScale__b__ = true;
                        break;
                    case 21:
                        __beaufortDescription__ = reader.ReadString();
                        __beaufortDescription__b__ = true;
                        break;
                    case 22:
                        __uvIndex__ = reader.ReadString();
                        __uvIndex__b__ = true;
                        break;
                    case 23:
                        __uvDesc__ = reader.ReadString();
                        __uvDesc__b__ = true;
                        break;
                    case 24:
                        __barometerPressure__ = reader.ReadString();
                        __barometerPressure__b__ = true;
                        break;
                    case 25:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 26:
                        __iconName__ = reader.ReadString();
                        __iconName__b__ = true;
                        break;
                    case 27:
                        __iconLink__ = reader.ReadString();
                        __iconLink__b__ = true;
                        break;
                    case 28:
                        __dayOfWeek__ = reader.ReadString();
                        __dayOfWeek__b__ = true;
                        break;
                    case 29:
                        __weekday__ = reader.ReadString();
                        __weekday__b__ = true;
                        break;
                    case 30:
                        __utcTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __utcTime__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Forecast();
            if(__daylight__b__) ____result.daylight = __daylight__;
            if(__description__b__) ____result.description = __description__;
            if(__skyInfo__b__) ____result.skyInfo = __skyInfo__;
            if(__skyDescription__b__) ____result.skyDescription = __skyDescription__;
            if(__temperatureDesc__b__) ____result.temperatureDesc = __temperatureDesc__;
            if(__comfort__b__) ____result.comfort = __comfort__;
            if(__highTemperature__b__) ____result.highTemperature = __highTemperature__;
            if(__lowTemperature__b__) ____result.lowTemperature = __lowTemperature__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__dewPoint__b__) ____result.dewPoint = __dewPoint__;
            if(__precipitationProbability__b__) ____result.precipitationProbability = __precipitationProbability__;
            if(__precipitationDesc__b__) ____result.precipitationDesc = __precipitationDesc__;
            if(__rainFall__b__) ____result.rainFall = __rainFall__;
            if(__snowFall__b__) ____result.snowFall = __snowFall__;
            if(__airInfo__b__) ____result.airInfo = __airInfo__;
            if(__airDescription__b__) ____result.airDescription = __airDescription__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windDesc__b__) ____result.windDesc = __windDesc__;
            if(__windDescShort__b__) ____result.windDescShort = __windDescShort__;
            if(__beaufortScale__b__) ____result.beaufortScale = __beaufortScale__;
            if(__beaufortDescription__b__) ____result.beaufortDescription = __beaufortDescription__;
            if(__uvIndex__b__) ____result.uvIndex = __uvIndex__;
            if(__uvDesc__b__) ____result.uvDesc = __uvDesc__;
            if(__barometerPressure__b__) ____result.barometerPressure = __barometerPressure__;
            if(__icon__b__) ____result.icon = __icon__;
            if(__iconName__b__) ____result.iconName = __iconName__;
            if(__iconLink__b__) ____result.iconLink = __iconLink__;
            if(__dayOfWeek__b__) ____result.dayOfWeek = __dayOfWeek__;
            if(__weekday__b__) ____result.weekday = __weekday__;
            if(__utcTime__b__) ____result.utcTime = __utcTime__;

            return ____result;
        }
    }


    public sealed class ForecastlocationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Forecastlocation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastlocationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecast"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("distance"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("forecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("distance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Forecastlocation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecast[]>().Serialize(ref writer, value.forecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.distance);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteInt32(value.timezone);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Forecastlocation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __forecast__ = default(global::SimpleWeather.Weather_API.HERE.Forecast[]);
            var __forecast__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __distance__ = default(float);
            var __distance__b__ = false;
            var __timezone__ = default(int);
            var __timezone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecast[]>().Deserialize(ref reader, formatterResolver);
                        __forecast__b__ = true;
                        break;
                    case 1:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 2:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 4:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 5:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 6:
                        __distance__ = reader.ReadSingle();
                        __distance__b__ = true;
                        break;
                    case 7:
                        __timezone__ = reader.ReadInt32();
                        __timezone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Forecastlocation();
            if(__forecast__b__) ____result.forecast = __forecast__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__distance__b__) ____result.distance = __distance__;
            if(__timezone__b__) ____result.timezone = __timezone__;

            return ____result;
        }
    }


    public sealed class DailyforecastsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Dailyforecasts>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyforecastsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastLocation"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("forecastLocation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Dailyforecasts value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecastlocation>().Serialize(ref writer, value.forecastLocation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Dailyforecasts Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __forecastLocation__ = default(global::SimpleWeather.Weather_API.HERE.Forecastlocation);
            var __forecastLocation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __forecastLocation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecastlocation>().Deserialize(ref reader, formatterResolver);
                        __forecastLocation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Dailyforecasts();
            if(__forecastLocation__b__) ____result.forecastLocation = __forecastLocation__;

            return ____result;
        }
    }


    public sealed class Forecast1Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Forecast1>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Forecast1Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daylight"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("skyInfo"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("skyDescription"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureDesc"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("comfort"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewPoint"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationProbability"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationDesc"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rainFall"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowFall"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("airInfo"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("airDescription"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDesc"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDescShort"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("beaufortScale"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("beaufortDescription"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvIndex"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvDesc"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("barometerPressure"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconName"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconLink"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dayOfWeek"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weekday"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("utcTime"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("localTime"), 31},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("localTimeFormat"), 32},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("daylight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("skyInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("skyDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("comfort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rainFall"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snowFall"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("airInfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("airDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDescShort"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("beaufortScale"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("beaufortDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("barometerPressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dayOfWeek"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weekday"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("utcTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("localTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("localTimeFormat"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Forecast1 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.daylight);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.skyInfo);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.skyDescription);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.temperature);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.temperatureDesc);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.comfort);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.dewPoint);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.precipitationProbability);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.precipitationDesc);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.rainFall);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.snowFall);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.airInfo);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.airDescription);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteString(value.windSpeed);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteString(value.windDirection);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteString(value.windDesc);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteString(value.windDescShort);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteString(value.beaufortScale);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteString(value.beaufortDescription);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteString(value.uvIndex);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteString(value.uvDesc);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteString(value.visibility);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteString(value.barometerPressure);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteString(value.iconName);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteString(value.iconLink);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteString(value.dayOfWeek);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteString(value.weekday);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.utcTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteString(value.localTime);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.WriteString(value.localTimeFormat);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Forecast1 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __daylight__ = default(string);
            var __daylight__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __skyInfo__ = default(string);
            var __skyInfo__b__ = false;
            var __skyDescription__ = default(string);
            var __skyDescription__b__ = false;
            var __temperature__ = default(string);
            var __temperature__b__ = false;
            var __temperatureDesc__ = default(string);
            var __temperatureDesc__b__ = false;
            var __comfort__ = default(string);
            var __comfort__b__ = false;
            var __humidity__ = default(string);
            var __humidity__b__ = false;
            var __dewPoint__ = default(string);
            var __dewPoint__b__ = false;
            var __precipitationProbability__ = default(string);
            var __precipitationProbability__b__ = false;
            var __precipitationDesc__ = default(string);
            var __precipitationDesc__b__ = false;
            var __rainFall__ = default(string);
            var __rainFall__b__ = false;
            var __snowFall__ = default(string);
            var __snowFall__b__ = false;
            var __airInfo__ = default(string);
            var __airInfo__b__ = false;
            var __airDescription__ = default(string);
            var __airDescription__b__ = false;
            var __windSpeed__ = default(string);
            var __windSpeed__b__ = false;
            var __windDirection__ = default(string);
            var __windDirection__b__ = false;
            var __windDesc__ = default(string);
            var __windDesc__b__ = false;
            var __windDescShort__ = default(string);
            var __windDescShort__b__ = false;
            var __beaufortScale__ = default(string);
            var __beaufortScale__b__ = false;
            var __beaufortDescription__ = default(string);
            var __beaufortDescription__b__ = false;
            var __uvIndex__ = default(string);
            var __uvIndex__b__ = false;
            var __uvDesc__ = default(string);
            var __uvDesc__b__ = false;
            var __visibility__ = default(string);
            var __visibility__b__ = false;
            var __barometerPressure__ = default(string);
            var __barometerPressure__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;
            var __iconName__ = default(string);
            var __iconName__b__ = false;
            var __iconLink__ = default(string);
            var __iconLink__b__ = false;
            var __dayOfWeek__ = default(string);
            var __dayOfWeek__b__ = false;
            var __weekday__ = default(string);
            var __weekday__b__ = false;
            var __utcTime__ = default(global::System.DateTimeOffset);
            var __utcTime__b__ = false;
            var __localTime__ = default(string);
            var __localTime__b__ = false;
            var __localTimeFormat__ = default(string);
            var __localTimeFormat__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __daylight__ = reader.ReadString();
                        __daylight__b__ = true;
                        break;
                    case 1:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 2:
                        __skyInfo__ = reader.ReadString();
                        __skyInfo__b__ = true;
                        break;
                    case 3:
                        __skyDescription__ = reader.ReadString();
                        __skyDescription__b__ = true;
                        break;
                    case 4:
                        __temperature__ = reader.ReadString();
                        __temperature__b__ = true;
                        break;
                    case 5:
                        __temperatureDesc__ = reader.ReadString();
                        __temperatureDesc__b__ = true;
                        break;
                    case 6:
                        __comfort__ = reader.ReadString();
                        __comfort__b__ = true;
                        break;
                    case 7:
                        __humidity__ = reader.ReadString();
                        __humidity__b__ = true;
                        break;
                    case 8:
                        __dewPoint__ = reader.ReadString();
                        __dewPoint__b__ = true;
                        break;
                    case 9:
                        __precipitationProbability__ = reader.ReadString();
                        __precipitationProbability__b__ = true;
                        break;
                    case 10:
                        __precipitationDesc__ = reader.ReadString();
                        __precipitationDesc__b__ = true;
                        break;
                    case 11:
                        __rainFall__ = reader.ReadString();
                        __rainFall__b__ = true;
                        break;
                    case 12:
                        __snowFall__ = reader.ReadString();
                        __snowFall__b__ = true;
                        break;
                    case 13:
                        __airInfo__ = reader.ReadString();
                        __airInfo__b__ = true;
                        break;
                    case 14:
                        __airDescription__ = reader.ReadString();
                        __airDescription__b__ = true;
                        break;
                    case 15:
                        __windSpeed__ = reader.ReadString();
                        __windSpeed__b__ = true;
                        break;
                    case 16:
                        __windDirection__ = reader.ReadString();
                        __windDirection__b__ = true;
                        break;
                    case 17:
                        __windDesc__ = reader.ReadString();
                        __windDesc__b__ = true;
                        break;
                    case 18:
                        __windDescShort__ = reader.ReadString();
                        __windDescShort__b__ = true;
                        break;
                    case 19:
                        __beaufortScale__ = reader.ReadString();
                        __beaufortScale__b__ = true;
                        break;
                    case 20:
                        __beaufortDescription__ = reader.ReadString();
                        __beaufortDescription__b__ = true;
                        break;
                    case 21:
                        __uvIndex__ = reader.ReadString();
                        __uvIndex__b__ = true;
                        break;
                    case 22:
                        __uvDesc__ = reader.ReadString();
                        __uvDesc__b__ = true;
                        break;
                    case 23:
                        __visibility__ = reader.ReadString();
                        __visibility__b__ = true;
                        break;
                    case 24:
                        __barometerPressure__ = reader.ReadString();
                        __barometerPressure__b__ = true;
                        break;
                    case 25:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 26:
                        __iconName__ = reader.ReadString();
                        __iconName__b__ = true;
                        break;
                    case 27:
                        __iconLink__ = reader.ReadString();
                        __iconLink__b__ = true;
                        break;
                    case 28:
                        __dayOfWeek__ = reader.ReadString();
                        __dayOfWeek__b__ = true;
                        break;
                    case 29:
                        __weekday__ = reader.ReadString();
                        __weekday__b__ = true;
                        break;
                    case 30:
                        __utcTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __utcTime__b__ = true;
                        break;
                    case 31:
                        __localTime__ = reader.ReadString();
                        __localTime__b__ = true;
                        break;
                    case 32:
                        __localTimeFormat__ = reader.ReadString();
                        __localTimeFormat__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Forecast1();
            if(__daylight__b__) ____result.daylight = __daylight__;
            if(__description__b__) ____result.description = __description__;
            if(__skyInfo__b__) ____result.skyInfo = __skyInfo__;
            if(__skyDescription__b__) ____result.skyDescription = __skyDescription__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__temperatureDesc__b__) ____result.temperatureDesc = __temperatureDesc__;
            if(__comfort__b__) ____result.comfort = __comfort__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__dewPoint__b__) ____result.dewPoint = __dewPoint__;
            if(__precipitationProbability__b__) ____result.precipitationProbability = __precipitationProbability__;
            if(__precipitationDesc__b__) ____result.precipitationDesc = __precipitationDesc__;
            if(__rainFall__b__) ____result.rainFall = __rainFall__;
            if(__snowFall__b__) ____result.snowFall = __snowFall__;
            if(__airInfo__b__) ____result.airInfo = __airInfo__;
            if(__airDescription__b__) ____result.airDescription = __airDescription__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windDesc__b__) ____result.windDesc = __windDesc__;
            if(__windDescShort__b__) ____result.windDescShort = __windDescShort__;
            if(__beaufortScale__b__) ____result.beaufortScale = __beaufortScale__;
            if(__beaufortDescription__b__) ____result.beaufortDescription = __beaufortDescription__;
            if(__uvIndex__b__) ____result.uvIndex = __uvIndex__;
            if(__uvDesc__b__) ____result.uvDesc = __uvDesc__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__barometerPressure__b__) ____result.barometerPressure = __barometerPressure__;
            if(__icon__b__) ____result.icon = __icon__;
            if(__iconName__b__) ____result.iconName = __iconName__;
            if(__iconLink__b__) ____result.iconLink = __iconLink__;
            if(__dayOfWeek__b__) ____result.dayOfWeek = __dayOfWeek__;
            if(__weekday__b__) ____result.weekday = __weekday__;
            if(__utcTime__b__) ____result.utcTime = __utcTime__;
            if(__localTime__b__) ____result.localTime = __localTime__;
            if(__localTimeFormat__b__) ____result.localTimeFormat = __localTimeFormat__;

            return ____result;
        }
    }


    public sealed class Forecastlocation1Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Forecastlocation1>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Forecastlocation1Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecast"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("distance"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("forecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("distance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Forecastlocation1 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecast1[]>().Serialize(ref writer, value.forecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.distance);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteInt32(value.timezone);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Forecastlocation1 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __forecast__ = default(global::SimpleWeather.Weather_API.HERE.Forecast1[]);
            var __forecast__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __distance__ = default(float);
            var __distance__b__ = false;
            var __timezone__ = default(int);
            var __timezone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecast1[]>().Deserialize(ref reader, formatterResolver);
                        __forecast__b__ = true;
                        break;
                    case 1:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 2:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 4:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 5:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 6:
                        __distance__ = reader.ReadSingle();
                        __distance__b__ = true;
                        break;
                    case 7:
                        __timezone__ = reader.ReadInt32();
                        __timezone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Forecastlocation1();
            if(__forecast__b__) ____result.forecast = __forecast__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__distance__b__) ____result.distance = __distance__;
            if(__timezone__b__) ____result.timezone = __timezone__;

            return ____result;
        }
    }


    public sealed class HourlyforecastsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Hourlyforecasts>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyforecastsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastLocation"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("forecastLocation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Hourlyforecasts value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecastlocation1>().Serialize(ref writer, value.forecastLocation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Hourlyforecasts Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __forecastLocation__ = default(global::SimpleWeather.Weather_API.HERE.Forecastlocation1);
            var __forecastLocation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __forecastLocation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Forecastlocation1>().Deserialize(ref reader, formatterResolver);
                        __forecastLocation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Hourlyforecasts();
            if(__forecastLocation__b__) ____result.forecastLocation = __forecastLocation__;

            return ____result;
        }
    }


    public sealed class Astronomy1Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Astronomy1>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Astronomy1Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonPhase"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonPhaseDesc"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconName"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("utcTime"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonPhase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonPhaseDesc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("utcTime"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Astronomy1 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.sunrise);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.sunset);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.moonrise);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.moonset);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.moonPhase);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.moonPhaseDesc);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.iconName);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.utcTime, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Astronomy1 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __sunrise__ = default(string);
            var __sunrise__b__ = false;
            var __sunset__ = default(string);
            var __sunset__b__ = false;
            var __moonrise__ = default(string);
            var __moonrise__b__ = false;
            var __moonset__ = default(string);
            var __moonset__b__ = false;
            var __moonPhase__ = default(float);
            var __moonPhase__b__ = false;
            var __moonPhaseDesc__ = default(string);
            var __moonPhaseDesc__b__ = false;
            var __iconName__ = default(string);
            var __iconName__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __utcTime__ = default(global::System.DateTimeOffset);
            var __utcTime__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __sunrise__ = reader.ReadString();
                        __sunrise__b__ = true;
                        break;
                    case 1:
                        __sunset__ = reader.ReadString();
                        __sunset__b__ = true;
                        break;
                    case 2:
                        __moonrise__ = reader.ReadString();
                        __moonrise__b__ = true;
                        break;
                    case 3:
                        __moonset__ = reader.ReadString();
                        __moonset__b__ = true;
                        break;
                    case 4:
                        __moonPhase__ = reader.ReadSingle();
                        __moonPhase__b__ = true;
                        break;
                    case 5:
                        __moonPhaseDesc__ = reader.ReadString();
                        __moonPhaseDesc__b__ = true;
                        break;
                    case 6:
                        __iconName__ = reader.ReadString();
                        __iconName__b__ = true;
                        break;
                    case 7:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 8:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 9:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 10:
                        __utcTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __utcTime__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Astronomy1();
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__moonrise__b__) ____result.moonrise = __moonrise__;
            if(__moonset__b__) ____result.moonset = __moonset__;
            if(__moonPhase__b__) ____result.moonPhase = __moonPhase__;
            if(__moonPhaseDesc__b__) ____result.moonPhaseDesc = __moonPhaseDesc__;
            if(__iconName__b__) ____result.iconName = __iconName__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__utcTime__b__) ____result.utcTime = __utcTime__;

            return ____result;
        }
    }


    public sealed class AstronomyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Astronomy>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AstronomyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("astronomy"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("astronomy"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Astronomy value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Astronomy1[]>().Serialize(ref writer, value.astronomy, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.city);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteInt32(value.timezone);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Astronomy Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __astronomy__ = default(global::SimpleWeather.Weather_API.HERE.Astronomy1[]);
            var __astronomy__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __city__ = default(string);
            var __city__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __timezone__ = default(int);
            var __timezone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __astronomy__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Astronomy1[]>().Deserialize(ref reader, formatterResolver);
                        __astronomy__b__ = true;
                        break;
                    case 1:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 2:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 3:
                        __city__ = reader.ReadString();
                        __city__b__ = true;
                        break;
                    case 4:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 5:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 6:
                        __timezone__ = reader.ReadInt32();
                        __timezone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Astronomy();
            if(__astronomy__b__) ____result.astronomy = __astronomy__;
            if(__country__b__) ____result.country = __country__;
            if(__state__b__) ____result.state = __state__;
            if(__city__b__) ____result.city = __city__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__timezone__b__) ____result.timezone = __timezone__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.HERE.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("observations"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dailyForecasts"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("hourlyForecasts"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nwsAlerts"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("astronomy"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feedCreation"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metric"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Type"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Message"), 9},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("observations"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dailyForecasts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("hourlyForecasts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nwsAlerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("astronomy"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feedCreation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metric"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Message"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.HERE.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Observations>().Serialize(ref writer, value.observations, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Dailyforecasts>().Serialize(ref writer, value.dailyForecasts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Hourlyforecasts>().Serialize(ref writer, value.hourlyForecasts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Alerts>().Serialize(ref writer, value.alerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Nwsalerts>().Serialize(ref writer, value.nwsAlerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Astronomy>().Serialize(ref writer, value.astronomy, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.feedCreation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteBoolean(value.metric);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.Type);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.Message, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.HERE.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __observations__ = default(global::SimpleWeather.Weather_API.HERE.Observations);
            var __observations__b__ = false;
            var __dailyForecasts__ = default(global::SimpleWeather.Weather_API.HERE.Dailyforecasts);
            var __dailyForecasts__b__ = false;
            var __hourlyForecasts__ = default(global::SimpleWeather.Weather_API.HERE.Hourlyforecasts);
            var __hourlyForecasts__b__ = false;
            var __alerts__ = default(global::SimpleWeather.Weather_API.HERE.Alerts);
            var __alerts__b__ = false;
            var __nwsAlerts__ = default(global::SimpleWeather.Weather_API.HERE.Nwsalerts);
            var __nwsAlerts__b__ = false;
            var __astronomy__ = default(global::SimpleWeather.Weather_API.HERE.Astronomy);
            var __astronomy__b__ = false;
            var __feedCreation__ = default(global::System.DateTimeOffset);
            var __feedCreation__b__ = false;
            var __metric__ = default(bool);
            var __metric__b__ = false;
            var __Type__ = default(string);
            var __Type__b__ = false;
            var __Message__ = default(string[]);
            var __Message__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __observations__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Observations>().Deserialize(ref reader, formatterResolver);
                        __observations__b__ = true;
                        break;
                    case 1:
                        __dailyForecasts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Dailyforecasts>().Deserialize(ref reader, formatterResolver);
                        __dailyForecasts__b__ = true;
                        break;
                    case 2:
                        __hourlyForecasts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Hourlyforecasts>().Deserialize(ref reader, formatterResolver);
                        __hourlyForecasts__b__ = true;
                        break;
                    case 3:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Alerts>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    case 4:
                        __nwsAlerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Nwsalerts>().Deserialize(ref reader, formatterResolver);
                        __nwsAlerts__b__ = true;
                        break;
                    case 5:
                        __astronomy__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.HERE.Astronomy>().Deserialize(ref reader, formatterResolver);
                        __astronomy__b__ = true;
                        break;
                    case 6:
                        __feedCreation__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __feedCreation__b__ = true;
                        break;
                    case 7:
                        __metric__ = reader.ReadBoolean();
                        __metric__b__ = true;
                        break;
                    case 8:
                        __Type__ = reader.ReadString();
                        __Type__b__ = true;
                        break;
                    case 9:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __Message__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.HERE.Rootobject();
            if(__observations__b__) ____result.observations = __observations__;
            if(__dailyForecasts__b__) ____result.dailyForecasts = __dailyForecasts__;
            if(__hourlyForecasts__b__) ____result.hourlyForecasts = __hourlyForecasts__;
            if(__alerts__b__) ____result.alerts = __alerts__;
            if(__nwsAlerts__b__) ____result.nwsAlerts = __nwsAlerts__;
            if(__astronomy__b__) ____result.astronomy = __astronomy__;
            if(__feedCreation__b__) ____result.feedCreation = __feedCreation__;
            if(__metric__b__) ____result.metric = __metric__;
            if(__Type__b__) ____result.Type = __Type__;
            if(__Message__b__) ____result.Message = __Message__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.MeteoFrance
{
    using System;
    using Utf8Json;


    public sealed class Timelaps_ItemsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Timelaps_ItemsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("begin_time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("color_id"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("begin_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("color_id"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.begin_time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.color_id);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __begin_time__ = default(long);
            var __begin_time__b__ = false;
            var __color_id__ = default(int);
            var __color_id__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __begin_time__ = reader.ReadInt64();
                        __begin_time__b__ = true;
                        break;
                    case 1:
                        __color_id__ = reader.ReadInt32();
                        __color_id__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items();
            if(__begin_time__b__) ____result.begin_time = __begin_time__;
            if(__color_id__b__) ____result.color_id = __color_id__;

            return ____result;
        }
    }


    public sealed class TimelapFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Timelap>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimelapFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timelaps_items"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("phenomenon_id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timelaps_items"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Timelap value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.phenomenon_id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items[]>().Serialize(ref writer, value.timelaps_items, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Timelap Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __phenomenon_id__ = default(int);
            var __phenomenon_id__b__ = false;
            var __timelaps_items__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items[]);
            var __timelaps_items__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __phenomenon_id__ = reader.ReadInt32();
                        __phenomenon_id__b__ = true;
                        break;
                    case 1:
                        __timelaps_items__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Timelaps_Items[]>().Deserialize(ref reader, formatterResolver);
                        __timelaps_items__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Timelap();
            if(__phenomenon_id__b__) ____result.phenomenon_id = __phenomenon_id__;
            if(__timelaps_items__b__) ____result.timelaps_items = __timelaps_items__;

            return ____result;
        }
    }


    public sealed class Phenomenons_ItemsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Phenomenons_ItemsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_max_color_id"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("phenomenon_id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("phenomenon_max_color_id"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.phenomenon_id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.phenomenon_max_color_id);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __phenomenon_id__ = default(int);
            var __phenomenon_id__b__ = false;
            var __phenomenon_max_color_id__ = default(int);
            var __phenomenon_max_color_id__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __phenomenon_id__ = reader.ReadInt32();
                        __phenomenon_id__b__ = true;
                        break;
                    case 1:
                        __phenomenon_max_color_id__ = reader.ReadInt32();
                        __phenomenon_max_color_id__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items();
            if(__phenomenon_id__b__) ____result.phenomenon_id = __phenomenon_id__;
            if(__phenomenon_max_color_id__b__) ____result.phenomenon_max_color_id = __phenomenon_max_color_id__;

            return ____result;
        }
    }


    public sealed class AdviceFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Advice>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AdviceFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_max_color_id"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("phenomenon_id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("phenomenon_max_color_id"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Advice value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.phenomenon_id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.phenomenon_max_color_id);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Advice Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __phenomenon_id__ = default(int);
            var __phenomenon_id__b__ = false;
            var __phenomenon_max_color_id__ = default(int);
            var __phenomenon_max_color_id__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __phenomenon_id__ = reader.ReadInt32();
                        __phenomenon_id__b__ = true;
                        break;
                    case 1:
                        __phenomenon_max_color_id__ = reader.ReadInt32();
                        __phenomenon_max_color_id__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Advice();
            if(__phenomenon_id__b__) ____result.phenomenon_id = __phenomenon_id__;
            if(__phenomenon_max_color_id__b__) ____result.phenomenon_max_color_id = __phenomenon_max_color_id__;

            return ____result;
        }
    }


    public sealed class ConsequenceFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Consequence>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ConsequenceFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenon_max_color_id"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("phenomenon_id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("phenomenon_max_color_id"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Consequence value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.phenomenon_id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.phenomenon_max_color_id);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Consequence Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __phenomenon_id__ = default(int);
            var __phenomenon_id__b__ = false;
            var __phenomenon_max_color_id__ = default(int);
            var __phenomenon_max_color_id__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __phenomenon_id__ = reader.ReadInt32();
                        __phenomenon_id__b__ = true;
                        break;
                    case 1:
                        __phenomenon_max_color_id__ = reader.ReadInt32();
                        __phenomenon_max_color_id__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Consequence();
            if(__phenomenon_id__b__) ____result.phenomenon_id = __phenomenon_id__;
            if(__phenomenon_max_color_id__b__) ____result.phenomenon_max_color_id = __phenomenon_max_color_id__;

            return ____result;
        }
    }


    public sealed class Text_Bloc_ItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Text_Bloc_ItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("title"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("title_html"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("text"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("title"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("title_html"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("text"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.title);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.title_html);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.text, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __title__ = default(string);
            var __title__b__ = false;
            var __title_html__ = default(string);
            var __title_html__b__ = false;
            var __text__ = default(string[]);
            var __text__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __title__ = reader.ReadString();
                        __title__b__ = true;
                        break;
                    case 1:
                        __title_html__ = reader.ReadString();
                        __title_html__b__ = true;
                        break;
                    case 2:
                        __text__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __text__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item();
            if(__title__b__) ____result.title = __title__;
            if(__title_html__b__) ____result.title_html = __title_html__;
            if(__text__b__) ____result.text = __text__;

            return ____result;
        }
    }


    public sealed class CommentsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Comments>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CommentsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("begin_time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("end_time"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("text_bloc_item"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("begin_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("end_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("text_bloc_item"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Comments value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.begin_time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.end_time);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item[]>().Serialize(ref writer, value.text_bloc_item, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Comments Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __begin_time__ = default(long);
            var __begin_time__b__ = false;
            var __end_time__ = default(long);
            var __end_time__b__ = false;
            var __text_bloc_item__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item[]);
            var __text_bloc_item__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __begin_time__ = reader.ReadInt64();
                        __begin_time__b__ = true;
                        break;
                    case 1:
                        __end_time__ = reader.ReadInt64();
                        __end_time__b__ = true;
                        break;
                    case 2:
                        __text_bloc_item__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Text_Bloc_Item[]>().Deserialize(ref reader, formatterResolver);
                        __text_bloc_item__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Comments();
            if(__begin_time__b__) ____result.begin_time = __begin_time__;
            if(__end_time__b__) ____result.end_time = __end_time__;
            if(__text_bloc_item__b__) ____result.text_bloc_item = __text_bloc_item__;

            return ____result;
        }
    }


    public sealed class AlertsRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.AlertsRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertsRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("update_time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("end_validity_time"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("domain_id"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("color_max"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timelaps"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("phenomenons_items"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("advices"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("consequences"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("comments"), 8},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("update_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("end_validity_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("domain_id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("color_max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timelaps"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("phenomenons_items"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("advices"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("consequences"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("comments"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.AlertsRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.update_time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.end_validity_time);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.domain_id);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt32(value.color_max);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Timelap[]>().Serialize(ref writer, value.timelaps, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items[]>().Serialize(ref writer, value.phenomenons_items, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Advice[]>().Serialize(ref writer, value.advices, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Consequence[]>().Serialize(ref writer, value.consequences, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Comments>().Serialize(ref writer, value.comments, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.AlertsRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __update_time__ = default(long);
            var __update_time__b__ = false;
            var __end_validity_time__ = default(long);
            var __end_validity_time__b__ = false;
            var __domain_id__ = default(string);
            var __domain_id__b__ = false;
            var __color_max__ = default(int);
            var __color_max__b__ = false;
            var __timelaps__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Timelap[]);
            var __timelaps__b__ = false;
            var __phenomenons_items__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items[]);
            var __phenomenons_items__b__ = false;
            var __advices__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Advice[]);
            var __advices__b__ = false;
            var __consequences__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Consequence[]);
            var __consequences__b__ = false;
            var __comments__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Comments);
            var __comments__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __update_time__ = reader.ReadInt64();
                        __update_time__b__ = true;
                        break;
                    case 1:
                        __end_validity_time__ = reader.ReadInt64();
                        __end_validity_time__b__ = true;
                        break;
                    case 2:
                        __domain_id__ = reader.ReadString();
                        __domain_id__b__ = true;
                        break;
                    case 3:
                        __color_max__ = reader.ReadInt32();
                        __color_max__b__ = true;
                        break;
                    case 4:
                        __timelaps__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Timelap[]>().Deserialize(ref reader, formatterResolver);
                        __timelaps__b__ = true;
                        break;
                    case 5:
                        __phenomenons_items__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Phenomenons_Items[]>().Deserialize(ref reader, formatterResolver);
                        __phenomenons_items__b__ = true;
                        break;
                    case 6:
                        __advices__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Advice[]>().Deserialize(ref reader, formatterResolver);
                        __advices__b__ = true;
                        break;
                    case 7:
                        __consequences__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Consequence[]>().Deserialize(ref reader, formatterResolver);
                        __consequences__b__ = true;
                        break;
                    case 8:
                        __comments__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Comments>().Deserialize(ref reader, formatterResolver);
                        __comments__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.AlertsRootobject();
            if(__update_time__b__) ____result.update_time = __update_time__;
            if(__end_validity_time__b__) ____result.end_validity_time = __end_validity_time__;
            if(__domain_id__b__) ____result.domain_id = __domain_id__;
            if(__color_max__b__) ____result.color_max = __color_max__;
            if(__timelaps__b__) ____result.timelaps = __timelaps__;
            if(__phenomenons_items__b__) ____result.phenomenons_items = __phenomenons_items__;
            if(__advices__b__) ____result.advices = __advices__;
            if(__consequences__b__) ____result.consequences = __consequences__;
            if(__comments__b__) ____result.comments = __comments__;

            return ____result;
        }
    }


    public sealed class CurrentsPositionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentsPositionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.timezone);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 1:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 2:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition();
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__timezone__b__) ____result.timezone = __timezone__;

            return ____result;
        }
    }


    public sealed class WindFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Wind>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WindFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("speed"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gust"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("direction"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("direction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Wind value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.speed, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.gust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.direction, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.icon);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Wind Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __speed__ = default(float?);
            var __speed__b__ = false;
            var __gust__ = default(float?);
            var __gust__b__ = false;
            var __direction__ = default(int?);
            var __direction__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __speed__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __speed__b__ = true;
                        break;
                    case 1:
                        __gust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __gust__b__ = true;
                        break;
                    case 2:
                        __direction__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __direction__b__ = true;
                        break;
                    case 3:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Wind();
            if(__speed__b__) ____result.speed = __speed__;
            if(__gust__b__) ____result.gust = __gust__;
            if(__direction__b__) ____result.direction = __direction__;
            if(__icon__b__) ____result.icon = __icon__;

            return ____result;
        }
    }


    public sealed class WeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Weather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("desc"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("desc"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Weather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.desc);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Weather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __icon__ = default(string);
            var __icon__b__ = false;
            var __desc__ = default(string);
            var __desc__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 1:
                        __desc__ = reader.ReadString();
                        __desc__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Weather();
            if(__icon__b__) ____result.icon = __icon__;
            if(__desc__b__) ____result.desc = __desc__;

            return ____result;
        }
    }


    public sealed class ObservationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Observation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ObservationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("T"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("T"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Observation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.T, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Wind>().Serialize(ref writer, value.wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Weather>().Serialize(ref writer, value.weather, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Observation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __T__ = default(float?);
            var __T__b__ = false;
            var __wind__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Wind);
            var __wind__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Weather);
            var __weather__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __T__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __T__b__ = true;
                        break;
                    case 1:
                        __wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Wind>().Deserialize(ref reader, formatterResolver);
                        __wind__b__ = true;
                        break;
                    case 2:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Weather>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Observation();
            if(__T__b__) ____result.T = __T__;
            if(__wind__b__) ____result.wind = __wind__;
            if(__weather__b__) ____result.weather = __weather__;

            return ____result;
        }
    }


    public sealed class CurrentsRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.CurrentsRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentsRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("position"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("updated_on"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("observation"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("position"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("updated_on"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("observation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.CurrentsRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition>().Serialize(ref writer, value.position, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.updated_on);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Observation>().Serialize(ref writer, value.observation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.CurrentsRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __position__ = default(global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition);
            var __position__b__ = false;
            var __updated_on__ = default(long);
            var __updated_on__b__ = false;
            var __observation__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Observation);
            var __observation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __position__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.CurrentsPosition>().Deserialize(ref reader, formatterResolver);
                        __position__b__ = true;
                        break;
                    case 1:
                        __updated_on__ = reader.ReadInt64();
                        __updated_on__b__ = true;
                        break;
                    case 2:
                        __observation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Observation>().Deserialize(ref reader, formatterResolver);
                        __observation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.CurrentsRootobject();
            if(__position__b__) ____result.position = __position__;
            if(__updated_on__b__) ____result.updated_on = __updated_on__;
            if(__observation__b__) ____result.observation = __observation__;

            return ____result;
        }
    }


    public sealed class PositionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Position>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PositionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alti"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dept"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain_product_available"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("insee"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("bulletin_cote"), 9},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alti"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dept"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain_product_available"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("insee"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("bulletin_cote"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Position value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.alti);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.dept);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteInt32(value.rain_product_available);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.insee);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteInt32(value.bulletin_cote);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Position Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __alti__ = default(int);
            var __alti__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __dept__ = default(string);
            var __dept__b__ = false;
            var __rain_product_available__ = default(int);
            var __rain_product_available__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __insee__ = default(string);
            var __insee__b__ = false;
            var __bulletin_cote__ = default(int);
            var __bulletin_cote__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 1:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 2:
                        __alti__ = reader.ReadInt32();
                        __alti__b__ = true;
                        break;
                    case 3:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 4:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 5:
                        __dept__ = reader.ReadString();
                        __dept__b__ = true;
                        break;
                    case 6:
                        __rain_product_available__ = reader.ReadInt32();
                        __rain_product_available__b__ = true;
                        break;
                    case 7:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 8:
                        __insee__ = reader.ReadString();
                        __insee__b__ = true;
                        break;
                    case 9:
                        __bulletin_cote__ = reader.ReadInt32();
                        __bulletin_cote__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Position();
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__alti__b__) ____result.alti = __alti__;
            if(__name__b__) ____result.name = __name__;
            if(__country__b__) ____result.country = __country__;
            if(__dept__b__) ____result.dept = __dept__;
            if(__rain_product_available__b__) ____result.rain_product_available = __rain_product_available__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__insee__b__) ____result.insee = __insee__;
            if(__bulletin_cote__b__) ____result.bulletin_cote = __bulletin_cote__;

            return ____result;
        }
    }


    public sealed class TFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.T>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sea"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sea"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.T value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.min, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.max, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.sea, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.T Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __min__ = default(float?);
            var __min__b__ = false;
            var __max__ = default(float?);
            var __max__b__ = false;
            var __sea__ = default(float?);
            var __sea__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __min__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __min__b__ = true;
                        break;
                    case 1:
                        __max__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __max__b__ = true;
                        break;
                    case 2:
                        __sea__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __sea__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.T();
            if(__min__b__) ____result.min = __min__;
            if(__max__b__) ____result.max = __max__;
            if(__sea__b__) ____result.sea = __sea__;

            return ____result;
        }
    }


    public sealed class HumidityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Humidity>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HumidityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Humidity value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.min, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.max, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Humidity Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __min__ = default(int?);
            var __min__b__ = false;
            var __max__ = default(int?);
            var __max__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __min__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __min__b__ = true;
                        break;
                    case 1:
                        __max__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __max__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Humidity();
            if(__min__b__) ____result.min = __min__;
            if(__max__b__) ____result.max = __max__;

            return ____result;
        }
    }


    public sealed class PrecipitationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Precipitation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PrecipitationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("24h"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("24h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Precipitation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._24h, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Precipitation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___24h__ = default(float?);
            var ___24h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___24h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___24h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Precipitation();
            if(___24h__b__) ____result._24h = ___24h__;

            return ____result;
        }
    }


    public sealed class Weather12hFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Weather12h>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Weather12hFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("desc"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("desc"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Weather12h value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.desc);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Weather12h Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __icon__ = default(string);
            var __icon__b__ = false;
            var __desc__ = default(string);
            var __desc__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 1:
                        __desc__ = reader.ReadString();
                        __desc__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Weather12h();
            if(__icon__b__) ____result.icon = __icon__;
            if(__desc__b__) ____result.desc = __desc__;

            return ____result;
        }
    }


    public sealed class SunFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Sun>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SunFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rise"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("set"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("rise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("set"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Sun value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.rise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.set, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Sun Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __rise__ = default(long?);
            var __rise__b__ = false;
            var __set__ = default(long?);
            var __set__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __rise__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __rise__b__ = true;
                        break;
                    case 1:
                        __set__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __set__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Sun();
            if(__rise__b__) ____result.rise = __rise__;
            if(__set__b__) ____result.set = __set__;

            return ____result;
        }
    }


    public sealed class Daily_ForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Daily_ForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("T"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather12H"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sun"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("T"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather12H"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sun"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.T>().Serialize(ref writer, value.T, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Humidity>().Serialize(ref writer, value.humidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Precipitation>().Serialize(ref writer, value.precipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.uv, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Weather12h>().Serialize(ref writer, value.weather12H, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Sun>().Serialize(ref writer, value.sun, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __T__ = default(global::SimpleWeather.Weather_API.MeteoFrance.T);
            var __T__b__ = false;
            var __humidity__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Humidity);
            var __humidity__b__ = false;
            var __precipitation__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Precipitation);
            var __precipitation__b__ = false;
            var __uv__ = default(float?);
            var __uv__b__ = false;
            var __weather12H__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Weather12h);
            var __weather12H__b__ = false;
            var __sun__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Sun);
            var __sun__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __T__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.T>().Deserialize(ref reader, formatterResolver);
                        __T__b__ = true;
                        break;
                    case 2:
                        __humidity__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Humidity>().Deserialize(ref reader, formatterResolver);
                        __humidity__b__ = true;
                        break;
                    case 3:
                        __precipitation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Precipitation>().Deserialize(ref reader, formatterResolver);
                        __precipitation__b__ = true;
                        break;
                    case 4:
                        __uv__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __uv__b__ = true;
                        break;
                    case 5:
                        __weather12H__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Weather12h>().Deserialize(ref reader, formatterResolver);
                        __weather12H__b__ = true;
                        break;
                    case 6:
                        __sun__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Sun>().Deserialize(ref reader, formatterResolver);
                        __sun__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast();
            if(__dt__b__) ____result.dt = __dt__;
            if(__T__b__) ____result.T = __T__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__precipitation__b__) ____result.precipitation = __precipitation__;
            if(__uv__b__) ____result.uv = __uv__;
            if(__weather12H__b__) ____result.weather12H = __weather12H__;
            if(__sun__b__) ____result.sun = __sun__;

            return ____result;
        }
    }


    public sealed class T1Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.T1>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public T1Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("value"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windchill"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("value"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windchill"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.T1 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.value, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.windchill, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.T1 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __value__ = default(float?);
            var __value__b__ = false;
            var __windchill__ = default(float?);
            var __windchill__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __value__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __value__b__ = true;
                        break;
                    case 1:
                        __windchill__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __windchill__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.T1();
            if(__value__b__) ____result.value = __value__;
            if(__windchill__b__) ____result.windchill = __windchill__;

            return ____result;
        }
    }


    public sealed class RainFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Rain>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RainFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("1h"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("3h"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("6h"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("1h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("3h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("6h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Rain value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._1h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._3h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._6h, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Rain Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___1h__ = default(float?);
            var ___1h__b__ = false;
            var ___3h__ = default(float?);
            var ___3h__b__ = false;
            var ___6h__ = default(float?);
            var ___6h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___1h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___1h__b__ = true;
                        break;
                    case 1:
                        ___3h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___3h__b__ = true;
                        break;
                    case 2:
                        ___6h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___6h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Rain();
            if(___1h__b__) ____result._1h = ___1h__;
            if(___3h__b__) ____result._3h = ___3h__;
            if(___6h__b__) ____result._6h = ___6h__;

            return ____result;
        }
    }


    public sealed class SnowFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Snow>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SnowFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("1h"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("3h"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("6h"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("1h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("3h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("6h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Snow value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._1h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._3h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._6h, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Snow Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___1h__ = default(float?);
            var ___1h__b__ = false;
            var ___3h__ = default(float?);
            var ___3h__b__ = false;
            var ___6h__ = default(float?);
            var ___6h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___1h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___1h__b__ = true;
                        break;
                    case 1:
                        ___3h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___3h__b__ = true;
                        break;
                    case 2:
                        ___6h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___6h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Snow();
            if(___1h__b__) ____result._1h = ___1h__;
            if(___3h__b__) ____result._3h = ___3h__;
            if(___6h__b__) ____result._6h = ___6h__;

            return ____result;
        }
    }


    public sealed class ForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Forecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("T"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sea_level"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iso0"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rainsnowlimit"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("T"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sea_level"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iso0"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rainsnowlimit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Forecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.T1>().Serialize(ref writer, value.T, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.humidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.sea_level, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Wind>().Serialize(ref writer, value.wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Rain>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Snow>().Serialize(ref writer, value.snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteInt32(value.iso0);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.rainsnowlimit);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.clouds, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Weather>().Serialize(ref writer, value.weather, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Forecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __T__ = default(global::SimpleWeather.Weather_API.MeteoFrance.T1);
            var __T__b__ = false;
            var __humidity__ = default(int?);
            var __humidity__b__ = false;
            var __sea_level__ = default(float?);
            var __sea_level__b__ = false;
            var __wind__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Wind);
            var __wind__b__ = false;
            var __rain__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Rain);
            var __rain__b__ = false;
            var __snow__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Snow);
            var __snow__b__ = false;
            var __iso0__ = default(int);
            var __iso0__b__ = false;
            var __rainsnowlimit__ = default(string);
            var __rainsnowlimit__b__ = false;
            var __clouds__ = default(int?);
            var __clouds__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Weather);
            var __weather__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __T__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.T1>().Deserialize(ref reader, formatterResolver);
                        __T__b__ = true;
                        break;
                    case 2:
                        __humidity__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __humidity__b__ = true;
                        break;
                    case 3:
                        __sea_level__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __sea_level__b__ = true;
                        break;
                    case 4:
                        __wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Wind>().Deserialize(ref reader, formatterResolver);
                        __wind__b__ = true;
                        break;
                    case 5:
                        __rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Rain>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 6:
                        __snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Snow>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    case 7:
                        __iso0__ = reader.ReadInt32();
                        __iso0__b__ = true;
                        break;
                    case 8:
                        __rainsnowlimit__ = reader.ReadString();
                        __rainsnowlimit__b__ = true;
                        break;
                    case 9:
                        __clouds__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __clouds__b__ = true;
                        break;
                    case 10:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Weather>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Forecast();
            if(__dt__b__) ____result.dt = __dt__;
            if(__T__b__) ____result.T = __T__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__sea_level__b__) ____result.sea_level = __sea_level__;
            if(__wind__b__) ____result.wind = __wind__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__iso0__b__) ____result.iso0 = __iso0__;
            if(__rainsnowlimit__b__) ____result.rainsnowlimit = __rainsnowlimit__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__weather__b__) ____result.weather = __weather__;

            return ____result;
        }
    }


    public sealed class Probability_ForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Probability_ForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("freezing"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("freezing"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Rain>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Snow>().Serialize(ref writer, value.snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.freezing, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __rain__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Rain);
            var __rain__b__ = false;
            var __snow__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Snow);
            var __snow__b__ = false;
            var __freezing__ = default(int?);
            var __freezing__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Rain>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 2:
                        __snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Snow>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    case 3:
                        __freezing__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __freezing__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast();
            if(__dt__b__) ____result.dt = __dt__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__freezing__b__) ____result.freezing = __freezing__;

            return ____result;
        }
    }


    public sealed class ForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.MeteoFrance.ForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("position"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("updated_on"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily_forecast"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecast"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("probability_forecast"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("position"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("updated_on"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daily_forecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("probability_forecast"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.MeteoFrance.ForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Position>().Serialize(ref writer, value.position, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.updated_on);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast[]>().Serialize(ref writer, value.daily_forecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Forecast[]>().Serialize(ref writer, value.forecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast[]>().Serialize(ref writer, value.probability_forecast, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.MeteoFrance.ForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __position__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Position);
            var __position__b__ = false;
            var __updated_on__ = default(long);
            var __updated_on__b__ = false;
            var __daily_forecast__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast[]);
            var __daily_forecast__b__ = false;
            var __forecast__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Forecast[]);
            var __forecast__b__ = false;
            var __probability_forecast__ = default(global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast[]);
            var __probability_forecast__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __position__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Position>().Deserialize(ref reader, formatterResolver);
                        __position__b__ = true;
                        break;
                    case 1:
                        __updated_on__ = reader.ReadInt64();
                        __updated_on__b__ = true;
                        break;
                    case 2:
                        __daily_forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Daily_Forecast[]>().Deserialize(ref reader, formatterResolver);
                        __daily_forecast__b__ = true;
                        break;
                    case 3:
                        __forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Forecast[]>().Deserialize(ref reader, formatterResolver);
                        __forecast__b__ = true;
                        break;
                    case 4:
                        __probability_forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.MeteoFrance.Probability_Forecast[]>().Deserialize(ref reader, formatterResolver);
                        __probability_forecast__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.MeteoFrance.ForecastRootobject();
            if(__position__b__) ____result.position = __position__;
            if(__updated_on__b__) ____result.updated_on = __updated_on__;
            if(__daily_forecast__b__) ____result.daily_forecast = __daily_forecast__;
            if(__forecast__b__) ____result.forecast = __forecast__;
            if(__probability_forecast__b__) ____result.probability_forecast = __probability_forecast__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.Metno
{
    using System;
    using Utf8Json;


    public sealed class GeometryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Geometry>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GeometryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("coordinates"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("coordinates"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Geometry value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.coordinates, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Geometry Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __type__ = default(string);
            var __type__b__ = false;
            var __coordinates__ = default(float[]);
            var __coordinates__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 1:
                        __coordinates__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, formatterResolver);
                        __coordinates__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Geometry();
            if(__type__b__) ____result.type = __type__;
            if(__coordinates__b__) ____result.coordinates = __coordinates__;

            return ____result;
        }
    }


    public sealed class SunriseFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Sunrise>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SunriseFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("azimuth"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("azimuth"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Sunrise value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.azimuth);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Sunrise Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __azimuth__ = default(float);
            var __azimuth__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __azimuth__ = reader.ReadSingle();
                        __azimuth__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Sunrise();
            if(__time__b__) ____result.time = __time__;
            if(__azimuth__b__) ____result.azimuth = __azimuth__;

            return ____result;
        }
    }


    public sealed class SunsetFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Sunset>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SunsetFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("azimuth"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("azimuth"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Sunset value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.azimuth);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Sunset Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __azimuth__ = default(float);
            var __azimuth__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __azimuth__ = reader.ReadSingle();
                        __azimuth__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Sunset();
            if(__time__b__) ____result.time = __time__;
            if(__azimuth__b__) ____result.azimuth = __azimuth__;

            return ____result;
        }
    }


    public sealed class SolarnoonFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Solarnoon>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SolarnoonFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("disc_centre_elevation"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visible"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("disc_centre_elevation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visible"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Solarnoon value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.disc_centre_elevation);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteBoolean(value.visible);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Solarnoon Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __disc_centre_elevation__ = default(float);
            var __disc_centre_elevation__b__ = false;
            var __visible__ = default(bool);
            var __visible__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __disc_centre_elevation__ = reader.ReadSingle();
                        __disc_centre_elevation__b__ = true;
                        break;
                    case 2:
                        __visible__ = reader.ReadBoolean();
                        __visible__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Solarnoon();
            if(__time__b__) ____result.time = __time__;
            if(__disc_centre_elevation__b__) ____result.disc_centre_elevation = __disc_centre_elevation__;
            if(__visible__b__) ____result.visible = __visible__;

            return ____result;
        }
    }


    public sealed class SolarmidnightFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Solarmidnight>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SolarmidnightFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("disc_centre_elevation"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visible"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("disc_centre_elevation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visible"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Solarmidnight value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.disc_centre_elevation);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteBoolean(value.visible);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Solarmidnight Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __disc_centre_elevation__ = default(float);
            var __disc_centre_elevation__b__ = false;
            var __visible__ = default(bool);
            var __visible__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __disc_centre_elevation__ = reader.ReadSingle();
                        __disc_centre_elevation__b__ = true;
                        break;
                    case 2:
                        __visible__ = reader.ReadBoolean();
                        __visible__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Solarmidnight();
            if(__time__b__) ____result.time = __time__;
            if(__disc_centre_elevation__b__) ____result.disc_centre_elevation = __disc_centre_elevation__;
            if(__visible__b__) ____result.visible = __visible__;

            return ____result;
        }
    }


    public sealed class SunPropertiesFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.SunProperties>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SunPropertiesFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("body"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("solarnoon"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("solarmidnight"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("body"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("solarnoon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("solarmidnight"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.SunProperties value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.body);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Sunrise>().Serialize(ref writer, value.sunrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Sunset>().Serialize(ref writer, value.sunset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Solarnoon>().Serialize(ref writer, value.solarnoon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Solarmidnight>().Serialize(ref writer, value.solarmidnight, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.SunProperties Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __body__ = default(string);
            var __body__b__ = false;
            var __sunrise__ = default(global::SimpleWeather.Weather_API.Metno.Sunrise);
            var __sunrise__b__ = false;
            var __sunset__ = default(global::SimpleWeather.Weather_API.Metno.Sunset);
            var __sunset__b__ = false;
            var __solarnoon__ = default(global::SimpleWeather.Weather_API.Metno.Solarnoon);
            var __solarnoon__b__ = false;
            var __solarmidnight__ = default(global::SimpleWeather.Weather_API.Metno.Solarmidnight);
            var __solarmidnight__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __body__ = reader.ReadString();
                        __body__b__ = true;
                        break;
                    case 1:
                        __sunrise__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Sunrise>().Deserialize(ref reader, formatterResolver);
                        __sunrise__b__ = true;
                        break;
                    case 2:
                        __sunset__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Sunset>().Deserialize(ref reader, formatterResolver);
                        __sunset__b__ = true;
                        break;
                    case 3:
                        __solarnoon__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Solarnoon>().Deserialize(ref reader, formatterResolver);
                        __solarnoon__b__ = true;
                        break;
                    case 4:
                        __solarmidnight__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Solarmidnight>().Deserialize(ref reader, formatterResolver);
                        __solarmidnight__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.SunProperties();
            if(__body__b__) ____result.body = __body__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__solarnoon__b__) ____result.solarnoon = __solarnoon__;
            if(__solarmidnight__b__) ____result.solarmidnight = __solarmidnight__;

            return ____result;
        }
    }


    public sealed class SunRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.SunRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SunRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("copyright"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("licenseURL"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("geometry"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("properties"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("copyright"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("licenseURL"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("geometry"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("properties"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.SunRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.copyright);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.licenseURL);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Geometry>().Serialize(ref writer, value.geometry, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.SunProperties>().Serialize(ref writer, value.properties, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.SunRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __copyright__ = default(string);
            var __copyright__b__ = false;
            var __licenseURL__ = default(string);
            var __licenseURL__b__ = false;
            var __type__ = default(string);
            var __type__b__ = false;
            var __geometry__ = default(global::SimpleWeather.Weather_API.Metno.Geometry);
            var __geometry__b__ = false;
            var __properties__ = default(global::SimpleWeather.Weather_API.Metno.SunProperties);
            var __properties__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __copyright__ = reader.ReadString();
                        __copyright__b__ = true;
                        break;
                    case 1:
                        __licenseURL__ = reader.ReadString();
                        __licenseURL__b__ = true;
                        break;
                    case 2:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 3:
                        __geometry__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Geometry>().Deserialize(ref reader, formatterResolver);
                        __geometry__b__ = true;
                        break;
                    case 4:
                        __properties__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.SunProperties>().Deserialize(ref reader, formatterResolver);
                        __properties__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.SunRootobject();
            if(__copyright__b__) ____result.copyright = __copyright__;
            if(__licenseURL__b__) ____result.licenseURL = __licenseURL__;
            if(__type__b__) ____result.type = __type__;
            if(__geometry__b__) ____result.geometry = __geometry__;
            if(__properties__b__) ____result.properties = __properties__;

            return ____result;
        }
    }


    public sealed class WhenFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.When>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WhenFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("interval"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("interval"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.When value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset[]>().Serialize(ref writer, value.interval, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.When Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __interval__ = default(global::System.DateTimeOffset[]);
            var __interval__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __interval__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset[]>().Deserialize(ref reader, formatterResolver);
                        __interval__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.When();
            if(__interval__b__) ____result.interval = __interval__;

            return ____result;
        }
    }


    public sealed class MoonriseFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Moonrise>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MoonriseFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("azimuth"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("azimuth"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Moonrise value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.azimuth);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Moonrise Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __azimuth__ = default(float);
            var __azimuth__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __azimuth__ = reader.ReadSingle();
                        __azimuth__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Moonrise();
            if(__time__b__) ____result.time = __time__;
            if(__azimuth__b__) ____result.azimuth = __azimuth__;

            return ____result;
        }
    }


    public sealed class MoonsetFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Moonset>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MoonsetFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("azimuth"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("azimuth"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Moonset value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.azimuth);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Moonset Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __azimuth__ = default(float);
            var __azimuth__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __azimuth__ = reader.ReadSingle();
                        __azimuth__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Moonset();
            if(__time__b__) ____result.time = __time__;
            if(__azimuth__b__) ____result.azimuth = __azimuth__;

            return ____result;
        }
    }


    public sealed class High_MoonFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.High_Moon>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public High_MoonFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("disc_centre_elevation"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visible"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("disc_centre_elevation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visible"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.High_Moon value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.disc_centre_elevation);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteBoolean(value.visible);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.High_Moon Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __disc_centre_elevation__ = default(float);
            var __disc_centre_elevation__b__ = false;
            var __visible__ = default(bool);
            var __visible__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __disc_centre_elevation__ = reader.ReadSingle();
                        __disc_centre_elevation__b__ = true;
                        break;
                    case 2:
                        __visible__ = reader.ReadBoolean();
                        __visible__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.High_Moon();
            if(__time__b__) ____result.time = __time__;
            if(__disc_centre_elevation__b__) ____result.disc_centre_elevation = __disc_centre_elevation__;
            if(__visible__b__) ____result.visible = __visible__;

            return ____result;
        }
    }


    public sealed class Low_MoonFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Low_Moon>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Low_MoonFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("disc_centre_elevation"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visible"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("disc_centre_elevation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visible"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Low_Moon value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.disc_centre_elevation);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteBoolean(value.visible);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Low_Moon Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(string);
            var __time__b__ = false;
            var __disc_centre_elevation__ = default(float);
            var __disc_centre_elevation__b__ = false;
            var __visible__ = default(bool);
            var __visible__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 1:
                        __disc_centre_elevation__ = reader.ReadSingle();
                        __disc_centre_elevation__b__ = true;
                        break;
                    case 2:
                        __visible__ = reader.ReadBoolean();
                        __visible__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Low_Moon();
            if(__time__b__) ____result.time = __time__;
            if(__disc_centre_elevation__b__) ____result.disc_centre_elevation = __disc_centre_elevation__;
            if(__visible__b__) ____result.visible = __visible__;

            return ____result;
        }
    }


    public sealed class MoonPropertiesFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.MoonProperties>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MoonPropertiesFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("body"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("high_moon"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("low_moon"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonphase"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("body"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("high_moon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("low_moon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonphase"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.MoonProperties value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.body);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Moonrise>().Serialize(ref writer, value.moonrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Moonset>().Serialize(ref writer, value.moonset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.High_Moon>().Serialize(ref writer, value.high_moon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Low_Moon>().Serialize(ref writer, value.low_moon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.moonphase);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.MoonProperties Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __body__ = default(string);
            var __body__b__ = false;
            var __moonrise__ = default(global::SimpleWeather.Weather_API.Metno.Moonrise);
            var __moonrise__b__ = false;
            var __moonset__ = default(global::SimpleWeather.Weather_API.Metno.Moonset);
            var __moonset__b__ = false;
            var __high_moon__ = default(global::SimpleWeather.Weather_API.Metno.High_Moon);
            var __high_moon__b__ = false;
            var __low_moon__ = default(global::SimpleWeather.Weather_API.Metno.Low_Moon);
            var __low_moon__b__ = false;
            var __moonphase__ = default(float);
            var __moonphase__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __body__ = reader.ReadString();
                        __body__b__ = true;
                        break;
                    case 1:
                        __moonrise__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Moonrise>().Deserialize(ref reader, formatterResolver);
                        __moonrise__b__ = true;
                        break;
                    case 2:
                        __moonset__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Moonset>().Deserialize(ref reader, formatterResolver);
                        __moonset__b__ = true;
                        break;
                    case 3:
                        __high_moon__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.High_Moon>().Deserialize(ref reader, formatterResolver);
                        __high_moon__b__ = true;
                        break;
                    case 4:
                        __low_moon__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Low_Moon>().Deserialize(ref reader, formatterResolver);
                        __low_moon__b__ = true;
                        break;
                    case 5:
                        __moonphase__ = reader.ReadSingle();
                        __moonphase__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.MoonProperties();
            if(__body__b__) ____result.body = __body__;
            if(__moonrise__b__) ____result.moonrise = __moonrise__;
            if(__moonset__b__) ____result.moonset = __moonset__;
            if(__high_moon__b__) ____result.high_moon = __high_moon__;
            if(__low_moon__b__) ____result.low_moon = __low_moon__;
            if(__moonphase__b__) ____result.moonphase = __moonphase__;

            return ____result;
        }
    }


    public sealed class MoonRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.MoonRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MoonRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("copyright"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("licenseURL"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("geometry"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("when"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("properties"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("copyright"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("licenseURL"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("geometry"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("when"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("properties"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.MoonRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.copyright);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.licenseURL);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Geometry>().Serialize(ref writer, value.geometry, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.When>().Serialize(ref writer, value.when, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.MoonProperties>().Serialize(ref writer, value.properties, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.MoonRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __copyright__ = default(string);
            var __copyright__b__ = false;
            var __licenseURL__ = default(string);
            var __licenseURL__b__ = false;
            var __type__ = default(string);
            var __type__b__ = false;
            var __geometry__ = default(global::SimpleWeather.Weather_API.Metno.Geometry);
            var __geometry__b__ = false;
            var __when__ = default(global::SimpleWeather.Weather_API.Metno.When);
            var __when__b__ = false;
            var __properties__ = default(global::SimpleWeather.Weather_API.Metno.MoonProperties);
            var __properties__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __copyright__ = reader.ReadString();
                        __copyright__b__ = true;
                        break;
                    case 1:
                        __licenseURL__ = reader.ReadString();
                        __licenseURL__b__ = true;
                        break;
                    case 2:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 3:
                        __geometry__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Geometry>().Deserialize(ref reader, formatterResolver);
                        __geometry__b__ = true;
                        break;
                    case 4:
                        __when__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.When>().Deserialize(ref reader, formatterResolver);
                        __when__b__ = true;
                        break;
                    case 5:
                        __properties__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.MoonProperties>().Deserialize(ref reader, formatterResolver);
                        __properties__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.MoonRootobject();
            if(__copyright__b__) ____result.copyright = __copyright__;
            if(__licenseURL__b__) ____result.licenseURL = __licenseURL__;
            if(__type__b__) ____result.type = __type__;
            if(__geometry__b__) ____result.geometry = __geometry__;
            if(__when__b__) ____result.when = __when__;
            if(__properties__b__) ____result.properties = __properties__;

            return ____result;
        }
    }


    public sealed class UnitsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Units>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public UnitsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_pressure_at_sea_level"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_temperature"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_temperature_max"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_temperature_min"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction_high"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction_low"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction_medium"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dew_point_temperature"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("fog_area_fraction"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("relative_humidity"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ultraviolet_index_clear_sky"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_from_direction"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_speed"), 14},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("air_pressure_at_sea_level"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("air_temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("air_temperature_max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("air_temperature_min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction_high"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction_low"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction_medium"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dew_point_temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("fog_area_fraction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation_amount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("relative_humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ultraviolet_index_clear_sky"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_from_direction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_speed"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Units value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.air_pressure_at_sea_level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.air_temperature);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.air_temperature_max);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.air_temperature_min);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.cloud_area_fraction);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.cloud_area_fraction_high);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.cloud_area_fraction_low);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.cloud_area_fraction_medium);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.dew_point_temperature);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.fog_area_fraction);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.precipitation_amount);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.relative_humidity);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.ultraviolet_index_clear_sky);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.wind_from_direction);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.wind_speed);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Units Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __air_pressure_at_sea_level__ = default(string);
            var __air_pressure_at_sea_level__b__ = false;
            var __air_temperature__ = default(string);
            var __air_temperature__b__ = false;
            var __air_temperature_max__ = default(string);
            var __air_temperature_max__b__ = false;
            var __air_temperature_min__ = default(string);
            var __air_temperature_min__b__ = false;
            var __cloud_area_fraction__ = default(string);
            var __cloud_area_fraction__b__ = false;
            var __cloud_area_fraction_high__ = default(string);
            var __cloud_area_fraction_high__b__ = false;
            var __cloud_area_fraction_low__ = default(string);
            var __cloud_area_fraction_low__b__ = false;
            var __cloud_area_fraction_medium__ = default(string);
            var __cloud_area_fraction_medium__b__ = false;
            var __dew_point_temperature__ = default(string);
            var __dew_point_temperature__b__ = false;
            var __fog_area_fraction__ = default(string);
            var __fog_area_fraction__b__ = false;
            var __precipitation_amount__ = default(string);
            var __precipitation_amount__b__ = false;
            var __relative_humidity__ = default(string);
            var __relative_humidity__b__ = false;
            var __ultraviolet_index_clear_sky__ = default(string);
            var __ultraviolet_index_clear_sky__b__ = false;
            var __wind_from_direction__ = default(string);
            var __wind_from_direction__b__ = false;
            var __wind_speed__ = default(string);
            var __wind_speed__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __air_pressure_at_sea_level__ = reader.ReadString();
                        __air_pressure_at_sea_level__b__ = true;
                        break;
                    case 1:
                        __air_temperature__ = reader.ReadString();
                        __air_temperature__b__ = true;
                        break;
                    case 2:
                        __air_temperature_max__ = reader.ReadString();
                        __air_temperature_max__b__ = true;
                        break;
                    case 3:
                        __air_temperature_min__ = reader.ReadString();
                        __air_temperature_min__b__ = true;
                        break;
                    case 4:
                        __cloud_area_fraction__ = reader.ReadString();
                        __cloud_area_fraction__b__ = true;
                        break;
                    case 5:
                        __cloud_area_fraction_high__ = reader.ReadString();
                        __cloud_area_fraction_high__b__ = true;
                        break;
                    case 6:
                        __cloud_area_fraction_low__ = reader.ReadString();
                        __cloud_area_fraction_low__b__ = true;
                        break;
                    case 7:
                        __cloud_area_fraction_medium__ = reader.ReadString();
                        __cloud_area_fraction_medium__b__ = true;
                        break;
                    case 8:
                        __dew_point_temperature__ = reader.ReadString();
                        __dew_point_temperature__b__ = true;
                        break;
                    case 9:
                        __fog_area_fraction__ = reader.ReadString();
                        __fog_area_fraction__b__ = true;
                        break;
                    case 10:
                        __precipitation_amount__ = reader.ReadString();
                        __precipitation_amount__b__ = true;
                        break;
                    case 11:
                        __relative_humidity__ = reader.ReadString();
                        __relative_humidity__b__ = true;
                        break;
                    case 12:
                        __ultraviolet_index_clear_sky__ = reader.ReadString();
                        __ultraviolet_index_clear_sky__b__ = true;
                        break;
                    case 13:
                        __wind_from_direction__ = reader.ReadString();
                        __wind_from_direction__b__ = true;
                        break;
                    case 14:
                        __wind_speed__ = reader.ReadString();
                        __wind_speed__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Units();
            if(__air_pressure_at_sea_level__b__) ____result.air_pressure_at_sea_level = __air_pressure_at_sea_level__;
            if(__air_temperature__b__) ____result.air_temperature = __air_temperature__;
            if(__air_temperature_max__b__) ____result.air_temperature_max = __air_temperature_max__;
            if(__air_temperature_min__b__) ____result.air_temperature_min = __air_temperature_min__;
            if(__cloud_area_fraction__b__) ____result.cloud_area_fraction = __cloud_area_fraction__;
            if(__cloud_area_fraction_high__b__) ____result.cloud_area_fraction_high = __cloud_area_fraction_high__;
            if(__cloud_area_fraction_low__b__) ____result.cloud_area_fraction_low = __cloud_area_fraction_low__;
            if(__cloud_area_fraction_medium__b__) ____result.cloud_area_fraction_medium = __cloud_area_fraction_medium__;
            if(__dew_point_temperature__b__) ____result.dew_point_temperature = __dew_point_temperature__;
            if(__fog_area_fraction__b__) ____result.fog_area_fraction = __fog_area_fraction__;
            if(__precipitation_amount__b__) ____result.precipitation_amount = __precipitation_amount__;
            if(__relative_humidity__b__) ____result.relative_humidity = __relative_humidity__;
            if(__ultraviolet_index_clear_sky__b__) ____result.ultraviolet_index_clear_sky = __ultraviolet_index_clear_sky__;
            if(__wind_from_direction__b__) ____result.wind_from_direction = __wind_from_direction__;
            if(__wind_speed__b__) ____result.wind_speed = __wind_speed__;

            return ____result;
        }
    }


    public sealed class MetaFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Meta>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MetaFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("updated_at"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("units"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("updated_at"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("units"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Meta value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.updated_at, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Units>().Serialize(ref writer, value.units, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Meta Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __updated_at__ = default(global::System.DateTime);
            var __updated_at__b__ = false;
            var __units__ = default(global::SimpleWeather.Weather_API.Metno.Units);
            var __units__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __updated_at__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __updated_at__b__ = true;
                        break;
                    case 1:
                        __units__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Units>().Deserialize(ref reader, formatterResolver);
                        __units__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Meta();
            if(__updated_at__b__) ____result.updated_at = __updated_at__;
            if(__units__b__) ____result.units = __units__;

            return ____result;
        }
    }


    public sealed class DetailsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Details>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DetailsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_pressure_at_sea_level"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_temperature"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction_high"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction_low"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_area_fraction_medium"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dew_point_temperature"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("fog_area_fraction"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("probability_of_precipitation"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("relative_humidity"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ultraviolet_index_clear_sky"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_from_direction"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_speed"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_speed_of_gust"), 13},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("air_pressure_at_sea_level"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("air_temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction_high"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction_low"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_area_fraction_medium"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dew_point_temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("fog_area_fraction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("probability_of_precipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("relative_humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ultraviolet_index_clear_sky"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_from_direction"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_speed_of_gust"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Details value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.air_pressure_at_sea_level, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.air_temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloud_area_fraction, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloud_area_fraction_high, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloud_area_fraction_low, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloud_area_fraction_medium, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.dew_point_temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.fog_area_fraction, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.probability_of_precipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.relative_humidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.ultraviolet_index_clear_sky, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.wind_from_direction, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.wind_speed, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.wind_speed_of_gust, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Details Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __air_pressure_at_sea_level__ = default(float?);
            var __air_pressure_at_sea_level__b__ = false;
            var __air_temperature__ = default(float?);
            var __air_temperature__b__ = false;
            var __cloud_area_fraction__ = default(float?);
            var __cloud_area_fraction__b__ = false;
            var __cloud_area_fraction_high__ = default(float?);
            var __cloud_area_fraction_high__b__ = false;
            var __cloud_area_fraction_low__ = default(float?);
            var __cloud_area_fraction_low__b__ = false;
            var __cloud_area_fraction_medium__ = default(float?);
            var __cloud_area_fraction_medium__b__ = false;
            var __dew_point_temperature__ = default(float?);
            var __dew_point_temperature__b__ = false;
            var __fog_area_fraction__ = default(float?);
            var __fog_area_fraction__b__ = false;
            var __probability_of_precipitation__ = default(float?);
            var __probability_of_precipitation__b__ = false;
            var __relative_humidity__ = default(float?);
            var __relative_humidity__b__ = false;
            var __ultraviolet_index_clear_sky__ = default(float?);
            var __ultraviolet_index_clear_sky__b__ = false;
            var __wind_from_direction__ = default(float?);
            var __wind_from_direction__b__ = false;
            var __wind_speed__ = default(float?);
            var __wind_speed__b__ = false;
            var __wind_speed_of_gust__ = default(float?);
            var __wind_speed_of_gust__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __air_pressure_at_sea_level__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __air_pressure_at_sea_level__b__ = true;
                        break;
                    case 1:
                        __air_temperature__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __air_temperature__b__ = true;
                        break;
                    case 2:
                        __cloud_area_fraction__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloud_area_fraction__b__ = true;
                        break;
                    case 3:
                        __cloud_area_fraction_high__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloud_area_fraction_high__b__ = true;
                        break;
                    case 4:
                        __cloud_area_fraction_low__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloud_area_fraction_low__b__ = true;
                        break;
                    case 5:
                        __cloud_area_fraction_medium__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloud_area_fraction_medium__b__ = true;
                        break;
                    case 6:
                        __dew_point_temperature__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __dew_point_temperature__b__ = true;
                        break;
                    case 7:
                        __fog_area_fraction__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __fog_area_fraction__b__ = true;
                        break;
                    case 8:
                        __probability_of_precipitation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __probability_of_precipitation__b__ = true;
                        break;
                    case 9:
                        __relative_humidity__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __relative_humidity__b__ = true;
                        break;
                    case 10:
                        __ultraviolet_index_clear_sky__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __ultraviolet_index_clear_sky__b__ = true;
                        break;
                    case 11:
                        __wind_from_direction__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __wind_from_direction__b__ = true;
                        break;
                    case 12:
                        __wind_speed__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __wind_speed__b__ = true;
                        break;
                    case 13:
                        __wind_speed_of_gust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __wind_speed_of_gust__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Details();
            if(__air_pressure_at_sea_level__b__) ____result.air_pressure_at_sea_level = __air_pressure_at_sea_level__;
            if(__air_temperature__b__) ____result.air_temperature = __air_temperature__;
            if(__cloud_area_fraction__b__) ____result.cloud_area_fraction = __cloud_area_fraction__;
            if(__cloud_area_fraction_high__b__) ____result.cloud_area_fraction_high = __cloud_area_fraction_high__;
            if(__cloud_area_fraction_low__b__) ____result.cloud_area_fraction_low = __cloud_area_fraction_low__;
            if(__cloud_area_fraction_medium__b__) ____result.cloud_area_fraction_medium = __cloud_area_fraction_medium__;
            if(__dew_point_temperature__b__) ____result.dew_point_temperature = __dew_point_temperature__;
            if(__fog_area_fraction__b__) ____result.fog_area_fraction = __fog_area_fraction__;
            if(__probability_of_precipitation__b__) ____result.probability_of_precipitation = __probability_of_precipitation__;
            if(__relative_humidity__b__) ____result.relative_humidity = __relative_humidity__;
            if(__ultraviolet_index_clear_sky__b__) ____result.ultraviolet_index_clear_sky = __ultraviolet_index_clear_sky__;
            if(__wind_from_direction__b__) ____result.wind_from_direction = __wind_from_direction__;
            if(__wind_speed__b__) ____result.wind_speed = __wind_speed__;
            if(__wind_speed_of_gust__b__) ____result.wind_speed_of_gust = __wind_speed_of_gust__;

            return ____result;
        }
    }


    public sealed class InstantFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Instant>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public InstantFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("details"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("details"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Instant value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details>().Serialize(ref writer, value.details, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Instant Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __details__ = default(global::SimpleWeather.Weather_API.Metno.Details);
            var __details__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __details__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details>().Deserialize(ref reader, formatterResolver);
                        __details__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Instant();
            if(__details__b__) ____result.details = __details__;

            return ____result;
        }
    }


    public sealed class SummaryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Summary>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SummaryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("symbol_code"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("symbol_code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Summary value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.symbol_code);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Summary Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __symbol_code__ = default(string);
            var __symbol_code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __symbol_code__ = reader.ReadString();
                        __symbol_code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Summary();
            if(__symbol_code__b__) ____result.symbol_code = __symbol_code__;

            return ____result;
        }
    }


    public sealed class Details1Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Details1>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Details1Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("probability_of_precipitation"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("probability_of_precipitation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Details1 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.probability_of_precipitation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Details1 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __probability_of_precipitation__ = default(float?);
            var __probability_of_precipitation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __probability_of_precipitation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __probability_of_precipitation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Details1();
            if(__probability_of_precipitation__b__) ____result.probability_of_precipitation = __probability_of_precipitation__;

            return ____result;
        }
    }


    public sealed class Next_12_HoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Next_12_Hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Next_12_HoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("summary"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("details"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("summary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("details"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Next_12_Hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Summary>().Serialize(ref writer, value.summary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details1>().Serialize(ref writer, value.details, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Next_12_Hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __summary__ = default(global::SimpleWeather.Weather_API.Metno.Summary);
            var __summary__b__ = false;
            var __details__ = default(global::SimpleWeather.Weather_API.Metno.Details1);
            var __details__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __summary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Summary>().Deserialize(ref reader, formatterResolver);
                        __summary__b__ = true;
                        break;
                    case 1:
                        __details__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details1>().Deserialize(ref reader, formatterResolver);
                        __details__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Next_12_Hours();
            if(__summary__b__) ____result.summary = __summary__;
            if(__details__b__) ____result.details = __details__;

            return ____result;
        }
    }


    public sealed class Summary1Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Summary1>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Summary1Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("symbol_code"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("symbol_code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Summary1 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.symbol_code);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Summary1 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __symbol_code__ = default(string);
            var __symbol_code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __symbol_code__ = reader.ReadString();
                        __symbol_code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Summary1();
            if(__symbol_code__b__) ____result.symbol_code = __symbol_code__;

            return ____result;
        }
    }


    public sealed class Details2Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Details2>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Details2Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount_max"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount_min"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("probability_of_precipitation"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("probability_of_thunder"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("precipitation_amount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation_amount_max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation_amount_min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("probability_of_precipitation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("probability_of_thunder"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Details2 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitation_amount, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitation_amount_max, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitation_amount_min, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.probability_of_precipitation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.probability_of_thunder, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Details2 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __precipitation_amount__ = default(float?);
            var __precipitation_amount__b__ = false;
            var __precipitation_amount_max__ = default(float?);
            var __precipitation_amount_max__b__ = false;
            var __precipitation_amount_min__ = default(float?);
            var __precipitation_amount_min__b__ = false;
            var __probability_of_precipitation__ = default(float?);
            var __probability_of_precipitation__b__ = false;
            var __probability_of_thunder__ = default(float?);
            var __probability_of_thunder__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __precipitation_amount__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitation_amount__b__ = true;
                        break;
                    case 1:
                        __precipitation_amount_max__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitation_amount_max__b__ = true;
                        break;
                    case 2:
                        __precipitation_amount_min__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitation_amount_min__b__ = true;
                        break;
                    case 3:
                        __probability_of_precipitation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __probability_of_precipitation__b__ = true;
                        break;
                    case 4:
                        __probability_of_thunder__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __probability_of_thunder__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Details2();
            if(__precipitation_amount__b__) ____result.precipitation_amount = __precipitation_amount__;
            if(__precipitation_amount_max__b__) ____result.precipitation_amount_max = __precipitation_amount_max__;
            if(__precipitation_amount_min__b__) ____result.precipitation_amount_min = __precipitation_amount_min__;
            if(__probability_of_precipitation__b__) ____result.probability_of_precipitation = __probability_of_precipitation__;
            if(__probability_of_thunder__b__) ____result.probability_of_thunder = __probability_of_thunder__;

            return ____result;
        }
    }


    public sealed class Next_1_HoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Next_1_Hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Next_1_HoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("summary"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("details"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("summary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("details"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Next_1_Hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Summary1>().Serialize(ref writer, value.summary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details2>().Serialize(ref writer, value.details, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Next_1_Hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __summary__ = default(global::SimpleWeather.Weather_API.Metno.Summary1);
            var __summary__b__ = false;
            var __details__ = default(global::SimpleWeather.Weather_API.Metno.Details2);
            var __details__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __summary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Summary1>().Deserialize(ref reader, formatterResolver);
                        __summary__b__ = true;
                        break;
                    case 1:
                        __details__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details2>().Deserialize(ref reader, formatterResolver);
                        __details__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Next_1_Hours();
            if(__summary__b__) ____result.summary = __summary__;
            if(__details__b__) ____result.details = __details__;

            return ____result;
        }
    }


    public sealed class Summary2Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Summary2>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Summary2Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("symbol_code"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("symbol_code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Summary2 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.symbol_code);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Summary2 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __symbol_code__ = default(string);
            var __symbol_code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __symbol_code__ = reader.ReadString();
                        __symbol_code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Summary2();
            if(__symbol_code__b__) ____result.symbol_code = __symbol_code__;

            return ____result;
        }
    }


    public sealed class Details3Formatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Details3>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Details3Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_temperature_max"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_temperature_min"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount_max"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation_amount_min"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("probability_of_precipitation"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("air_temperature_max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("air_temperature_min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation_amount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation_amount_max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation_amount_min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("probability_of_precipitation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Details3 value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.air_temperature_max, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.air_temperature_min, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitation_amount, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitation_amount_max, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitation_amount_min, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.probability_of_precipitation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Details3 Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __air_temperature_max__ = default(float?);
            var __air_temperature_max__b__ = false;
            var __air_temperature_min__ = default(float?);
            var __air_temperature_min__b__ = false;
            var __precipitation_amount__ = default(float?);
            var __precipitation_amount__b__ = false;
            var __precipitation_amount_max__ = default(float?);
            var __precipitation_amount_max__b__ = false;
            var __precipitation_amount_min__ = default(float?);
            var __precipitation_amount_min__b__ = false;
            var __probability_of_precipitation__ = default(float?);
            var __probability_of_precipitation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __air_temperature_max__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __air_temperature_max__b__ = true;
                        break;
                    case 1:
                        __air_temperature_min__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __air_temperature_min__b__ = true;
                        break;
                    case 2:
                        __precipitation_amount__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitation_amount__b__ = true;
                        break;
                    case 3:
                        __precipitation_amount_max__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitation_amount_max__b__ = true;
                        break;
                    case 4:
                        __precipitation_amount_min__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitation_amount_min__b__ = true;
                        break;
                    case 5:
                        __probability_of_precipitation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __probability_of_precipitation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Details3();
            if(__air_temperature_max__b__) ____result.air_temperature_max = __air_temperature_max__;
            if(__air_temperature_min__b__) ____result.air_temperature_min = __air_temperature_min__;
            if(__precipitation_amount__b__) ____result.precipitation_amount = __precipitation_amount__;
            if(__precipitation_amount_max__b__) ____result.precipitation_amount_max = __precipitation_amount_max__;
            if(__precipitation_amount_min__b__) ____result.precipitation_amount_min = __precipitation_amount_min__;
            if(__probability_of_precipitation__b__) ____result.probability_of_precipitation = __probability_of_precipitation__;

            return ____result;
        }
    }


    public sealed class Next_6_HoursFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Next_6_Hours>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Next_6_HoursFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("summary"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("details"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("summary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("details"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Next_6_Hours value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Summary2>().Serialize(ref writer, value.summary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details3>().Serialize(ref writer, value.details, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Next_6_Hours Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __summary__ = default(global::SimpleWeather.Weather_API.Metno.Summary2);
            var __summary__b__ = false;
            var __details__ = default(global::SimpleWeather.Weather_API.Metno.Details3);
            var __details__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __summary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Summary2>().Deserialize(ref reader, formatterResolver);
                        __summary__b__ = true;
                        break;
                    case 1:
                        __details__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Details3>().Deserialize(ref reader, formatterResolver);
                        __details__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Next_6_Hours();
            if(__summary__b__) ____result.summary = __summary__;
            if(__details__b__) ____result.details = __details__;

            return ____result;
        }
    }


    public sealed class DataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Data>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("instant"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("next_12_hours"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("next_1_hours"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("next_6_hours"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("instant"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("next_12_hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("next_1_hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("next_6_hours"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Data value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Instant>().Serialize(ref writer, value.instant, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Next_12_Hours>().Serialize(ref writer, value.next_12_hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Next_1_Hours>().Serialize(ref writer, value.next_1_hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Next_6_Hours>().Serialize(ref writer, value.next_6_hours, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Data Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __instant__ = default(global::SimpleWeather.Weather_API.Metno.Instant);
            var __instant__b__ = false;
            var __next_12_hours__ = default(global::SimpleWeather.Weather_API.Metno.Next_12_Hours);
            var __next_12_hours__b__ = false;
            var __next_1_hours__ = default(global::SimpleWeather.Weather_API.Metno.Next_1_Hours);
            var __next_1_hours__b__ = false;
            var __next_6_hours__ = default(global::SimpleWeather.Weather_API.Metno.Next_6_Hours);
            var __next_6_hours__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __instant__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Instant>().Deserialize(ref reader, formatterResolver);
                        __instant__b__ = true;
                        break;
                    case 1:
                        __next_12_hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Next_12_Hours>().Deserialize(ref reader, formatterResolver);
                        __next_12_hours__b__ = true;
                        break;
                    case 2:
                        __next_1_hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Next_1_Hours>().Deserialize(ref reader, formatterResolver);
                        __next_1_hours__b__ = true;
                        break;
                    case 3:
                        __next_6_hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Next_6_Hours>().Deserialize(ref reader, formatterResolver);
                        __next_6_hours__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Data();
            if(__instant__b__) ____result.instant = __instant__;
            if(__next_12_hours__b__) ____result.next_12_hours = __next_12_hours__;
            if(__next_1_hours__b__) ____result.next_1_hours = __next_1_hours__;
            if(__next_6_hours__b__) ____result.next_6_hours = __next_6_hours__;

            return ____result;
        }
    }


    public sealed class TimeseryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Timesery>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimeseryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("data"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Timesery value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.time, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Data>().Serialize(ref writer, value.data, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Timesery Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(global::System.DateTime);
            var __time__b__ = false;
            var __data__ = default(global::SimpleWeather.Weather_API.Metno.Data);
            var __data__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __time__b__ = true;
                        break;
                    case 1:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Data>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Timesery();
            if(__time__b__) ____result.time = __time__;
            if(__data__b__) ____result.data = __data__;

            return ____result;
        }
    }


    public sealed class PropertiesFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Properties>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PropertiesFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("meta"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timeseries"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("meta"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timeseries"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Properties value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Meta>().Serialize(ref writer, value.meta, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Timesery[]>().Serialize(ref writer, value.timeseries, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Properties Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __meta__ = default(global::SimpleWeather.Weather_API.Metno.Meta);
            var __meta__b__ = false;
            var __timeseries__ = default(global::SimpleWeather.Weather_API.Metno.Timesery[]);
            var __timeseries__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __meta__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Meta>().Deserialize(ref reader, formatterResolver);
                        __meta__b__ = true;
                        break;
                    case 1:
                        __timeseries__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Timesery[]>().Deserialize(ref reader, formatterResolver);
                        __timeseries__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Properties();
            if(__meta__b__) ____result.meta = __meta__;
            if(__timeseries__b__) ____result.timeseries = __timeseries__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.Metno.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("type"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("geometry"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("properties"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("type"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("geometry"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("properties"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.Metno.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.type);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Geometry>().Serialize(ref writer, value.geometry, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Properties>().Serialize(ref writer, value.properties, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.Metno.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __type__ = default(string);
            var __type__b__ = false;
            var __geometry__ = default(global::SimpleWeather.Weather_API.Metno.Geometry);
            var __geometry__b__ = false;
            var __properties__ = default(global::SimpleWeather.Weather_API.Metno.Properties);
            var __properties__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __type__ = reader.ReadString();
                        __type__b__ = true;
                        break;
                    case 1:
                        __geometry__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Geometry>().Deserialize(ref reader, formatterResolver);
                        __geometry__b__ = true;
                        break;
                    case 2:
                        __properties__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.Metno.Properties>().Deserialize(ref reader, formatterResolver);
                        __properties__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.Metno.Rootobject();
            if(__type__b__) ____result.type = __type__;
            if(__geometry__b__) ____result.geometry = __geometry__;
            if(__properties__b__) ____result.properties = __properties__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS
{
    using System;
    using Utf8Json;


    public sealed class AlertGraphFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.AlertGraph>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertGraphFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sent"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("effective"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("onset"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expires"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("event"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("instruction"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("sent"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("effective"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("onset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expires"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("event"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("instruction"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.AlertGraph value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.sent, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.effective, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.onset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.expires, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.severity);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value._event);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.instruction);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.AlertGraph Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __sent__ = default(global::System.DateTimeOffset);
            var __sent__b__ = false;
            var __effective__ = default(global::System.DateTimeOffset);
            var __effective__b__ = false;
            var __onset__ = default(global::System.DateTimeOffset);
            var __onset__b__ = false;
            var __expires__ = default(global::System.DateTimeOffset);
            var __expires__b__ = false;
            var __severity__ = default(string);
            var __severity__b__ = false;
            var ___event__ = default(string);
            var ___event__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __instruction__ = default(string);
            var __instruction__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __sent__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __sent__b__ = true;
                        break;
                    case 1:
                        __effective__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __effective__b__ = true;
                        break;
                    case 2:
                        __onset__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __onset__b__ = true;
                        break;
                    case 3:
                        __expires__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __expires__b__ = true;
                        break;
                    case 4:
                        __severity__ = reader.ReadString();
                        __severity__b__ = true;
                        break;
                    case 5:
                        ___event__ = reader.ReadString();
                        ___event__b__ = true;
                        break;
                    case 6:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 7:
                        __instruction__ = reader.ReadString();
                        __instruction__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.AlertGraph();
            if(__sent__b__) ____result.sent = __sent__;
            if(__effective__b__) ____result.effective = __effective__;
            if(__onset__b__) ____result.onset = __onset__;
            if(__expires__b__) ____result.expires = __expires__;
            if(__severity__b__) ____result.severity = __severity__;
            if(___event__b__) ____result._event = ___event__;
            if(__description__b__) ____result.description = __description__;
            if(__instruction__b__) ____result.instruction = __instruction__;

            return ____result;
        }
    }


    public sealed class AlertRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.AlertRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("@graph"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("title"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("@graph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("title"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.AlertRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.AlertGraph[]>().Serialize(ref writer, value.graph, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.title);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.AlertRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __graph__ = default(global::SimpleWeather.Weather_API.NWS.AlertGraph[]);
            var __graph__b__ = false;
            var __title__ = default(string);
            var __title__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __graph__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.AlertGraph[]>().Deserialize(ref reader, formatterResolver);
                        __graph__b__ = true;
                        break;
                    case 1:
                        __title__ = reader.ReadString();
                        __title__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.AlertRootobject();
            if(__graph__b__) ____result.graph = __graph__;
            if(__title__b__) ____result.title = __title__;

            return ____result;
        }
    }


    internal sealed class SolCalcAstroProvider_AstroDataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.SolCalcAstroProvider.AstroData>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SolCalcAstroProvider_AstroDataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunriseUTC"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunsetUTC"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("sunriseUTC"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunsetUTC"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.SolCalcAstroProvider.AstroData value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.sunriseUTC, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.sunsetUTC, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.SolCalcAstroProvider.AstroData Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __sunriseUTC__ = default(global::System.DateTime);
            var __sunriseUTC__b__ = false;
            var __sunsetUTC__ = default(global::System.DateTime);
            var __sunsetUTC__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __sunriseUTC__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __sunriseUTC__b__ = true;
                        break;
                    case 1:
                        __sunsetUTC__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __sunsetUTC__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.SolCalcAstroProvider.AstroData();
            if(__sunriseUTC__b__) ____result.sunriseUTC = __sunriseUTC__;
            if(__sunsetUTC__b__) ____result.sunsetUTC = __sunsetUTC__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Observation
{
    using System;
    using Utf8Json;


    public sealed class LocationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Observation.Location>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LocationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("region"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("elevation"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wfo"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("areaDescription"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("radar"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("zone"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("county"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("firezone"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metar"), 11},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("region"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("elevation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wfo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("areaDescription"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("radar"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("zone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("county"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("firezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metar"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Observation.Location value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.region);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.elevation);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.wfo);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.areaDescription);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.radar);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.zone);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.county);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.firezone);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.metar);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Observation.Location Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __region__ = default(string);
            var __region__b__ = false;
            var __latitude__ = default(string);
            var __latitude__b__ = false;
            var __longitude__ = default(string);
            var __longitude__b__ = false;
            var __elevation__ = default(string);
            var __elevation__b__ = false;
            var __wfo__ = default(string);
            var __wfo__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __areaDescription__ = default(string);
            var __areaDescription__b__ = false;
            var __radar__ = default(string);
            var __radar__b__ = false;
            var __zone__ = default(string);
            var __zone__b__ = false;
            var __county__ = default(string);
            var __county__b__ = false;
            var __firezone__ = default(string);
            var __firezone__b__ = false;
            var __metar__ = default(string);
            var __metar__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __region__ = reader.ReadString();
                        __region__b__ = true;
                        break;
                    case 1:
                        __latitude__ = reader.ReadString();
                        __latitude__b__ = true;
                        break;
                    case 2:
                        __longitude__ = reader.ReadString();
                        __longitude__b__ = true;
                        break;
                    case 3:
                        __elevation__ = reader.ReadString();
                        __elevation__b__ = true;
                        break;
                    case 4:
                        __wfo__ = reader.ReadString();
                        __wfo__b__ = true;
                        break;
                    case 5:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 6:
                        __areaDescription__ = reader.ReadString();
                        __areaDescription__b__ = true;
                        break;
                    case 7:
                        __radar__ = reader.ReadString();
                        __radar__b__ = true;
                        break;
                    case 8:
                        __zone__ = reader.ReadString();
                        __zone__b__ = true;
                        break;
                    case 9:
                        __county__ = reader.ReadString();
                        __county__b__ = true;
                        break;
                    case 10:
                        __firezone__ = reader.ReadString();
                        __firezone__b__ = true;
                        break;
                    case 11:
                        __metar__ = reader.ReadString();
                        __metar__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Observation.Location();
            if(__region__b__) ____result.region = __region__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__elevation__b__) ____result.elevation = __elevation__;
            if(__wfo__b__) ____result.wfo = __wfo__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__areaDescription__b__) ____result.areaDescription = __areaDescription__;
            if(__radar__b__) ____result.radar = __radar__;
            if(__zone__b__) ____result.zone = __zone__;
            if(__county__b__) ____result.county = __county__;
            if(__firezone__b__) ____result.firezone = __firezone__;
            if(__metar__b__) ____result.metar = __metar__;

            return ____result;
        }
    }


    public sealed class TimeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Observation.Time>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("layoutKey"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startPeriodName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startValidTime"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("tempLabel"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("layoutKey"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("startPeriodName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("startValidTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("tempLabel"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Observation.Time value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.layoutKey);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.startPeriodName, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset[]>().Serialize(ref writer, value.startValidTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.tempLabel, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Observation.Time Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __layoutKey__ = default(string);
            var __layoutKey__b__ = false;
            var __startPeriodName__ = default(string[]);
            var __startPeriodName__b__ = false;
            var __startValidTime__ = default(global::System.DateTimeOffset[]);
            var __startValidTime__b__ = false;
            var __tempLabel__ = default(string[]);
            var __tempLabel__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __layoutKey__ = reader.ReadString();
                        __layoutKey__b__ = true;
                        break;
                    case 1:
                        __startPeriodName__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __startPeriodName__b__ = true;
                        break;
                    case 2:
                        __startValidTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset[]>().Deserialize(ref reader, formatterResolver);
                        __startValidTime__b__ = true;
                        break;
                    case 3:
                        __tempLabel__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __tempLabel__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Observation.Time();
            if(__layoutKey__b__) ____result.layoutKey = __layoutKey__;
            if(__startPeriodName__b__) ____result.startPeriodName = __startPeriodName__;
            if(__startValidTime__b__) ____result.startValidTime = __startValidTime__;
            if(__tempLabel__b__) ____result.tempLabel = __tempLabel__;

            return ____result;
        }
    }


    public sealed class DataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Observation.Data>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconLink"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("hazard"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("hazardUrl"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("text"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("hazard"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("hazardUrl"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("text"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Observation.Data value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.pop, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.iconLink, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.hazard, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.hazardUrl, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.text, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Observation.Data Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __temperature__ = default(string[]);
            var __temperature__b__ = false;
            var __pop__ = default(string[]);
            var __pop__b__ = false;
            var __weather__ = default(string[]);
            var __weather__b__ = false;
            var __iconLink__ = default(string[]);
            var __iconLink__b__ = false;
            var __hazard__ = default(string[]);
            var __hazard__b__ = false;
            var __hazardUrl__ = default(string[]);
            var __hazardUrl__b__ = false;
            var __text__ = default(string[]);
            var __text__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __temperature__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __temperature__b__ = true;
                        break;
                    case 1:
                        __pop__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __pop__b__ = true;
                        break;
                    case 2:
                        __weather__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 3:
                        __iconLink__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __iconLink__b__ = true;
                        break;
                    case 4:
                        __hazard__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __hazard__b__ = true;
                        break;
                    case 5:
                        __hazardUrl__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __hazardUrl__b__ = true;
                        break;
                    case 6:
                        __text__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __text__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Observation.Data();
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__weather__b__) ____result.weather = __weather__;
            if(__iconLink__b__) ____result.iconLink = __iconLink__;
            if(__hazard__b__) ____result.hazard = __hazard__;
            if(__hazardUrl__b__) ____result.hazardUrl = __hazardUrl__;
            if(__text__b__) ____result.text = __text__;

            return ____result;
        }
    }


    public sealed class CurrentobservationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentobservationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("elev"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Date"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Temp"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Dewp"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Relh"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Winds"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Windd"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Gust"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Weather"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Weatherimage"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Visibility"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Altimeter"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("SLP"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("WindChill"), 19},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("elev"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Date"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Dewp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Relh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Winds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Windd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Gust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Weatherimage"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Altimeter"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("SLP"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("WindChill"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.elev);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.Date);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.Temp);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.Dewp);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.Relh);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.Winds);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.Windd);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.Gust);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.Weather);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.Weatherimage);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.Visibility);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteString(value.Altimeter);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteString(value.SLP);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteString(value.state);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteString(value.WindChill);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __id__ = default(string);
            var __id__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __elev__ = default(string);
            var __elev__b__ = false;
            var __latitude__ = default(string);
            var __latitude__b__ = false;
            var __longitude__ = default(string);
            var __longitude__b__ = false;
            var __Date__ = default(string);
            var __Date__b__ = false;
            var __Temp__ = default(string);
            var __Temp__b__ = false;
            var __Dewp__ = default(string);
            var __Dewp__b__ = false;
            var __Relh__ = default(string);
            var __Relh__b__ = false;
            var __Winds__ = default(string);
            var __Winds__b__ = false;
            var __Windd__ = default(string);
            var __Windd__b__ = false;
            var __Gust__ = default(string);
            var __Gust__b__ = false;
            var __Weather__ = default(string);
            var __Weather__b__ = false;
            var __Weatherimage__ = default(string);
            var __Weatherimage__b__ = false;
            var __Visibility__ = default(string);
            var __Visibility__b__ = false;
            var __Altimeter__ = default(string);
            var __Altimeter__b__ = false;
            var __SLP__ = default(string);
            var __SLP__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __state__ = default(string);
            var __state__b__ = false;
            var __WindChill__ = default(string);
            var __WindChill__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __id__ = reader.ReadString();
                        __id__b__ = true;
                        break;
                    case 1:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 2:
                        __elev__ = reader.ReadString();
                        __elev__b__ = true;
                        break;
                    case 3:
                        __latitude__ = reader.ReadString();
                        __latitude__b__ = true;
                        break;
                    case 4:
                        __longitude__ = reader.ReadString();
                        __longitude__b__ = true;
                        break;
                    case 5:
                        __Date__ = reader.ReadString();
                        __Date__b__ = true;
                        break;
                    case 6:
                        __Temp__ = reader.ReadString();
                        __Temp__b__ = true;
                        break;
                    case 7:
                        __Dewp__ = reader.ReadString();
                        __Dewp__b__ = true;
                        break;
                    case 8:
                        __Relh__ = reader.ReadString();
                        __Relh__b__ = true;
                        break;
                    case 9:
                        __Winds__ = reader.ReadString();
                        __Winds__b__ = true;
                        break;
                    case 10:
                        __Windd__ = reader.ReadString();
                        __Windd__b__ = true;
                        break;
                    case 11:
                        __Gust__ = reader.ReadString();
                        __Gust__b__ = true;
                        break;
                    case 12:
                        __Weather__ = reader.ReadString();
                        __Weather__b__ = true;
                        break;
                    case 13:
                        __Weatherimage__ = reader.ReadString();
                        __Weatherimage__b__ = true;
                        break;
                    case 14:
                        __Visibility__ = reader.ReadString();
                        __Visibility__b__ = true;
                        break;
                    case 15:
                        __Altimeter__ = reader.ReadString();
                        __Altimeter__b__ = true;
                        break;
                    case 16:
                        __SLP__ = reader.ReadString();
                        __SLP__b__ = true;
                        break;
                    case 17:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 18:
                        __state__ = reader.ReadString();
                        __state__b__ = true;
                        break;
                    case 19:
                        __WindChill__ = reader.ReadString();
                        __WindChill__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation();
            if(__id__b__) ____result.id = __id__;
            if(__name__b__) ____result.name = __name__;
            if(__elev__b__) ____result.elev = __elev__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__Date__b__) ____result.Date = __Date__;
            if(__Temp__b__) ____result.Temp = __Temp__;
            if(__Dewp__b__) ____result.Dewp = __Dewp__;
            if(__Relh__b__) ____result.Relh = __Relh__;
            if(__Winds__b__) ____result.Winds = __Winds__;
            if(__Windd__b__) ____result.Windd = __Windd__;
            if(__Gust__b__) ____result.Gust = __Gust__;
            if(__Weather__b__) ____result.Weather = __Weather__;
            if(__Weatherimage__b__) ____result.Weatherimage = __Weatherimage__;
            if(__Visibility__b__) ____result.Visibility = __Visibility__;
            if(__Altimeter__b__) ____result.Altimeter = __Altimeter__;
            if(__SLP__b__) ____result.SLP = __SLP__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__state__b__) ____result.state = __state__;
            if(__WindChill__b__) ____result.WindChill = __WindChill__;

            return ____result;
        }
    }


    public sealed class ForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Observation.ForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("operationalMode"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("srsName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("creationDate"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("creationDateLocal"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("productionCenter"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("credit"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moreInformation"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("location"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("currentobservation"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("operationalMode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("srsName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("creationDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("creationDateLocal"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("productionCenter"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("credit"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moreInformation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("location"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("data"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("currentobservation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Observation.ForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.operationalMode);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.srsName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.creationDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.creationDateLocal);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.productionCenter);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.credit);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.moreInformation);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Location>().Serialize(ref writer, value.location, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Time>().Serialize(ref writer, value.time, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Data>().Serialize(ref writer, value.data, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation>().Serialize(ref writer, value.currentobservation, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Observation.ForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __operationalMode__ = default(string);
            var __operationalMode__b__ = false;
            var __srsName__ = default(string);
            var __srsName__b__ = false;
            var __creationDate__ = default(global::System.DateTimeOffset);
            var __creationDate__b__ = false;
            var __creationDateLocal__ = default(string);
            var __creationDateLocal__b__ = false;
            var __productionCenter__ = default(string);
            var __productionCenter__b__ = false;
            var __credit__ = default(string);
            var __credit__b__ = false;
            var __moreInformation__ = default(string);
            var __moreInformation__b__ = false;
            var __location__ = default(global::SimpleWeather.Weather_API.NWS.Observation.Location);
            var __location__b__ = false;
            var __time__ = default(global::SimpleWeather.Weather_API.NWS.Observation.Time);
            var __time__b__ = false;
            var __data__ = default(global::SimpleWeather.Weather_API.NWS.Observation.Data);
            var __data__b__ = false;
            var __currentobservation__ = default(global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation);
            var __currentobservation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __operationalMode__ = reader.ReadString();
                        __operationalMode__b__ = true;
                        break;
                    case 1:
                        __srsName__ = reader.ReadString();
                        __srsName__b__ = true;
                        break;
                    case 2:
                        __creationDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __creationDate__b__ = true;
                        break;
                    case 3:
                        __creationDateLocal__ = reader.ReadString();
                        __creationDateLocal__b__ = true;
                        break;
                    case 4:
                        __productionCenter__ = reader.ReadString();
                        __productionCenter__b__ = true;
                        break;
                    case 5:
                        __credit__ = reader.ReadString();
                        __credit__b__ = true;
                        break;
                    case 6:
                        __moreInformation__ = reader.ReadString();
                        __moreInformation__b__ = true;
                        break;
                    case 7:
                        __location__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Location>().Deserialize(ref reader, formatterResolver);
                        __location__b__ = true;
                        break;
                    case 8:
                        __time__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Time>().Deserialize(ref reader, formatterResolver);
                        __time__b__ = true;
                        break;
                    case 9:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Data>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    case 10:
                        __currentobservation__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Observation.Currentobservation>().Deserialize(ref reader, formatterResolver);
                        __currentobservation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Observation.ForecastRootobject();
            if(__operationalMode__b__) ____result.operationalMode = __operationalMode__;
            if(__srsName__b__) ____result.srsName = __srsName__;
            if(__creationDate__b__) ____result.creationDate = __creationDate__;
            if(__creationDateLocal__b__) ____result.creationDateLocal = __creationDateLocal__;
            if(__productionCenter__b__) ____result.productionCenter = __productionCenter__;
            if(__credit__b__) ____result.credit = __credit__;
            if(__moreInformation__b__) ____result.moreInformation = __moreInformation__;
            if(__location__b__) ____result.location = __location__;
            if(__time__b__) ____result.time = __time__;
            if(__data__b__) ____result.data = __data__;
            if(__currentobservation__b__) ____result.currentobservation = __currentobservation__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.NWS.Hourly
{
    using System;
    using Utf8Json;


    public sealed class LocationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Hourly.Location>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LocationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Hourly.Location value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteDouble(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteDouble(value.longitude);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Hourly.Location Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __latitude__ = default(double);
            var __latitude__b__ = false;
            var __longitude__ = default(double);
            var __longitude__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __latitude__ = reader.ReadDouble();
                        __latitude__b__ = true;
                        break;
                    case 1:
                        __longitude__ = reader.ReadDouble();
                        __longitude__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Hourly.Location();
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;

            return ____result;
        }
    }


    public sealed class PeriodsItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PeriodsItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("unixtime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windChill"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windGust"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("periodName"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconLink"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("relativeHumidity"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudAmount"), 12},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("unixtime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windChill"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("periodName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("relativeHumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudAmount"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.time, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.unixtime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.windChill, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.windGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.periodName);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.pop, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.iconLink, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.relativeHumidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.windDirection, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.windSpeed, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.cloudAmount, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time__ = default(global::System.Collections.Generic.List<string>);
            var __time__b__ = false;
            var __unixtime__ = default(global::System.Collections.Generic.List<string>);
            var __unixtime__b__ = false;
            var __windChill__ = default(global::System.Collections.Generic.List<string>);
            var __windChill__b__ = false;
            var __windGust__ = default(global::System.Collections.Generic.List<string>);
            var __windGust__b__ = false;
            var __periodName__ = default(string);
            var __periodName__b__ = false;
            var __pop__ = default(global::System.Collections.Generic.List<string>);
            var __pop__b__ = false;
            var __iconLink__ = default(global::System.Collections.Generic.List<string>);
            var __iconLink__b__ = false;
            var __relativeHumidity__ = default(global::System.Collections.Generic.List<string>);
            var __relativeHumidity__b__ = false;
            var __temperature__ = default(global::System.Collections.Generic.List<string>);
            var __temperature__b__ = false;
            var __weather__ = default(global::System.Collections.Generic.List<string>);
            var __weather__b__ = false;
            var __windDirection__ = default(global::System.Collections.Generic.List<string>);
            var __windDirection__b__ = false;
            var __windSpeed__ = default(global::System.Collections.Generic.List<string>);
            var __windSpeed__b__ = false;
            var __cloudAmount__ = default(global::System.Collections.Generic.List<string>);
            var __cloudAmount__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __time__b__ = true;
                        break;
                    case 1:
                        __unixtime__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __unixtime__b__ = true;
                        break;
                    case 2:
                        __windChill__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __windChill__b__ = true;
                        break;
                    case 3:
                        __windGust__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __windGust__b__ = true;
                        break;
                    case 4:
                        __periodName__ = reader.ReadString();
                        __periodName__b__ = true;
                        break;
                    case 5:
                        __pop__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __pop__b__ = true;
                        break;
                    case 6:
                        __iconLink__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __iconLink__b__ = true;
                        break;
                    case 7:
                        __relativeHumidity__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __relativeHumidity__b__ = true;
                        break;
                    case 8:
                        __temperature__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __temperature__b__ = true;
                        break;
                    case 9:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 10:
                        __windDirection__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __windDirection__b__ = true;
                        break;
                    case 11:
                        __windSpeed__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __windSpeed__b__ = true;
                        break;
                    case 12:
                        __cloudAmount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, formatterResolver);
                        __cloudAmount__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem();
            if(__time__b__) ____result.time = __time__;
            if(__unixtime__b__) ____result.unixtime = __unixtime__;
            if(__windChill__b__) ____result.windChill = __windChill__;
            if(__windGust__b__) ____result.windGust = __windGust__;
            if(__periodName__b__) ____result.periodName = __periodName__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__iconLink__b__) ____result.iconLink = __iconLink__;
            if(__relativeHumidity__b__) ____result.relativeHumidity = __relativeHumidity__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__weather__b__) ____result.weather = __weather__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__cloudAmount__b__) ____result.cloudAmount = __cloudAmount__;

            return ____result;
        }
    }


    public sealed class HourlyForecastResponseFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Hourly.HourlyForecastResponse>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyForecastResponseFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("creationDate"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("location"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("periodsItems"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("creationDate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("location"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("periodsItems"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Hourly.HourlyForecastResponse value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.creationDate, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Hourly.Location>().Serialize(ref writer, value.location, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem>>().Serialize(ref writer, value.periodsItems, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Hourly.HourlyForecastResponse Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __creationDate__ = default(global::System.DateTimeOffset);
            var __creationDate__b__ = false;
            var __location__ = default(global::SimpleWeather.Weather_API.NWS.Hourly.Location);
            var __location__b__ = false;
            var __periodsItems__ = default(global::System.Collections.Generic.List<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem>);
            var __periodsItems__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __creationDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __creationDate__b__ = true;
                        break;
                    case 1:
                        __location__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.NWS.Hourly.Location>().Deserialize(ref reader, formatterResolver);
                        __location__b__ = true;
                        break;
                    case 2:
                        __periodsItems__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodsItem>>().Deserialize(ref reader, formatterResolver);
                        __periodsItems__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Hourly.HourlyForecastResponse();
            if(__creationDate__b__) ____result.creationDate = __creationDate__;
            if(__location__b__) ____result.location = __location__;
            if(__periodsItems__b__) ____result.periodsItems = __periodsItems__;

            return ____result;
        }
    }


    public sealed class PeriodItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.NWS.Hourly.PeriodItem>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PeriodItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("unixTime"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windChill"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudAmount"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("relativeHumidity"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windGust"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("iconLink"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("unixTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windChill"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudAmount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("relativeHumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("iconLink"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.NWS.Hourly.PeriodItem value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.unixTime);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.windChill);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.windSpeed);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.cloudAmount);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.pop);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.relativeHumidity);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.windGust);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.temperature);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.windDirection);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.iconLink);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.weather);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.NWS.Hourly.PeriodItem Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __unixTime__ = default(string);
            var __unixTime__b__ = false;
            var __windChill__ = default(string);
            var __windChill__b__ = false;
            var __windSpeed__ = default(string);
            var __windSpeed__b__ = false;
            var __cloudAmount__ = default(string);
            var __cloudAmount__b__ = false;
            var __pop__ = default(string);
            var __pop__b__ = false;
            var __relativeHumidity__ = default(string);
            var __relativeHumidity__b__ = false;
            var __windGust__ = default(string);
            var __windGust__b__ = false;
            var __temperature__ = default(string);
            var __temperature__b__ = false;
            var __windDirection__ = default(string);
            var __windDirection__b__ = false;
            var __iconLink__ = default(string);
            var __iconLink__b__ = false;
            var __weather__ = default(string);
            var __weather__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __unixTime__ = reader.ReadString();
                        __unixTime__b__ = true;
                        break;
                    case 1:
                        __windChill__ = reader.ReadString();
                        __windChill__b__ = true;
                        break;
                    case 2:
                        __windSpeed__ = reader.ReadString();
                        __windSpeed__b__ = true;
                        break;
                    case 3:
                        __cloudAmount__ = reader.ReadString();
                        __cloudAmount__b__ = true;
                        break;
                    case 4:
                        __pop__ = reader.ReadString();
                        __pop__b__ = true;
                        break;
                    case 5:
                        __relativeHumidity__ = reader.ReadString();
                        __relativeHumidity__b__ = true;
                        break;
                    case 6:
                        __windGust__ = reader.ReadString();
                        __windGust__b__ = true;
                        break;
                    case 7:
                        __temperature__ = reader.ReadString();
                        __temperature__b__ = true;
                        break;
                    case 8:
                        __windDirection__ = reader.ReadString();
                        __windDirection__b__ = true;
                        break;
                    case 9:
                        __iconLink__ = reader.ReadString();
                        __iconLink__b__ = true;
                        break;
                    case 10:
                        __weather__ = reader.ReadString();
                        __weather__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.NWS.Hourly.PeriodItem(__unixTime__, __windChill__, __windSpeed__, __cloudAmount__, __pop__, __relativeHumidity__, __windGust__, __temperature__, __windDirection__, __iconLink__, __weather__);
            if(__unixTime__b__) ____result.unixTime = __unixTime__;
            if(__windChill__b__) ____result.windChill = __windChill__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__cloudAmount__b__) ____result.cloudAmount = __cloudAmount__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__relativeHumidity__b__) ____result.relativeHumidity = __relativeHumidity__;
            if(__windGust__b__) ____result.windGust = __windGust__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__iconLink__b__) ____result.iconLink = __iconLink__;
            if(__weather__b__) ____result.weather = __weather__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather
{
    using System;
    using Utf8Json;


    public sealed class CoordFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Coord>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CoordFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Coord value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lat);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Coord Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __lon__ = default(float);
            var __lon__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 1:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Coord();
            if(__lon__b__) ____result.lon = __lon__;
            if(__lat__b__) ____result.lat = __lat__;

            return ____result;
        }
    }


    public sealed class WeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Weather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("main"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("main"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Weather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.main);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.icon);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Weather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __id__ = default(int);
            var __id__b__ = false;
            var __main__ = default(string);
            var __main__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        __id__b__ = true;
                        break;
                    case 1:
                        __main__ = reader.ReadString();
                        __main__b__ = true;
                        break;
                    case 2:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 3:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Weather();
            if(__id__b__) ____result.id = __id__;
            if(__main__b__) ____result.main = __main__;
            if(__description__b__) ____result.description = __description__;
            if(__icon__b__) ____result.icon = __icon__;

            return ____result;
        }
    }


    public sealed class MainFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Main>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MainFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feels_like"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_min"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_max"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sea_level"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("grnd_level"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feels_like"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_max"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sea_level"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("grnd_level"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Main value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.feels_like, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.temp_min);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.temp_max);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.pressure);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteInt32(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.sea_level, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.grnd_level, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Main Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __temp__ = default(float);
            var __temp__b__ = false;
            var __feels_like__ = default(float?);
            var __feels_like__b__ = false;
            var __temp_min__ = default(float);
            var __temp_min__b__ = false;
            var __temp_max__ = default(float);
            var __temp_max__b__ = false;
            var __pressure__ = default(float);
            var __pressure__b__ = false;
            var __humidity__ = default(int);
            var __humidity__b__ = false;
            var __sea_level__ = default(float?);
            var __sea_level__b__ = false;
            var __grnd_level__ = default(float?);
            var __grnd_level__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 1:
                        __feels_like__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __feels_like__b__ = true;
                        break;
                    case 2:
                        __temp_min__ = reader.ReadSingle();
                        __temp_min__b__ = true;
                        break;
                    case 3:
                        __temp_max__ = reader.ReadSingle();
                        __temp_max__b__ = true;
                        break;
                    case 4:
                        __pressure__ = reader.ReadSingle();
                        __pressure__b__ = true;
                        break;
                    case 5:
                        __humidity__ = reader.ReadInt32();
                        __humidity__b__ = true;
                        break;
                    case 6:
                        __sea_level__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __sea_level__b__ = true;
                        break;
                    case 7:
                        __grnd_level__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __grnd_level__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Main();
            if(__temp__b__) ____result.temp = __temp__;
            if(__feels_like__b__) ____result.feels_like = __feels_like__;
            if(__temp_min__b__) ____result.temp_min = __temp_min__;
            if(__temp_max__b__) ____result.temp_max = __temp_max__;
            if(__pressure__b__) ____result.pressure = __pressure__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__sea_level__b__) ____result.sea_level = __sea_level__;
            if(__grnd_level__b__) ____result.grnd_level = __grnd_level__;

            return ____result;
        }
    }


    public sealed class WindFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Wind>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WindFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("speed"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("deg"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gust"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("deg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gust"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Wind value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.speed);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.deg);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.gust, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Wind Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __speed__ = default(float);
            var __speed__b__ = false;
            var __deg__ = default(float);
            var __deg__b__ = false;
            var __gust__ = default(float?);
            var __gust__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __speed__ = reader.ReadSingle();
                        __speed__b__ = true;
                        break;
                    case 1:
                        __deg__ = reader.ReadSingle();
                        __deg__b__ = true;
                        break;
                    case 2:
                        __gust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __gust__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Wind();
            if(__speed__b__) ____result.speed = __speed__;
            if(__deg__b__) ____result.deg = __deg__;
            if(__gust__b__) ____result.gust = __gust__;

            return ____result;
        }
    }


    public sealed class CloudsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Clouds>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CloudsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("all"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("all"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Clouds value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.all);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Clouds Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __all__ = default(int);
            var __all__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __all__ = reader.ReadInt32();
                        __all__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Clouds();
            if(__all__b__) ____result.all = __all__;

            return ____result;
        }
    }


    public sealed class RainFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Rain>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RainFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("1h"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("3h"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("1h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("3h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Rain value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._1h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._3h, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Rain Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___1h__ = default(float?);
            var ___1h__b__ = false;
            var ___3h__ = default(float?);
            var ___3h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___1h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___1h__b__ = true;
                        break;
                    case 1:
                        ___3h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___3h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Rain();
            if(___1h__b__) ____result._1h = ___1h__;
            if(___3h__b__) ____result._3h = ___3h__;

            return ____result;
        }
    }


    public sealed class SnowFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Snow>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SnowFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("1h"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("3h"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("1h"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("3h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Snow value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._1h, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value._3h, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Snow Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___1h__ = default(float?);
            var ___1h__b__ = false;
            var ___3h__ = default(float?);
            var ___3h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___1h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___1h__b__ = true;
                        break;
                    case 1:
                        ___3h__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        ___3h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Snow();
            if(___1h__b__) ____result._1h = ___1h__;
            if(___3h__b__) ____result._3h = ___3h__;

            return ____result;
        }
    }


    public sealed class CurrentSysFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.CurrentSys>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentSysFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.CurrentSys value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.sunrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.sunset, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.CurrentSys Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __country__ = default(string);
            var __country__b__ = false;
            var __sunrise__ = default(long?);
            var __sunrise__b__ = false;
            var __sunset__ = default(long?);
            var __sunset__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 1:
                        __sunrise__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __sunrise__b__ = true;
                        break;
                    case 2:
                        __sunset__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __sunset__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.CurrentSys();
            if(__country__b__) ____result.country = __country__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;

            return ____result;
        }
    }


    public sealed class CurrentRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.CurrentRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("coord"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("base"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("main"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sys"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 13},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("coord"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("base"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("main"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sys"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.CurrentRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Coord>().Serialize(ref writer, value.coord, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Weather[]>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value._base);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Main>().Serialize(ref writer, value.main, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteInt32(value.visibility);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Wind>().Serialize(ref writer, value.wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Clouds>().Serialize(ref writer, value.clouds, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Rain>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Snow>().Serialize(ref writer, value.snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.CurrentSys>().Serialize(ref writer, value.sys, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteInt32(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteInt32(value.id);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.name);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.CurrentRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __coord__ = default(global::SimpleWeather.Weather_API.OpenWeather.Coord);
            var __coord__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.OpenWeather.Weather[]);
            var __weather__b__ = false;
            var ___base__ = default(string);
            var ___base__b__ = false;
            var __main__ = default(global::SimpleWeather.Weather_API.OpenWeather.Main);
            var __main__b__ = false;
            var __visibility__ = default(int);
            var __visibility__b__ = false;
            var __wind__ = default(global::SimpleWeather.Weather_API.OpenWeather.Wind);
            var __wind__b__ = false;
            var __clouds__ = default(global::SimpleWeather.Weather_API.OpenWeather.Clouds);
            var __clouds__b__ = false;
            var __rain__ = default(global::SimpleWeather.Weather_API.OpenWeather.Rain);
            var __rain__b__ = false;
            var __snow__ = default(global::SimpleWeather.Weather_API.OpenWeather.Snow);
            var __snow__b__ = false;
            var __dt__ = default(long);
            var __dt__b__ = false;
            var __sys__ = default(global::SimpleWeather.Weather_API.OpenWeather.CurrentSys);
            var __sys__b__ = false;
            var __timezone__ = default(int);
            var __timezone__b__ = false;
            var __id__ = default(int);
            var __id__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __coord__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Coord>().Deserialize(ref reader, formatterResolver);
                        __coord__b__ = true;
                        break;
                    case 1:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Weather[]>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 2:
                        ___base__ = reader.ReadString();
                        ___base__b__ = true;
                        break;
                    case 3:
                        __main__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Main>().Deserialize(ref reader, formatterResolver);
                        __main__b__ = true;
                        break;
                    case 4:
                        __visibility__ = reader.ReadInt32();
                        __visibility__b__ = true;
                        break;
                    case 5:
                        __wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Wind>().Deserialize(ref reader, formatterResolver);
                        __wind__b__ = true;
                        break;
                    case 6:
                        __clouds__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Clouds>().Deserialize(ref reader, formatterResolver);
                        __clouds__b__ = true;
                        break;
                    case 7:
                        __rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Rain>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 8:
                        __snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Snow>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    case 9:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 10:
                        __sys__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.CurrentSys>().Deserialize(ref reader, formatterResolver);
                        __sys__b__ = true;
                        break;
                    case 11:
                        __timezone__ = reader.ReadInt32();
                        __timezone__b__ = true;
                        break;
                    case 12:
                        __id__ = reader.ReadInt32();
                        __id__b__ = true;
                        break;
                    case 13:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.CurrentRootobject();
            if(__coord__b__) ____result.coord = __coord__;
            if(__weather__b__) ____result.weather = __weather__;
            if(___base__b__) ____result._base = ___base__;
            if(__main__b__) ____result.main = __main__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__wind__b__) ____result.wind = __wind__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__dt__b__) ____result.dt = __dt__;
            if(__sys__b__) ____result.sys = __sys__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__id__b__) ____result.id = __id__;
            if(__name__b__) ____result.name = __name__;

            return ____result;
        }
    }


    public sealed class ForecastSysFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.ForecastSys>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastSysFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pod"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("pod"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.ForecastSys value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.pod);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.ForecastSys Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __pod__ = default(string);
            var __pod__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __pod__ = reader.ReadString();
                        __pod__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.ForecastSys();
            if(__pod__b__) ____result.pod = __pod__;

            return ____result;
        }
    }


    public sealed class ListFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.List>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ListFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("main"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sys"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt_txt"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("main"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sys"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dt_txt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.List value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Main>().Serialize(ref writer, value.main, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Weather[]>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Clouds>().Serialize(ref writer, value.clouds, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Wind>().Serialize(ref writer, value.wind, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.visibility, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.pop, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.ForecastSys>().Serialize(ref writer, value.sys, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.dt_txt);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Rain>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Snow>().Serialize(ref writer, value.snow, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.List Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __main__ = default(global::SimpleWeather.Weather_API.OpenWeather.Main);
            var __main__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.OpenWeather.Weather[]);
            var __weather__b__ = false;
            var __clouds__ = default(global::SimpleWeather.Weather_API.OpenWeather.Clouds);
            var __clouds__b__ = false;
            var __wind__ = default(global::SimpleWeather.Weather_API.OpenWeather.Wind);
            var __wind__b__ = false;
            var __visibility__ = default(int?);
            var __visibility__b__ = false;
            var __pop__ = default(float?);
            var __pop__b__ = false;
            var __sys__ = default(global::SimpleWeather.Weather_API.OpenWeather.ForecastSys);
            var __sys__b__ = false;
            var __dt_txt__ = default(string);
            var __dt_txt__b__ = false;
            var __rain__ = default(global::SimpleWeather.Weather_API.OpenWeather.Rain);
            var __rain__b__ = false;
            var __snow__ = default(global::SimpleWeather.Weather_API.OpenWeather.Snow);
            var __snow__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __main__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Main>().Deserialize(ref reader, formatterResolver);
                        __main__b__ = true;
                        break;
                    case 2:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Weather[]>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 3:
                        __clouds__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Clouds>().Deserialize(ref reader, formatterResolver);
                        __clouds__b__ = true;
                        break;
                    case 4:
                        __wind__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Wind>().Deserialize(ref reader, formatterResolver);
                        __wind__b__ = true;
                        break;
                    case 5:
                        __visibility__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __visibility__b__ = true;
                        break;
                    case 6:
                        __pop__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __pop__b__ = true;
                        break;
                    case 7:
                        __sys__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.ForecastSys>().Deserialize(ref reader, formatterResolver);
                        __sys__b__ = true;
                        break;
                    case 8:
                        __dt_txt__ = reader.ReadString();
                        __dt_txt__b__ = true;
                        break;
                    case 9:
                        __rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Rain>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 10:
                        __snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Snow>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.List();
            if(__dt__b__) ____result.dt = __dt__;
            if(__main__b__) ____result.main = __main__;
            if(__weather__b__) ____result.weather = __weather__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__wind__b__) ____result.wind = __wind__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__sys__b__) ____result.sys = __sys__;
            if(__dt_txt__b__) ____result.dt_txt = __dt_txt__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;

            return ____result;
        }
    }


    public sealed class CityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.City>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("coord"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("coord"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.City value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Coord>().Serialize(ref writer, value.coord, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.sunrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.sunset, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.City Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __id__ = default(int);
            var __id__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __coord__ = default(global::SimpleWeather.Weather_API.OpenWeather.Coord);
            var __coord__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __sunrise__ = default(int?);
            var __sunrise__b__ = false;
            var __sunset__ = default(int?);
            var __sunset__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        __id__b__ = true;
                        break;
                    case 1:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 2:
                        __coord__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.Coord>().Deserialize(ref reader, formatterResolver);
                        __coord__b__ = true;
                        break;
                    case 3:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 4:
                        __sunrise__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __sunrise__b__ = true;
                        break;
                    case 5:
                        __sunset__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __sunset__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.City();
            if(__id__b__) ____result.id = __id__;
            if(__name__b__) ____result.name = __name__;
            if(__coord__b__) ____result.coord = __coord__;
            if(__country__b__) ____result.country = __country__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;

            return ____result;
        }
    }


    public sealed class ForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.ForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("list"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("list"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.ForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.List[]>().Serialize(ref writer, value.list, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.City>().Serialize(ref writer, value.city, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.ForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __list__ = default(global::SimpleWeather.Weather_API.OpenWeather.List[]);
            var __list__b__ = false;
            var __city__ = default(global::SimpleWeather.Weather_API.OpenWeather.City);
            var __city__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __list__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.List[]>().Deserialize(ref reader, formatterResolver);
                        __list__b__ = true;
                        break;
                    case 1:
                        __city__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.City>().Deserialize(ref reader, formatterResolver);
                        __city__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.ForecastRootobject();
            if(__list__b__) ____result.list = __list__;
            if(__city__b__) ____result.city = __city__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cod"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("message"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("cod"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("message"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.cod);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.message);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __cod__ = default(int);
            var __cod__b__ = false;
            var __message__ = default(string);
            var __message__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __cod__ = reader.ReadInt32();
                        __cod__b__ = true;
                        break;
                    case 1:
                        __message__ = reader.ReadString();
                        __message__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.Rootobject();
            if(__cod__b__) ____result.cod = __cod__;
            if(__message__b__) ____result.message = __message__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.OpenWeather.OneCall
{
    using System;
    using Utf8Json;


    public sealed class CoordFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CoordFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lat);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __lon__ = default(float);
            var __lon__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 1:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord();
            if(__lon__b__) ____result.lon = __lon__;
            if(__lat__b__) ____result.lat = __lat__;

            return ____result;
        }
    }


    public sealed class MainFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MainFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("aqi"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("aqi"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.aqi);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __aqi__ = default(int);
            var __aqi__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __aqi__ = reader.ReadInt32();
                        __aqi__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main();
            if(__aqi__b__) ____result.aqi = __aqi__;

            return ____result;
        }
    }


    public sealed class ComponentsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ComponentsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("co"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("no"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("no2"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("o3"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("so2"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm2_5"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm10"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("nh3"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("co"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("no"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("no2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("o3"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("so2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm2_5"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm10"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("nh3"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.co, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.no, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.no2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.o3, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.so2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.pm2_5, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.pm10, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.nh3, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __co__ = default(double?);
            var __co__b__ = false;
            var __no__ = default(double?);
            var __no__b__ = false;
            var __no2__ = default(double?);
            var __no2__b__ = false;
            var __o3__ = default(double?);
            var __o3__b__ = false;
            var __so2__ = default(double?);
            var __so2__b__ = false;
            var __pm2_5__ = default(double?);
            var __pm2_5__b__ = false;
            var __pm10__ = default(double?);
            var __pm10__b__ = false;
            var __nh3__ = default(double?);
            var __nh3__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __co__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __co__b__ = true;
                        break;
                    case 1:
                        __no__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __no__b__ = true;
                        break;
                    case 2:
                        __no2__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __no2__b__ = true;
                        break;
                    case 3:
                        __o3__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __o3__b__ = true;
                        break;
                    case 4:
                        __so2__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __so2__b__ = true;
                        break;
                    case 5:
                        __pm2_5__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __pm2_5__b__ = true;
                        break;
                    case 6:
                        __pm10__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __pm10__b__ = true;
                        break;
                    case 7:
                        __nh3__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __nh3__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components();
            if(__co__b__) ____result.co = __co__;
            if(__no__b__) ____result.no = __no__;
            if(__no2__b__) ____result.no2 = __no2__;
            if(__o3__b__) ____result.o3 = __o3__;
            if(__so2__b__) ____result.so2 = __so2__;
            if(__pm2_5__b__) ____result.pm2_5 = __pm2_5__;
            if(__pm10__b__) ____result.pm10 = __pm10__;
            if(__nh3__b__) ____result.nh3 = __nh3__;

            return ____result;
        }
    }


    public sealed class ListFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.List>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ListFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("main"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("components"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("main"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("components"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dt"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.List value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main>().Serialize(ref writer, value.main, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components>().Serialize(ref writer, value.components, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt64(value.dt);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.List Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __main__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main);
            var __main__b__ = false;
            var __components__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components);
            var __components__b__ = false;
            var __dt__ = default(long);
            var __dt__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __main__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Main>().Deserialize(ref reader, formatterResolver);
                        __main__b__ = true;
                        break;
                    case 1:
                        __components__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Components>().Deserialize(ref reader, formatterResolver);
                        __components__b__ = true;
                        break;
                    case 2:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.List();
            if(__main__b__) ____result.main = __main__;
            if(__components__b__) ____result.components = __components__;
            if(__dt__b__) ____result.dt = __dt__;

            return ____result;
        }
    }


    public sealed class AirPollutionRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.AirPollutionRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AirPollutionRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("coord"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("list"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("coord"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("list"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.AirPollutionRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord>().Serialize(ref writer, value.coord, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.List[]>().Serialize(ref writer, value.list, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.AirPollutionRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __coord__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord);
            var __coord__b__ = false;
            var __list__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.List[]);
            var __list__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __coord__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Coord>().Deserialize(ref reader, formatterResolver);
                        __coord__b__ = true;
                        break;
                    case 1:
                        __list__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.List[]>().Deserialize(ref reader, formatterResolver);
                        __list__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.AirPollutionRootobject();
            if(__coord__b__) ____result.coord = __coord__;
            if(__list__b__) ____result.list = __list__;

            return ____result;
        }
    }


    public sealed class RainFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RainFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("1h"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("1h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value._1h);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___1h__ = default(float);
            var ___1h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___1h__ = reader.ReadSingle();
                        ___1h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain();
            if(___1h__b__) ____result._1h = ___1h__;

            return ____result;
        }
    }


    public sealed class SnowFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SnowFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("1h"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("1h"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value._1h);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var ___1h__ = default(float);
            var ___1h__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        ___1h__ = reader.ReadSingle();
                        ___1h__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow();
            if(___1h__b__) ____result._1h = ___1h__;

            return ____result;
        }
    }


    public sealed class WeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("main"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("main"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.main);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.icon);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __id__ = default(int);
            var __id__b__ = false;
            var __main__ = default(string);
            var __main__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        __id__b__ = true;
                        break;
                    case 1:
                        __main__ = reader.ReadString();
                        __main__b__ = true;
                        break;
                    case 2:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 3:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather();
            if(__id__b__) ____result.id = __id__;
            if(__main__b__) ____result.main = __main__;
            if(__description__b__) ____result.description = __description__;
            if(__icon__b__) ____result.icon = __icon__;

            return ____result;
        }
    }


    public sealed class CurrentFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feels_like"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dew_point"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvi"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_speed"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_gust"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_deg"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 16},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feels_like"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dew_point"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_gust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_deg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.sunrise);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt64(value.sunset);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.feels_like);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.pressure);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteInt32(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.dew_point);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteInt32(value.clouds);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.uvi);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteInt32(value.visibility);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.wind_speed);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.wind_gust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteInt32(value.wind_deg);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow>().Serialize(ref writer, value.snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]>().Serialize(ref writer, value.weather, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __sunrise__ = default(long);
            var __sunrise__b__ = false;
            var __sunset__ = default(long);
            var __sunset__b__ = false;
            var __temp__ = default(float);
            var __temp__b__ = false;
            var __feels_like__ = default(float);
            var __feels_like__b__ = false;
            var __pressure__ = default(float);
            var __pressure__b__ = false;
            var __humidity__ = default(int);
            var __humidity__b__ = false;
            var __dew_point__ = default(float);
            var __dew_point__b__ = false;
            var __clouds__ = default(int);
            var __clouds__b__ = false;
            var __uvi__ = default(float);
            var __uvi__b__ = false;
            var __visibility__ = default(int);
            var __visibility__b__ = false;
            var __wind_speed__ = default(float);
            var __wind_speed__b__ = false;
            var __wind_gust__ = default(float?);
            var __wind_gust__b__ = false;
            var __wind_deg__ = default(int);
            var __wind_deg__b__ = false;
            var __rain__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain);
            var __rain__b__ = false;
            var __snow__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow);
            var __snow__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]);
            var __weather__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __sunrise__ = reader.ReadInt64();
                        __sunrise__b__ = true;
                        break;
                    case 2:
                        __sunset__ = reader.ReadInt64();
                        __sunset__b__ = true;
                        break;
                    case 3:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 4:
                        __feels_like__ = reader.ReadSingle();
                        __feels_like__b__ = true;
                        break;
                    case 5:
                        __pressure__ = reader.ReadSingle();
                        __pressure__b__ = true;
                        break;
                    case 6:
                        __humidity__ = reader.ReadInt32();
                        __humidity__b__ = true;
                        break;
                    case 7:
                        __dew_point__ = reader.ReadSingle();
                        __dew_point__b__ = true;
                        break;
                    case 8:
                        __clouds__ = reader.ReadInt32();
                        __clouds__b__ = true;
                        break;
                    case 9:
                        __uvi__ = reader.ReadSingle();
                        __uvi__b__ = true;
                        break;
                    case 10:
                        __visibility__ = reader.ReadInt32();
                        __visibility__b__ = true;
                        break;
                    case 11:
                        __wind_speed__ = reader.ReadSingle();
                        __wind_speed__b__ = true;
                        break;
                    case 12:
                        __wind_gust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __wind_gust__b__ = true;
                        break;
                    case 13:
                        __wind_deg__ = reader.ReadInt32();
                        __wind_deg__b__ = true;
                        break;
                    case 14:
                        __rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 15:
                        __snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    case 16:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current();
            if(__dt__b__) ____result.dt = __dt__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__feels_like__b__) ____result.feels_like = __feels_like__;
            if(__pressure__b__) ____result.pressure = __pressure__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__dew_point__b__) ____result.dew_point = __dew_point__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__uvi__b__) ____result.uvi = __uvi__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__wind_speed__b__) ____result.wind_speed = __wind_speed__;
            if(__wind_gust__b__) ____result.wind_gust = __wind_gust__;
            if(__wind_deg__b__) ____result.wind_deg = __wind_deg__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__weather__b__) ____result.weather = __weather__;

            return ____result;
        }
    }


    public sealed class HourlyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feels_like"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dew_point"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvi"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_speed"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_gust"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_deg"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 15},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feels_like"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dew_point"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_gust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_deg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.feels_like);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.pressure);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteInt32(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.dew_point);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteInt32(value.clouds);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.pop, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.uvi, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.visibility, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.wind_speed);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.wind_gust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteInt32(value.wind_deg);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow>().Serialize(ref writer, value.snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]>().Serialize(ref writer, value.weather, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __temp__ = default(float);
            var __temp__b__ = false;
            var __feels_like__ = default(float);
            var __feels_like__b__ = false;
            var __pressure__ = default(float);
            var __pressure__b__ = false;
            var __humidity__ = default(int);
            var __humidity__b__ = false;
            var __dew_point__ = default(float);
            var __dew_point__b__ = false;
            var __clouds__ = default(int);
            var __clouds__b__ = false;
            var __pop__ = default(float?);
            var __pop__b__ = false;
            var __uvi__ = default(float?);
            var __uvi__b__ = false;
            var __visibility__ = default(int?);
            var __visibility__b__ = false;
            var __wind_speed__ = default(float);
            var __wind_speed__b__ = false;
            var __wind_gust__ = default(float?);
            var __wind_gust__b__ = false;
            var __wind_deg__ = default(int);
            var __wind_deg__b__ = false;
            var __rain__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain);
            var __rain__b__ = false;
            var __snow__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow);
            var __snow__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]);
            var __weather__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 2:
                        __feels_like__ = reader.ReadSingle();
                        __feels_like__b__ = true;
                        break;
                    case 3:
                        __pressure__ = reader.ReadSingle();
                        __pressure__b__ = true;
                        break;
                    case 4:
                        __humidity__ = reader.ReadInt32();
                        __humidity__b__ = true;
                        break;
                    case 5:
                        __dew_point__ = reader.ReadSingle();
                        __dew_point__b__ = true;
                        break;
                    case 6:
                        __clouds__ = reader.ReadInt32();
                        __clouds__b__ = true;
                        break;
                    case 7:
                        __pop__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __pop__b__ = true;
                        break;
                    case 8:
                        __uvi__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __uvi__b__ = true;
                        break;
                    case 9:
                        __visibility__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __visibility__b__ = true;
                        break;
                    case 10:
                        __wind_speed__ = reader.ReadSingle();
                        __wind_speed__b__ = true;
                        break;
                    case 11:
                        __wind_gust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __wind_gust__b__ = true;
                        break;
                    case 12:
                        __wind_deg__ = reader.ReadInt32();
                        __wind_deg__b__ = true;
                        break;
                    case 13:
                        __rain__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rain>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 14:
                        __snow__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Snow>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    case 15:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly();
            if(__dt__b__) ____result.dt = __dt__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__feels_like__b__) ____result.feels_like = __feels_like__;
            if(__pressure__b__) ____result.pressure = __pressure__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__dew_point__b__) ____result.dew_point = __dew_point__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__uvi__b__) ____result.uvi = __uvi__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__wind_speed__b__) ____result.wind_speed = __wind_speed__;
            if(__wind_gust__b__) ____result.wind_gust = __wind_gust__;
            if(__wind_deg__b__) ____result.wind_deg = __wind_deg__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__weather__b__) ____result.weather = __weather__;

            return ____result;
        }
    }


    public sealed class TempFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TempFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("morn"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("eve"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("night"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("morn"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("eve"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("night"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("min"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.morn);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.day);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.eve);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.night);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.min);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.max);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __morn__ = default(float);
            var __morn__b__ = false;
            var __day__ = default(float);
            var __day__b__ = false;
            var __eve__ = default(float);
            var __eve__b__ = false;
            var __night__ = default(float);
            var __night__b__ = false;
            var __min__ = default(float);
            var __min__b__ = false;
            var __max__ = default(float);
            var __max__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __morn__ = reader.ReadSingle();
                        __morn__b__ = true;
                        break;
                    case 1:
                        __day__ = reader.ReadSingle();
                        __day__b__ = true;
                        break;
                    case 2:
                        __eve__ = reader.ReadSingle();
                        __eve__b__ = true;
                        break;
                    case 3:
                        __night__ = reader.ReadSingle();
                        __night__b__ = true;
                        break;
                    case 4:
                        __min__ = reader.ReadSingle();
                        __min__b__ = true;
                        break;
                    case 5:
                        __max__ = reader.ReadSingle();
                        __max__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp();
            if(__morn__b__) ____result.morn = __morn__;
            if(__day__b__) ____result.day = __day__;
            if(__eve__b__) ____result.eve = __eve__;
            if(__night__b__) ____result.night = __night__;
            if(__min__b__) ____result.min = __min__;
            if(__max__b__) ____result.max = __max__;

            return ____result;
        }
    }


    public sealed class Feels_LikeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Feels_LikeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("morn"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("eve"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("night"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("morn"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("eve"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("night"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.morn);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.day);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.eve);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.night);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __morn__ = default(float);
            var __morn__b__ = false;
            var __day__ = default(float);
            var __day__b__ = false;
            var __eve__ = default(float);
            var __eve__b__ = false;
            var __night__ = default(float);
            var __night__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __morn__ = reader.ReadSingle();
                        __morn__b__ = true;
                        break;
                    case 1:
                        __day__ = reader.ReadSingle();
                        __day__b__ = true;
                        break;
                    case 2:
                        __eve__ = reader.ReadSingle();
                        __eve__b__ = true;
                        break;
                    case 3:
                        __night__ = reader.ReadSingle();
                        __night__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like();
            if(__morn__b__) ____result.morn = __morn__;
            if(__day__b__) ____result.day = __day__;
            if(__eve__b__) ____result.eve = __eve__;
            if(__night__b__) ____result.night = __night__;

            return ____result;
        }
    }


    public sealed class DailyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moon_phase"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feels_like"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dew_point"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_speed"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_gust"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_deg"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvi"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 20},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moon_phase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feels_like"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dew_point"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_speed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_gust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_deg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.sunrise);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt64(value.sunset);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.moonrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<long?>().Serialize(ref writer, value.moonset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.moon_phase, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp>().Serialize(ref writer, value.temp, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like>().Serialize(ref writer, value.feels_like, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.pressure);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteInt32(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.dew_point);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.wind_speed);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.wind_gust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteInt32(value.wind_deg);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteInt32(value.clouds);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.pop, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.uvi);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.visibility, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]>().Serialize(ref writer, value.weather, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __sunrise__ = default(long);
            var __sunrise__b__ = false;
            var __sunset__ = default(long);
            var __sunset__b__ = false;
            var __moonrise__ = default(long?);
            var __moonrise__b__ = false;
            var __moonset__ = default(long?);
            var __moonset__b__ = false;
            var __moon_phase__ = default(float?);
            var __moon_phase__b__ = false;
            var __temp__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp);
            var __temp__b__ = false;
            var __feels_like__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like);
            var __feels_like__b__ = false;
            var __pressure__ = default(float);
            var __pressure__b__ = false;
            var __humidity__ = default(int);
            var __humidity__b__ = false;
            var __dew_point__ = default(float);
            var __dew_point__b__ = false;
            var __wind_speed__ = default(float);
            var __wind_speed__b__ = false;
            var __wind_gust__ = default(float?);
            var __wind_gust__b__ = false;
            var __wind_deg__ = default(int);
            var __wind_deg__b__ = false;
            var __clouds__ = default(int);
            var __clouds__b__ = false;
            var __pop__ = default(float?);
            var __pop__b__ = false;
            var __uvi__ = default(float);
            var __uvi__b__ = false;
            var __visibility__ = default(int?);
            var __visibility__b__ = false;
            var __rain__ = default(float?);
            var __rain__b__ = false;
            var __snow__ = default(float?);
            var __snow__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]);
            var __weather__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __sunrise__ = reader.ReadInt64();
                        __sunrise__b__ = true;
                        break;
                    case 2:
                        __sunset__ = reader.ReadInt64();
                        __sunset__b__ = true;
                        break;
                    case 3:
                        __moonrise__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __moonrise__b__ = true;
                        break;
                    case 4:
                        __moonset__ = formatterResolver.GetFormatterWithVerify<long?>().Deserialize(ref reader, formatterResolver);
                        __moonset__b__ = true;
                        break;
                    case 5:
                        __moon_phase__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __moon_phase__b__ = true;
                        break;
                    case 6:
                        __temp__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Temp>().Deserialize(ref reader, formatterResolver);
                        __temp__b__ = true;
                        break;
                    case 7:
                        __feels_like__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Feels_Like>().Deserialize(ref reader, formatterResolver);
                        __feels_like__b__ = true;
                        break;
                    case 8:
                        __pressure__ = reader.ReadSingle();
                        __pressure__b__ = true;
                        break;
                    case 9:
                        __humidity__ = reader.ReadInt32();
                        __humidity__b__ = true;
                        break;
                    case 10:
                        __dew_point__ = reader.ReadSingle();
                        __dew_point__b__ = true;
                        break;
                    case 11:
                        __wind_speed__ = reader.ReadSingle();
                        __wind_speed__b__ = true;
                        break;
                    case 12:
                        __wind_gust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __wind_gust__b__ = true;
                        break;
                    case 13:
                        __wind_deg__ = reader.ReadInt32();
                        __wind_deg__b__ = true;
                        break;
                    case 14:
                        __clouds__ = reader.ReadInt32();
                        __clouds__b__ = true;
                        break;
                    case 15:
                        __pop__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __pop__b__ = true;
                        break;
                    case 16:
                        __uvi__ = reader.ReadSingle();
                        __uvi__b__ = true;
                        break;
                    case 17:
                        __visibility__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __visibility__b__ = true;
                        break;
                    case 18:
                        __rain__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __rain__b__ = true;
                        break;
                    case 19:
                        __snow__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __snow__b__ = true;
                        break;
                    case 20:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Weather[]>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily();
            if(__dt__b__) ____result.dt = __dt__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__moonrise__b__) ____result.moonrise = __moonrise__;
            if(__moonset__b__) ____result.moonset = __moonset__;
            if(__moon_phase__b__) ____result.moon_phase = __moon_phase__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__feels_like__b__) ____result.feels_like = __feels_like__;
            if(__pressure__b__) ____result.pressure = __pressure__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__dew_point__b__) ____result.dew_point = __dew_point__;
            if(__wind_speed__b__) ____result.wind_speed = __wind_speed__;
            if(__wind_gust__b__) ____result.wind_gust = __wind_gust__;
            if(__wind_deg__b__) ____result.wind_deg = __wind_deg__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__uvi__b__) ____result.uvi = __uvi__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__rain__b__) ____result.rain = __rain__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__weather__b__) ____result.weather = __weather__;

            return ____result;
        }
    }


    public sealed class AlertFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sender_name"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("event"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("start"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("end"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("sender_name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("event"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("start"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("end"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.sender_name);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value._event);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt64(value.start);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt64(value.end);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.description);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __sender_name__ = default(string);
            var __sender_name__b__ = false;
            var ___event__ = default(string);
            var ___event__b__ = false;
            var __start__ = default(long);
            var __start__b__ = false;
            var __end__ = default(long);
            var __end__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __sender_name__ = reader.ReadString();
                        __sender_name__b__ = true;
                        break;
                    case 1:
                        ___event__ = reader.ReadString();
                        ___event__b__ = true;
                        break;
                    case 2:
                        __start__ = reader.ReadInt64();
                        __start__b__ = true;
                        break;
                    case 3:
                        __end__ = reader.ReadInt64();
                        __end__b__ = true;
                        break;
                    case 4:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert();
            if(__sender_name__b__) ____result.sender_name = __sender_name__;
            if(___event__b__) ____result._event = ___event__;
            if(__start__b__) ____result.start = __start__;
            if(__end__b__) ____result.end = __end__;
            if(__description__b__) ____result.description = __description__;

            return ____result;
        }
    }


    public sealed class MinutelyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MinutelyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dt"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitation"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("dt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitation"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.dt);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.precipitation);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __dt__ = default(long);
            var __dt__b__ = false;
            var __precipitation__ = default(float);
            var __precipitation__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __dt__ = reader.ReadInt64();
                        __dt__b__ = true;
                        break;
                    case 1:
                        __precipitation__ = reader.ReadSingle();
                        __precipitation__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely();
            if(__dt__b__) ____result.dt = __dt__;
            if(__precipitation__b__) ____result.precipitation = __precipitation__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone_offset"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("current"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("hourly"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("minutely"), 8},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone_offset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("current"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("hourly"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daily"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("minutely"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt32(value.timezone_offset);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current>().Serialize(ref writer, value.current, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly[]>().Serialize(ref writer, value.hourly, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily[]>().Serialize(ref writer, value.daily, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert[]>().Serialize(ref writer, value.alerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely[]>().Serialize(ref writer, value.minutely, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __timezone_offset__ = default(int);
            var __timezone_offset__b__ = false;
            var __current__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current);
            var __current__b__ = false;
            var __hourly__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly[]);
            var __hourly__b__ = false;
            var __daily__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily[]);
            var __daily__b__ = false;
            var __alerts__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert[]);
            var __alerts__b__ = false;
            var __minutely__ = default(global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely[]);
            var __minutely__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 1:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 2:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 3:
                        __timezone_offset__ = reader.ReadInt32();
                        __timezone_offset__b__ = true;
                        break;
                    case 4:
                        __current__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Current>().Deserialize(ref reader, formatterResolver);
                        __current__b__ = true;
                        break;
                    case 5:
                        __hourly__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Hourly[]>().Deserialize(ref reader, formatterResolver);
                        __hourly__b__ = true;
                        break;
                    case 6:
                        __daily__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Daily[]>().Deserialize(ref reader, formatterResolver);
                        __daily__b__ = true;
                        break;
                    case 7:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Alert[]>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    case 8:
                        __minutely__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.OpenWeather.OneCall.Minutely[]>().Deserialize(ref reader, formatterResolver);
                        __minutely__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.OpenWeather.OneCall.Rootobject();
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__timezone_offset__b__) ____result.timezone_offset = __timezone_offset__;
            if(__current__b__) ____result.current = __current__;
            if(__hourly__b__) ____result.hourly = __hourly__;
            if(__daily__b__) ____result.daily = __daily__;
            if(__alerts__b__) ____result.alerts = __alerts__;
            if(__minutely__b__) ____result.minutely = __minutely__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.TomorrowIO
{
    using System;
    using Utf8Json;


    public sealed class ResponseFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Response>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ResponseFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("instruction"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("instruction"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Response value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.instruction);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Response Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __instruction__ = default(string);
            var __instruction__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __instruction__ = reader.ReadString();
                        __instruction__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Response();
            if(__instruction__b__) ____result.instruction = __instruction__;

            return ____result;
        }
    }


    public sealed class EventvaluesFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public EventvaluesFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("origin"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("title"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("headline"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("response"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("origin"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("title"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("headline"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("response"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.origin);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.title);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.headline);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Response[]>().Serialize(ref writer, value.response, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __origin__ = default(string);
            var __origin__b__ = false;
            var __title__ = default(string);
            var __title__b__ = false;
            var __headline__ = default(string);
            var __headline__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __response__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Response[]);
            var __response__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __origin__ = reader.ReadString();
                        __origin__b__ = true;
                        break;
                    case 1:
                        __title__ = reader.ReadString();
                        __title__b__ = true;
                        break;
                    case 2:
                        __headline__ = reader.ReadString();
                        __headline__b__ = true;
                        break;
                    case 3:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 4:
                        __response__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Response[]>().Deserialize(ref reader, formatterResolver);
                        __response__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues();
            if(__origin__b__) ____result.origin = __origin__;
            if(__title__b__) ____result.title = __title__;
            if(__headline__b__) ____result.headline = __headline__;
            if(__description__b__) ____result.description = __description__;
            if(__response__b__) ____result.response = __response__;

            return ____result;
        }
    }


    public sealed class EventFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Event>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public EventFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("insight"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startTime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("endTime"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("updateTime"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("certainty"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("urgency"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("eventValues"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("insight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("startTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("endTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("updateTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("certainty"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("urgency"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("eventValues"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Event value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.insight);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.startTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.endTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.updateTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.severity);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.certainty);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.urgency);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues>().Serialize(ref writer, value.eventValues, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Event Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __insight__ = default(string);
            var __insight__b__ = false;
            var __startTime__ = default(global::System.DateTimeOffset);
            var __startTime__b__ = false;
            var __endTime__ = default(global::System.DateTimeOffset);
            var __endTime__b__ = false;
            var __updateTime__ = default(global::System.DateTimeOffset);
            var __updateTime__b__ = false;
            var __severity__ = default(string);
            var __severity__b__ = false;
            var __certainty__ = default(string);
            var __certainty__b__ = false;
            var __urgency__ = default(string);
            var __urgency__b__ = false;
            var __eventValues__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues);
            var __eventValues__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __insight__ = reader.ReadString();
                        __insight__b__ = true;
                        break;
                    case 1:
                        __startTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __startTime__b__ = true;
                        break;
                    case 2:
                        __endTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __endTime__b__ = true;
                        break;
                    case 3:
                        __updateTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __updateTime__b__ = true;
                        break;
                    case 4:
                        __severity__ = reader.ReadString();
                        __severity__b__ = true;
                        break;
                    case 5:
                        __certainty__ = reader.ReadString();
                        __certainty__b__ = true;
                        break;
                    case 6:
                        __urgency__ = reader.ReadString();
                        __urgency__b__ = true;
                        break;
                    case 7:
                        __eventValues__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Eventvalues>().Deserialize(ref reader, formatterResolver);
                        __eventValues__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Event();
            if(__insight__b__) ____result.insight = __insight__;
            if(__startTime__b__) ____result.startTime = __startTime__;
            if(__endTime__b__) ____result.endTime = __endTime__;
            if(__updateTime__b__) ____result.updateTime = __updateTime__;
            if(__severity__b__) ____result.severity = __severity__;
            if(__certainty__b__) ____result.certainty = __certainty__;
            if(__urgency__b__) ____result.urgency = __urgency__;
            if(__eventValues__b__) ____result.eventValues = __eventValues__;

            return ____result;
        }
    }


    public sealed class AlertDataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.AlertData>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertDataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("events"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("events"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.AlertData value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Event[]>().Serialize(ref writer, value.events, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.AlertData Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __events__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Event[]);
            var __events__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __events__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Event[]>().Deserialize(ref reader, formatterResolver);
                        __events__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.AlertData();
            if(__events__b__) ____result.events = __events__;

            return ____result;
        }
    }


    public sealed class AlertRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.AlertRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("data"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.AlertRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.AlertData>().Serialize(ref writer, value.data, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.AlertRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __data__ = default(global::SimpleWeather.Weather_API.TomorrowIO.AlertData);
            var __data__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.AlertData>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.AlertRootobject();
            if(__data__b__) ____result.data = __data__;

            return ____result;
        }
    }


    public sealed class ValuesFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Values>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ValuesFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowAccumulation"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureApparent"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureMin"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureMax"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewPoint"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windGust"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressureSeaLevel"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationIntensity"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationProbability"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunriseTime"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunsetTime"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCover"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonPhase"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weatherCode"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("treeIndex"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("grassIndex"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weedIndex"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("epaIndex"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weatherCodeDay"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weatherCodeFullDay"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weatherCodeNight"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("particulateMatter25"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pollutantCO"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pollutantNO2"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pollutantSO2"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pollutantO3"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("particulateMatter10"), 31},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("snowAccumulation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureApparent"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureMin"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureMax"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressureSeaLevel"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationIntensity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationProbability"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunriseTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunsetTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonPhase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weatherCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("treeIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("grassIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weedIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("epaIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weatherCodeDay"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weatherCodeFullDay"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weatherCodeNight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("particulateMatter25"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pollutantCO"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pollutantNO2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pollutantSO2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pollutantO3"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("particulateMatter10"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Values value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.snowAccumulation, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.temperature, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.temperatureApparent, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.temperatureMin, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.temperatureMax, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.dewPoint, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.humidity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.windSpeed, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.windDirection, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.windGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.pressureSeaLevel, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitationIntensity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitationProbability, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.sunriseTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.sunsetTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.visibility, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloudCover, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.moonPhase, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.weatherCode, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.treeIndex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.grassIndex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[21]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.weedIndex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[22]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.epaIndex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[23]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.weatherCodeDay, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[24]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.weatherCodeFullDay, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[25]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.weatherCodeNight, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[26]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.particulateMatter25, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[27]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.pollutantCO, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[28]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.pollutantNO2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[29]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.pollutantSO2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.pollutantO3, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[31]);
            formatterResolver.GetFormatterWithVerify<double?>().Serialize(ref writer, value.particulateMatter10, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Values Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __snowAccumulation__ = default(float?);
            var __snowAccumulation__b__ = false;
            var __temperature__ = default(float?);
            var __temperature__b__ = false;
            var __temperatureApparent__ = default(float?);
            var __temperatureApparent__b__ = false;
            var __temperatureMin__ = default(float?);
            var __temperatureMin__b__ = false;
            var __temperatureMax__ = default(float?);
            var __temperatureMax__b__ = false;
            var __dewPoint__ = default(float?);
            var __dewPoint__b__ = false;
            var __humidity__ = default(float?);
            var __humidity__b__ = false;
            var __windSpeed__ = default(float?);
            var __windSpeed__b__ = false;
            var __windDirection__ = default(float?);
            var __windDirection__b__ = false;
            var __windGust__ = default(float?);
            var __windGust__b__ = false;
            var __pressureSeaLevel__ = default(float?);
            var __pressureSeaLevel__b__ = false;
            var __precipitationIntensity__ = default(float?);
            var __precipitationIntensity__b__ = false;
            var __precipitationProbability__ = default(float?);
            var __precipitationProbability__b__ = false;
            var __sunriseTime__ = default(global::System.DateTimeOffset);
            var __sunriseTime__b__ = false;
            var __sunsetTime__ = default(global::System.DateTimeOffset);
            var __sunsetTime__b__ = false;
            var __visibility__ = default(float?);
            var __visibility__b__ = false;
            var __cloudCover__ = default(float?);
            var __cloudCover__b__ = false;
            var __moonPhase__ = default(int?);
            var __moonPhase__b__ = false;
            var __weatherCode__ = default(int?);
            var __weatherCode__b__ = false;
            var __treeIndex__ = default(int?);
            var __treeIndex__b__ = false;
            var __grassIndex__ = default(int?);
            var __grassIndex__b__ = false;
            var __weedIndex__ = default(int?);
            var __weedIndex__b__ = false;
            var __epaIndex__ = default(int?);
            var __epaIndex__b__ = false;
            var __weatherCodeDay__ = default(int?);
            var __weatherCodeDay__b__ = false;
            var __weatherCodeFullDay__ = default(int?);
            var __weatherCodeFullDay__b__ = false;
            var __weatherCodeNight__ = default(int?);
            var __weatherCodeNight__b__ = false;
            var __particulateMatter25__ = default(double?);
            var __particulateMatter25__b__ = false;
            var __pollutantCO__ = default(double?);
            var __pollutantCO__b__ = false;
            var __pollutantNO2__ = default(double?);
            var __pollutantNO2__b__ = false;
            var __pollutantSO2__ = default(double?);
            var __pollutantSO2__b__ = false;
            var __pollutantO3__ = default(double?);
            var __pollutantO3__b__ = false;
            var __particulateMatter10__ = default(double?);
            var __particulateMatter10__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __snowAccumulation__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __snowAccumulation__b__ = true;
                        break;
                    case 1:
                        __temperature__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __temperature__b__ = true;
                        break;
                    case 2:
                        __temperatureApparent__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __temperatureApparent__b__ = true;
                        break;
                    case 3:
                        __temperatureMin__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __temperatureMin__b__ = true;
                        break;
                    case 4:
                        __temperatureMax__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __temperatureMax__b__ = true;
                        break;
                    case 5:
                        __dewPoint__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __dewPoint__b__ = true;
                        break;
                    case 6:
                        __humidity__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __humidity__b__ = true;
                        break;
                    case 7:
                        __windSpeed__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __windSpeed__b__ = true;
                        break;
                    case 8:
                        __windDirection__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __windDirection__b__ = true;
                        break;
                    case 9:
                        __windGust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __windGust__b__ = true;
                        break;
                    case 10:
                        __pressureSeaLevel__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __pressureSeaLevel__b__ = true;
                        break;
                    case 11:
                        __precipitationIntensity__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitationIntensity__b__ = true;
                        break;
                    case 12:
                        __precipitationProbability__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitationProbability__b__ = true;
                        break;
                    case 13:
                        __sunriseTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __sunriseTime__b__ = true;
                        break;
                    case 14:
                        __sunsetTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __sunsetTime__b__ = true;
                        break;
                    case 15:
                        __visibility__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __visibility__b__ = true;
                        break;
                    case 16:
                        __cloudCover__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloudCover__b__ = true;
                        break;
                    case 17:
                        __moonPhase__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __moonPhase__b__ = true;
                        break;
                    case 18:
                        __weatherCode__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __weatherCode__b__ = true;
                        break;
                    case 19:
                        __treeIndex__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __treeIndex__b__ = true;
                        break;
                    case 20:
                        __grassIndex__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __grassIndex__b__ = true;
                        break;
                    case 21:
                        __weedIndex__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __weedIndex__b__ = true;
                        break;
                    case 22:
                        __epaIndex__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __epaIndex__b__ = true;
                        break;
                    case 23:
                        __weatherCodeDay__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __weatherCodeDay__b__ = true;
                        break;
                    case 24:
                        __weatherCodeFullDay__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __weatherCodeFullDay__b__ = true;
                        break;
                    case 25:
                        __weatherCodeNight__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __weatherCodeNight__b__ = true;
                        break;
                    case 26:
                        __particulateMatter25__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __particulateMatter25__b__ = true;
                        break;
                    case 27:
                        __pollutantCO__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __pollutantCO__b__ = true;
                        break;
                    case 28:
                        __pollutantNO2__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __pollutantNO2__b__ = true;
                        break;
                    case 29:
                        __pollutantSO2__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __pollutantSO2__b__ = true;
                        break;
                    case 30:
                        __pollutantO3__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __pollutantO3__b__ = true;
                        break;
                    case 31:
                        __particulateMatter10__ = formatterResolver.GetFormatterWithVerify<double?>().Deserialize(ref reader, formatterResolver);
                        __particulateMatter10__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Values();
            if(__snowAccumulation__b__) ____result.snowAccumulation = __snowAccumulation__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__temperatureApparent__b__) ____result.temperatureApparent = __temperatureApparent__;
            if(__temperatureMin__b__) ____result.temperatureMin = __temperatureMin__;
            if(__temperatureMax__b__) ____result.temperatureMax = __temperatureMax__;
            if(__dewPoint__b__) ____result.dewPoint = __dewPoint__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windGust__b__) ____result.windGust = __windGust__;
            if(__pressureSeaLevel__b__) ____result.pressureSeaLevel = __pressureSeaLevel__;
            if(__precipitationIntensity__b__) ____result.precipitationIntensity = __precipitationIntensity__;
            if(__precipitationProbability__b__) ____result.precipitationProbability = __precipitationProbability__;
            if(__sunriseTime__b__) ____result.sunriseTime = __sunriseTime__;
            if(__sunsetTime__b__) ____result.sunsetTime = __sunsetTime__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__cloudCover__b__) ____result.cloudCover = __cloudCover__;
            if(__moonPhase__b__) ____result.moonPhase = __moonPhase__;
            if(__weatherCode__b__) ____result.weatherCode = __weatherCode__;
            if(__treeIndex__b__) ____result.treeIndex = __treeIndex__;
            if(__grassIndex__b__) ____result.grassIndex = __grassIndex__;
            if(__weedIndex__b__) ____result.weedIndex = __weedIndex__;
            if(__epaIndex__b__) ____result.epaIndex = __epaIndex__;
            if(__weatherCodeDay__b__) ____result.weatherCodeDay = __weatherCodeDay__;
            if(__weatherCodeFullDay__b__) ____result.weatherCodeFullDay = __weatherCodeFullDay__;
            if(__weatherCodeNight__b__) ____result.weatherCodeNight = __weatherCodeNight__;
            if(__particulateMatter25__b__) ____result.particulateMatter25 = __particulateMatter25__;
            if(__pollutantCO__b__) ____result.pollutantCO = __pollutantCO__;
            if(__pollutantNO2__b__) ____result.pollutantNO2 = __pollutantNO2__;
            if(__pollutantSO2__b__) ____result.pollutantSO2 = __pollutantSO2__;
            if(__pollutantO3__b__) ____result.pollutantO3 = __pollutantO3__;
            if(__particulateMatter10__b__) ____result.particulateMatter10 = __particulateMatter10__;

            return ____result;
        }
    }


    public sealed class IntervalFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Interval>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public IntervalFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startTime"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("values"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("startTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("values"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Interval value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.startTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Values>().Serialize(ref writer, value.values, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Interval Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __startTime__ = default(global::System.DateTimeOffset);
            var __startTime__b__ = false;
            var __values__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Values);
            var __values__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __startTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __startTime__b__ = true;
                        break;
                    case 1:
                        __values__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Values>().Deserialize(ref reader, formatterResolver);
                        __values__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Interval();
            if(__startTime__b__) ____result.startTime = __startTime__;
            if(__values__b__) ____result.values = __values__;

            return ____result;
        }
    }


    public sealed class TimelineFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Timeline>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimelineFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestep"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startTime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("endTime"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("intervals"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("timestep"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("startTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("endTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("intervals"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Timeline value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.timestep);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.startTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.endTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Interval[]>().Serialize(ref writer, value.intervals, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Timeline Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __timestep__ = default(string);
            var __timestep__b__ = false;
            var __startTime__ = default(global::System.DateTimeOffset);
            var __startTime__b__ = false;
            var __endTime__ = default(global::System.DateTimeOffset);
            var __endTime__b__ = false;
            var __intervals__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Interval[]);
            var __intervals__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __timestep__ = reader.ReadString();
                        __timestep__b__ = true;
                        break;
                    case 1:
                        __startTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __startTime__b__ = true;
                        break;
                    case 2:
                        __endTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __endTime__b__ = true;
                        break;
                    case 3:
                        __intervals__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Interval[]>().Deserialize(ref reader, formatterResolver);
                        __intervals__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Timeline();
            if(__timestep__b__) ____result.timestep = __timestep__;
            if(__startTime__b__) ____result.startTime = __startTime__;
            if(__endTime__b__) ____result.endTime = __endTime__;
            if(__intervals__b__) ____result.intervals = __intervals__;

            return ____result;
        }
    }


    public sealed class DataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Data>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timelines"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("timelines"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Data value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Timeline[]>().Serialize(ref writer, value.timelines, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Data Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __timelines__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Timeline[]);
            var __timelines__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __timelines__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Timeline[]>().Deserialize(ref reader, formatterResolver);
                        __timelines__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Data();
            if(__timelines__b__) ____result.timelines = __timelines__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("data"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Data>().Serialize(ref writer, value.data, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __data__ = default(global::SimpleWeather.Weather_API.TomorrowIO.Data);
            var __data__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.TomorrowIO.Data>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Rootobject();
            if(__data__b__) ____result.data = __data__;

            return ____result;
        }
    }


    public sealed class MetaFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.TomorrowIO.Meta>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MetaFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestep"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("from"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("to"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("field"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timesteps"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("timestep"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("from"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("to"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("field"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timesteps"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.TomorrowIO.Meta value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.timestep);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.from);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.to);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.field);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.timesteps, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.TomorrowIO.Meta Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __timestep__ = default(string);
            var __timestep__b__ = false;
            var __from__ = default(string);
            var __from__b__ = false;
            var __to__ = default(string);
            var __to__b__ = false;
            var __field__ = default(string);
            var __field__b__ = false;
            var __timesteps__ = default(string[]);
            var __timesteps__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __timestep__ = reader.ReadString();
                        __timestep__b__ = true;
                        break;
                    case 1:
                        __from__ = reader.ReadString();
                        __from__b__ = true;
                        break;
                    case 2:
                        __to__ = reader.ReadString();
                        __to__b__ = true;
                        break;
                    case 3:
                        __field__ = reader.ReadString();
                        __field__b__ = true;
                        break;
                    case 4:
                        __timesteps__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __timesteps__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.TomorrowIO.Meta();
            if(__timestep__b__) ____result.timestep = __timestep__;
            if(__from__b__) ____result.from = __from__;
            if(__to__b__) ____result.to = __to__;
            if(__field__b__) ____result.field = __field__;
            if(__timesteps__b__) ____result.timesteps = __timesteps__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherApi
{
    using System;
    using Utf8Json;


    public sealed class LocationFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Location>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LocationFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("region"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("tz_id"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("localtime_epoch"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("localtime"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("region"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("tz_id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("localtime_epoch"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("localtime"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Location value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.region);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.tz_id);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteInt64(value.localtime_epoch);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.localtime);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Location Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __name__ = default(string);
            var __name__b__ = false;
            var __region__ = default(string);
            var __region__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __tz_id__ = default(string);
            var __tz_id__b__ = false;
            var __localtime_epoch__ = default(long);
            var __localtime_epoch__b__ = false;
            var __localtime__ = default(string);
            var __localtime__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 1:
                        __region__ = reader.ReadString();
                        __region__b__ = true;
                        break;
                    case 2:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 3:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 4:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 5:
                        __tz_id__ = reader.ReadString();
                        __tz_id__b__ = true;
                        break;
                    case 6:
                        __localtime_epoch__ = reader.ReadInt64();
                        __localtime_epoch__b__ = true;
                        break;
                    case 7:
                        __localtime__ = reader.ReadString();
                        __localtime__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Location();
            if(__name__b__) ____result.name = __name__;
            if(__region__b__) ____result.region = __region__;
            if(__country__b__) ____result.country = __country__;
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__tz_id__b__) ____result.tz_id = __tz_id__;
            if(__localtime_epoch__b__) ____result.localtime_epoch = __localtime_epoch__;
            if(__localtime__b__) ____result.localtime = __localtime__;

            return ____result;
        }
    }


    public sealed class ConditionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Condition>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ConditionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("text"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("code"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("text"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Condition value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.text);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.code, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Condition Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __text__ = default(string);
            var __text__b__ = false;
            var __icon__ = default(string);
            var __icon__b__ = false;
            var __code__ = default(int?);
            var __code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __text__ = reader.ReadString();
                        __text__b__ = true;
                        break;
                    case 1:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 2:
                        __code__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Condition();
            if(__text__b__) ____result.text = __text__;
            if(__icon__b__) ____result.icon = __icon__;
            if(__code__b__) ____result.code = __code__;

            return ____result;
        }
    }


    public sealed class Air_QualityFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Air_Quality>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public Air_QualityFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("co"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("no2"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("o3"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("so2"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm2_5"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pm10"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("usepaindex"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gbdefraindex"), 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("co"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("no2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("o3"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("so2"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm2_5"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pm10"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("usepaindex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gbdefraindex"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Air_Quality value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.co, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.no2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.o3, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.so2, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.pm2_5, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.pm10, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.usepaindex, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.gbdefraindex, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Air_Quality Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __co__ = default(float?);
            var __co__b__ = false;
            var __no2__ = default(float?);
            var __no2__b__ = false;
            var __o3__ = default(float?);
            var __o3__b__ = false;
            var __so2__ = default(float?);
            var __so2__b__ = false;
            var __pm2_5__ = default(float?);
            var __pm2_5__b__ = false;
            var __pm10__ = default(float?);
            var __pm10__b__ = false;
            var __usepaindex__ = default(int?);
            var __usepaindex__b__ = false;
            var __gbdefraindex__ = default(int?);
            var __gbdefraindex__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __co__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __co__b__ = true;
                        break;
                    case 1:
                        __no2__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __no2__b__ = true;
                        break;
                    case 2:
                        __o3__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __o3__b__ = true;
                        break;
                    case 3:
                        __so2__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __so2__b__ = true;
                        break;
                    case 4:
                        __pm2_5__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __pm2_5__b__ = true;
                        break;
                    case 5:
                        __pm10__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __pm10__b__ = true;
                        break;
                    case 6:
                        __usepaindex__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __usepaindex__b__ = true;
                        break;
                    case 7:
                        __gbdefraindex__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __gbdefraindex__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Air_Quality();
            if(__co__b__) ____result.co = __co__;
            if(__no2__b__) ____result.no2 = __no2__;
            if(__o3__b__) ____result.o3 = __o3__;
            if(__so2__b__) ____result.so2 = __so2__;
            if(__pm2_5__b__) ____result.pm2_5 = __pm2_5__;
            if(__pm10__b__) ____result.pm10 = __pm10__;
            if(__usepaindex__b__) ____result.usepaindex = __usepaindex__;
            if(__gbdefraindex__b__) ____result.gbdefraindex = __gbdefraindex__;

            return ____result;
        }
    }


    public sealed class CurrentFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Current>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("last_updated_epoch"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("last_updated"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_c"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_f"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("is_day"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("condition"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_mph"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_kph"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_degree"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_dir"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure_mb"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure_in"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_mm"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_in"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_c"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_f"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_km"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_miles"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gust_mph"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gust_kph"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("air_quality"), 23},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("last_updated_epoch"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("last_updated"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("is_day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("condition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_kph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_degree"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_dir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure_mb"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_km"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_miles"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gust_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gust_kph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("air_quality"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Current value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.last_updated_epoch);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.last_updated);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.temp_c);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.temp_f);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteInt32(value.is_day);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Condition>().Serialize(ref writer, value.condition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.wind_mph);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.wind_kph);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteInt32(value.wind_degree);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.wind_dir);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.pressure_mb);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.pressure_in);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.precip_mm);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.precip_in);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteInt32(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteInt32(value.cloud);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.feelslike_c);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.feelslike_f);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.vis_km);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteSingle(value.vis_miles);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.uv);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.gust_mph);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.gust_kph);
            writer.WriteRaw(this.____stringByteKeys[23]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Air_Quality>().Serialize(ref writer, value.air_quality, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Current Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __last_updated_epoch__ = default(long);
            var __last_updated_epoch__b__ = false;
            var __last_updated__ = default(string);
            var __last_updated__b__ = false;
            var __temp_c__ = default(float);
            var __temp_c__b__ = false;
            var __temp_f__ = default(float);
            var __temp_f__b__ = false;
            var __is_day__ = default(int);
            var __is_day__b__ = false;
            var __condition__ = default(global::SimpleWeather.Weather_API.WeatherApi.Condition);
            var __condition__b__ = false;
            var __wind_mph__ = default(float);
            var __wind_mph__b__ = false;
            var __wind_kph__ = default(float);
            var __wind_kph__b__ = false;
            var __wind_degree__ = default(int);
            var __wind_degree__b__ = false;
            var __wind_dir__ = default(string);
            var __wind_dir__b__ = false;
            var __pressure_mb__ = default(float);
            var __pressure_mb__b__ = false;
            var __pressure_in__ = default(float);
            var __pressure_in__b__ = false;
            var __precip_mm__ = default(float);
            var __precip_mm__b__ = false;
            var __precip_in__ = default(float);
            var __precip_in__b__ = false;
            var __humidity__ = default(int);
            var __humidity__b__ = false;
            var __cloud__ = default(int);
            var __cloud__b__ = false;
            var __feelslike_c__ = default(float);
            var __feelslike_c__b__ = false;
            var __feelslike_f__ = default(float);
            var __feelslike_f__b__ = false;
            var __vis_km__ = default(float);
            var __vis_km__b__ = false;
            var __vis_miles__ = default(float);
            var __vis_miles__b__ = false;
            var __uv__ = default(float);
            var __uv__b__ = false;
            var __gust_mph__ = default(float);
            var __gust_mph__b__ = false;
            var __gust_kph__ = default(float);
            var __gust_kph__b__ = false;
            var __air_quality__ = default(global::SimpleWeather.Weather_API.WeatherApi.Air_Quality);
            var __air_quality__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __last_updated_epoch__ = reader.ReadInt64();
                        __last_updated_epoch__b__ = true;
                        break;
                    case 1:
                        __last_updated__ = reader.ReadString();
                        __last_updated__b__ = true;
                        break;
                    case 2:
                        __temp_c__ = reader.ReadSingle();
                        __temp_c__b__ = true;
                        break;
                    case 3:
                        __temp_f__ = reader.ReadSingle();
                        __temp_f__b__ = true;
                        break;
                    case 4:
                        __is_day__ = reader.ReadInt32();
                        __is_day__b__ = true;
                        break;
                    case 5:
                        __condition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Condition>().Deserialize(ref reader, formatterResolver);
                        __condition__b__ = true;
                        break;
                    case 6:
                        __wind_mph__ = reader.ReadSingle();
                        __wind_mph__b__ = true;
                        break;
                    case 7:
                        __wind_kph__ = reader.ReadSingle();
                        __wind_kph__b__ = true;
                        break;
                    case 8:
                        __wind_degree__ = reader.ReadInt32();
                        __wind_degree__b__ = true;
                        break;
                    case 9:
                        __wind_dir__ = reader.ReadString();
                        __wind_dir__b__ = true;
                        break;
                    case 10:
                        __pressure_mb__ = reader.ReadSingle();
                        __pressure_mb__b__ = true;
                        break;
                    case 11:
                        __pressure_in__ = reader.ReadSingle();
                        __pressure_in__b__ = true;
                        break;
                    case 12:
                        __precip_mm__ = reader.ReadSingle();
                        __precip_mm__b__ = true;
                        break;
                    case 13:
                        __precip_in__ = reader.ReadSingle();
                        __precip_in__b__ = true;
                        break;
                    case 14:
                        __humidity__ = reader.ReadInt32();
                        __humidity__b__ = true;
                        break;
                    case 15:
                        __cloud__ = reader.ReadInt32();
                        __cloud__b__ = true;
                        break;
                    case 16:
                        __feelslike_c__ = reader.ReadSingle();
                        __feelslike_c__b__ = true;
                        break;
                    case 17:
                        __feelslike_f__ = reader.ReadSingle();
                        __feelslike_f__b__ = true;
                        break;
                    case 18:
                        __vis_km__ = reader.ReadSingle();
                        __vis_km__b__ = true;
                        break;
                    case 19:
                        __vis_miles__ = reader.ReadSingle();
                        __vis_miles__b__ = true;
                        break;
                    case 20:
                        __uv__ = reader.ReadSingle();
                        __uv__b__ = true;
                        break;
                    case 21:
                        __gust_mph__ = reader.ReadSingle();
                        __gust_mph__b__ = true;
                        break;
                    case 22:
                        __gust_kph__ = reader.ReadSingle();
                        __gust_kph__b__ = true;
                        break;
                    case 23:
                        __air_quality__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Air_Quality>().Deserialize(ref reader, formatterResolver);
                        __air_quality__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Current();
            if(__last_updated_epoch__b__) ____result.last_updated_epoch = __last_updated_epoch__;
            if(__last_updated__b__) ____result.last_updated = __last_updated__;
            if(__temp_c__b__) ____result.temp_c = __temp_c__;
            if(__temp_f__b__) ____result.temp_f = __temp_f__;
            if(__is_day__b__) ____result.is_day = __is_day__;
            if(__condition__b__) ____result.condition = __condition__;
            if(__wind_mph__b__) ____result.wind_mph = __wind_mph__;
            if(__wind_kph__b__) ____result.wind_kph = __wind_kph__;
            if(__wind_degree__b__) ____result.wind_degree = __wind_degree__;
            if(__wind_dir__b__) ____result.wind_dir = __wind_dir__;
            if(__pressure_mb__b__) ____result.pressure_mb = __pressure_mb__;
            if(__pressure_in__b__) ____result.pressure_in = __pressure_in__;
            if(__precip_mm__b__) ____result.precip_mm = __precip_mm__;
            if(__precip_in__b__) ____result.precip_in = __precip_in__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__cloud__b__) ____result.cloud = __cloud__;
            if(__feelslike_c__b__) ____result.feelslike_c = __feelslike_c__;
            if(__feelslike_f__b__) ____result.feelslike_f = __feelslike_f__;
            if(__vis_km__b__) ____result.vis_km = __vis_km__;
            if(__vis_miles__b__) ____result.vis_miles = __vis_miles__;
            if(__uv__b__) ____result.uv = __uv__;
            if(__gust_mph__b__) ____result.gust_mph = __gust_mph__;
            if(__gust_kph__b__) ____result.gust_kph = __gust_kph__;
            if(__air_quality__b__) ____result.air_quality = __air_quality__;

            return ____result;
        }
    }


    public sealed class DayFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Day>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DayFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("maxtemp_c"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("maxtemp_f"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("mintemp_c"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("mintemp_f"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avgtemp_c"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avgtemp_f"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("maxwind_mph"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("maxwind_kph"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("totalprecip_mm"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("totalprecip_in"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avgvis_km"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avgvis_miles"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("avghumidity"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily_will_it_rain"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily_chance_of_rain"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily_will_it_snow"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daily_chance_of_snow"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("condition"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 18},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("maxtemp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("maxtemp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("mintemp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("mintemp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("avgtemp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("avgtemp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("maxwind_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("maxwind_kph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("totalprecip_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("totalprecip_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("avgvis_km"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("avgvis_miles"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("avghumidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daily_will_it_rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daily_chance_of_rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daily_will_it_snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daily_chance_of_snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("condition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Day value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.maxtemp_c);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.maxtemp_f);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.mintemp_c);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.mintemp_f);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.avgtemp_c);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.avgtemp_f);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.maxwind_mph);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.maxwind_kph);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.totalprecip_mm);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.totalprecip_in);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.avgvis_km);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.avgvis_miles);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.avghumidity);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.daily_will_it_rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.daily_chance_of_rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.daily_will_it_snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.daily_chance_of_snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Condition>().Serialize(ref writer, value.condition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.uv);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Day Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __maxtemp_c__ = default(float);
            var __maxtemp_c__b__ = false;
            var __maxtemp_f__ = default(float);
            var __maxtemp_f__b__ = false;
            var __mintemp_c__ = default(float);
            var __mintemp_c__b__ = false;
            var __mintemp_f__ = default(float);
            var __mintemp_f__b__ = false;
            var __avgtemp_c__ = default(float);
            var __avgtemp_c__b__ = false;
            var __avgtemp_f__ = default(float);
            var __avgtemp_f__b__ = false;
            var __maxwind_mph__ = default(float);
            var __maxwind_mph__b__ = false;
            var __maxwind_kph__ = default(float);
            var __maxwind_kph__b__ = false;
            var __totalprecip_mm__ = default(float);
            var __totalprecip_mm__b__ = false;
            var __totalprecip_in__ = default(float);
            var __totalprecip_in__b__ = false;
            var __avgvis_km__ = default(float);
            var __avgvis_km__b__ = false;
            var __avgvis_miles__ = default(float);
            var __avgvis_miles__b__ = false;
            var __avghumidity__ = default(float);
            var __avghumidity__b__ = false;
            var __daily_will_it_rain__ = default(int?);
            var __daily_will_it_rain__b__ = false;
            var __daily_chance_of_rain__ = default(int?);
            var __daily_chance_of_rain__b__ = false;
            var __daily_will_it_snow__ = default(int?);
            var __daily_will_it_snow__b__ = false;
            var __daily_chance_of_snow__ = default(int?);
            var __daily_chance_of_snow__b__ = false;
            var __condition__ = default(global::SimpleWeather.Weather_API.WeatherApi.Condition);
            var __condition__b__ = false;
            var __uv__ = default(float);
            var __uv__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __maxtemp_c__ = reader.ReadSingle();
                        __maxtemp_c__b__ = true;
                        break;
                    case 1:
                        __maxtemp_f__ = reader.ReadSingle();
                        __maxtemp_f__b__ = true;
                        break;
                    case 2:
                        __mintemp_c__ = reader.ReadSingle();
                        __mintemp_c__b__ = true;
                        break;
                    case 3:
                        __mintemp_f__ = reader.ReadSingle();
                        __mintemp_f__b__ = true;
                        break;
                    case 4:
                        __avgtemp_c__ = reader.ReadSingle();
                        __avgtemp_c__b__ = true;
                        break;
                    case 5:
                        __avgtemp_f__ = reader.ReadSingle();
                        __avgtemp_f__b__ = true;
                        break;
                    case 6:
                        __maxwind_mph__ = reader.ReadSingle();
                        __maxwind_mph__b__ = true;
                        break;
                    case 7:
                        __maxwind_kph__ = reader.ReadSingle();
                        __maxwind_kph__b__ = true;
                        break;
                    case 8:
                        __totalprecip_mm__ = reader.ReadSingle();
                        __totalprecip_mm__b__ = true;
                        break;
                    case 9:
                        __totalprecip_in__ = reader.ReadSingle();
                        __totalprecip_in__b__ = true;
                        break;
                    case 10:
                        __avgvis_km__ = reader.ReadSingle();
                        __avgvis_km__b__ = true;
                        break;
                    case 11:
                        __avgvis_miles__ = reader.ReadSingle();
                        __avgvis_miles__b__ = true;
                        break;
                    case 12:
                        __avghumidity__ = reader.ReadSingle();
                        __avghumidity__b__ = true;
                        break;
                    case 13:
                        __daily_will_it_rain__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __daily_will_it_rain__b__ = true;
                        break;
                    case 14:
                        __daily_chance_of_rain__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __daily_chance_of_rain__b__ = true;
                        break;
                    case 15:
                        __daily_will_it_snow__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __daily_will_it_snow__b__ = true;
                        break;
                    case 16:
                        __daily_chance_of_snow__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __daily_chance_of_snow__b__ = true;
                        break;
                    case 17:
                        __condition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Condition>().Deserialize(ref reader, formatterResolver);
                        __condition__b__ = true;
                        break;
                    case 18:
                        __uv__ = reader.ReadSingle();
                        __uv__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Day();
            if(__maxtemp_c__b__) ____result.maxtemp_c = __maxtemp_c__;
            if(__maxtemp_f__b__) ____result.maxtemp_f = __maxtemp_f__;
            if(__mintemp_c__b__) ____result.mintemp_c = __mintemp_c__;
            if(__mintemp_f__b__) ____result.mintemp_f = __mintemp_f__;
            if(__avgtemp_c__b__) ____result.avgtemp_c = __avgtemp_c__;
            if(__avgtemp_f__b__) ____result.avgtemp_f = __avgtemp_f__;
            if(__maxwind_mph__b__) ____result.maxwind_mph = __maxwind_mph__;
            if(__maxwind_kph__b__) ____result.maxwind_kph = __maxwind_kph__;
            if(__totalprecip_mm__b__) ____result.totalprecip_mm = __totalprecip_mm__;
            if(__totalprecip_in__b__) ____result.totalprecip_in = __totalprecip_in__;
            if(__avgvis_km__b__) ____result.avgvis_km = __avgvis_km__;
            if(__avgvis_miles__b__) ____result.avgvis_miles = __avgvis_miles__;
            if(__avghumidity__b__) ____result.avghumidity = __avghumidity__;
            if(__daily_will_it_rain__b__) ____result.daily_will_it_rain = __daily_will_it_rain__;
            if(__daily_chance_of_rain__b__) ____result.daily_chance_of_rain = __daily_chance_of_rain__;
            if(__daily_will_it_snow__b__) ____result.daily_will_it_snow = __daily_will_it_snow__;
            if(__daily_chance_of_snow__b__) ____result.daily_chance_of_snow = __daily_chance_of_snow__;
            if(__condition__b__) ____result.condition = __condition__;
            if(__uv__b__) ____result.uv = __uv__;

            return ____result;
        }
    }


    public sealed class AstroFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Astro>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AstroFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moon_phase"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moon_illumination"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moon_phase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moon_illumination"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Astro value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.sunrise);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.sunset);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.moonrise);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.moonset);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.moon_phase);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.moon_illumination);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Astro Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __sunrise__ = default(string);
            var __sunrise__b__ = false;
            var __sunset__ = default(string);
            var __sunset__b__ = false;
            var __moonrise__ = default(string);
            var __moonrise__b__ = false;
            var __moonset__ = default(string);
            var __moonset__b__ = false;
            var __moon_phase__ = default(string);
            var __moon_phase__b__ = false;
            var __moon_illumination__ = default(string);
            var __moon_illumination__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __sunrise__ = reader.ReadString();
                        __sunrise__b__ = true;
                        break;
                    case 1:
                        __sunset__ = reader.ReadString();
                        __sunset__b__ = true;
                        break;
                    case 2:
                        __moonrise__ = reader.ReadString();
                        __moonrise__b__ = true;
                        break;
                    case 3:
                        __moonset__ = reader.ReadString();
                        __moonset__b__ = true;
                        break;
                    case 4:
                        __moon_phase__ = reader.ReadString();
                        __moon_phase__b__ = true;
                        break;
                    case 5:
                        __moon_illumination__ = reader.ReadString();
                        __moon_illumination__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Astro();
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__moonrise__b__) ____result.moonrise = __moonrise__;
            if(__moonset__b__) ____result.moonset = __moonset__;
            if(__moon_phase__b__) ____result.moon_phase = __moon_phase__;
            if(__moon_illumination__b__) ____result.moon_illumination = __moon_illumination__;

            return ____result;
        }
    }


    public sealed class HourFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Hour>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time_epoch"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_c"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_f"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("is_day"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("condition"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_mph"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_kph"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_degree"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_dir"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure_mb"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure_in"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_mm"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_in"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_c"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_f"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windchill_c"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windchill_f"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("heatindex_c"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("heatindex_f"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpoint_c"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpoint_f"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("will_it_rain"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("chance_of_rain"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("will_it_snow"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("chance_of_snow"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_km"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_miles"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gust_mph"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("gust_kph"), 31},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 32},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("time_epoch"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("is_day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("condition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_kph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_degree"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_dir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure_mb"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windchill_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windchill_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("heatindex_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("heatindex_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpoint_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpoint_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("will_it_rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("chance_of_rain"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("will_it_snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("chance_of_snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_km"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_miles"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gust_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("gust_kph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Hour value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.time_epoch);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.time);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.temp_c);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.temp_f);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteInt32(value.is_day);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Condition>().Serialize(ref writer, value.condition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.wind_mph);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.wind_kph);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteInt32(value.wind_degree);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.wind_dir);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.pressure_mb);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.pressure_in);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.precip_mm);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.precip_in);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteInt32(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteInt32(value.cloud);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.feelslike_c);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.feelslike_f);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.windchill_c);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteSingle(value.windchill_f);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.heatindex_c);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.heatindex_f);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.dewpoint_c);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.dewpoint_f);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteInt32(value.will_it_rain);
            writer.WriteRaw(this.____stringByteKeys[25]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.chance_of_rain, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteInt32(value.will_it_snow);
            writer.WriteRaw(this.____stringByteKeys[27]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.chance_of_snow, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteSingle(value.vis_km);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteSingle(value.vis_miles);
            writer.WriteRaw(this.____stringByteKeys[30]);
            writer.WriteSingle(value.gust_mph);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteSingle(value.gust_kph);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.WriteSingle(value.uv);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Hour Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __time_epoch__ = default(long);
            var __time_epoch__b__ = false;
            var __time__ = default(string);
            var __time__b__ = false;
            var __temp_c__ = default(float);
            var __temp_c__b__ = false;
            var __temp_f__ = default(float);
            var __temp_f__b__ = false;
            var __is_day__ = default(int);
            var __is_day__b__ = false;
            var __condition__ = default(global::SimpleWeather.Weather_API.WeatherApi.Condition);
            var __condition__b__ = false;
            var __wind_mph__ = default(float);
            var __wind_mph__b__ = false;
            var __wind_kph__ = default(float);
            var __wind_kph__b__ = false;
            var __wind_degree__ = default(int);
            var __wind_degree__b__ = false;
            var __wind_dir__ = default(string);
            var __wind_dir__b__ = false;
            var __pressure_mb__ = default(float);
            var __pressure_mb__b__ = false;
            var __pressure_in__ = default(float);
            var __pressure_in__b__ = false;
            var __precip_mm__ = default(float);
            var __precip_mm__b__ = false;
            var __precip_in__ = default(float);
            var __precip_in__b__ = false;
            var __humidity__ = default(int);
            var __humidity__b__ = false;
            var __cloud__ = default(int);
            var __cloud__b__ = false;
            var __feelslike_c__ = default(float);
            var __feelslike_c__b__ = false;
            var __feelslike_f__ = default(float);
            var __feelslike_f__b__ = false;
            var __windchill_c__ = default(float);
            var __windchill_c__b__ = false;
            var __windchill_f__ = default(float);
            var __windchill_f__b__ = false;
            var __heatindex_c__ = default(float);
            var __heatindex_c__b__ = false;
            var __heatindex_f__ = default(float);
            var __heatindex_f__b__ = false;
            var __dewpoint_c__ = default(float);
            var __dewpoint_c__b__ = false;
            var __dewpoint_f__ = default(float);
            var __dewpoint_f__b__ = false;
            var __will_it_rain__ = default(int);
            var __will_it_rain__b__ = false;
            var __chance_of_rain__ = default(int?);
            var __chance_of_rain__b__ = false;
            var __will_it_snow__ = default(int);
            var __will_it_snow__b__ = false;
            var __chance_of_snow__ = default(int?);
            var __chance_of_snow__b__ = false;
            var __vis_km__ = default(float);
            var __vis_km__b__ = false;
            var __vis_miles__ = default(float);
            var __vis_miles__b__ = false;
            var __gust_mph__ = default(float);
            var __gust_mph__b__ = false;
            var __gust_kph__ = default(float);
            var __gust_kph__b__ = false;
            var __uv__ = default(float);
            var __uv__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __time_epoch__ = reader.ReadInt64();
                        __time_epoch__b__ = true;
                        break;
                    case 1:
                        __time__ = reader.ReadString();
                        __time__b__ = true;
                        break;
                    case 2:
                        __temp_c__ = reader.ReadSingle();
                        __temp_c__b__ = true;
                        break;
                    case 3:
                        __temp_f__ = reader.ReadSingle();
                        __temp_f__b__ = true;
                        break;
                    case 4:
                        __is_day__ = reader.ReadInt32();
                        __is_day__b__ = true;
                        break;
                    case 5:
                        __condition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Condition>().Deserialize(ref reader, formatterResolver);
                        __condition__b__ = true;
                        break;
                    case 6:
                        __wind_mph__ = reader.ReadSingle();
                        __wind_mph__b__ = true;
                        break;
                    case 7:
                        __wind_kph__ = reader.ReadSingle();
                        __wind_kph__b__ = true;
                        break;
                    case 8:
                        __wind_degree__ = reader.ReadInt32();
                        __wind_degree__b__ = true;
                        break;
                    case 9:
                        __wind_dir__ = reader.ReadString();
                        __wind_dir__b__ = true;
                        break;
                    case 10:
                        __pressure_mb__ = reader.ReadSingle();
                        __pressure_mb__b__ = true;
                        break;
                    case 11:
                        __pressure_in__ = reader.ReadSingle();
                        __pressure_in__b__ = true;
                        break;
                    case 12:
                        __precip_mm__ = reader.ReadSingle();
                        __precip_mm__b__ = true;
                        break;
                    case 13:
                        __precip_in__ = reader.ReadSingle();
                        __precip_in__b__ = true;
                        break;
                    case 14:
                        __humidity__ = reader.ReadInt32();
                        __humidity__b__ = true;
                        break;
                    case 15:
                        __cloud__ = reader.ReadInt32();
                        __cloud__b__ = true;
                        break;
                    case 16:
                        __feelslike_c__ = reader.ReadSingle();
                        __feelslike_c__b__ = true;
                        break;
                    case 17:
                        __feelslike_f__ = reader.ReadSingle();
                        __feelslike_f__b__ = true;
                        break;
                    case 18:
                        __windchill_c__ = reader.ReadSingle();
                        __windchill_c__b__ = true;
                        break;
                    case 19:
                        __windchill_f__ = reader.ReadSingle();
                        __windchill_f__b__ = true;
                        break;
                    case 20:
                        __heatindex_c__ = reader.ReadSingle();
                        __heatindex_c__b__ = true;
                        break;
                    case 21:
                        __heatindex_f__ = reader.ReadSingle();
                        __heatindex_f__b__ = true;
                        break;
                    case 22:
                        __dewpoint_c__ = reader.ReadSingle();
                        __dewpoint_c__b__ = true;
                        break;
                    case 23:
                        __dewpoint_f__ = reader.ReadSingle();
                        __dewpoint_f__b__ = true;
                        break;
                    case 24:
                        __will_it_rain__ = reader.ReadInt32();
                        __will_it_rain__b__ = true;
                        break;
                    case 25:
                        __chance_of_rain__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __chance_of_rain__b__ = true;
                        break;
                    case 26:
                        __will_it_snow__ = reader.ReadInt32();
                        __will_it_snow__b__ = true;
                        break;
                    case 27:
                        __chance_of_snow__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __chance_of_snow__b__ = true;
                        break;
                    case 28:
                        __vis_km__ = reader.ReadSingle();
                        __vis_km__b__ = true;
                        break;
                    case 29:
                        __vis_miles__ = reader.ReadSingle();
                        __vis_miles__b__ = true;
                        break;
                    case 30:
                        __gust_mph__ = reader.ReadSingle();
                        __gust_mph__b__ = true;
                        break;
                    case 31:
                        __gust_kph__ = reader.ReadSingle();
                        __gust_kph__b__ = true;
                        break;
                    case 32:
                        __uv__ = reader.ReadSingle();
                        __uv__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Hour();
            if(__time_epoch__b__) ____result.time_epoch = __time_epoch__;
            if(__time__b__) ____result.time = __time__;
            if(__temp_c__b__) ____result.temp_c = __temp_c__;
            if(__temp_f__b__) ____result.temp_f = __temp_f__;
            if(__is_day__b__) ____result.is_day = __is_day__;
            if(__condition__b__) ____result.condition = __condition__;
            if(__wind_mph__b__) ____result.wind_mph = __wind_mph__;
            if(__wind_kph__b__) ____result.wind_kph = __wind_kph__;
            if(__wind_degree__b__) ____result.wind_degree = __wind_degree__;
            if(__wind_dir__b__) ____result.wind_dir = __wind_dir__;
            if(__pressure_mb__b__) ____result.pressure_mb = __pressure_mb__;
            if(__pressure_in__b__) ____result.pressure_in = __pressure_in__;
            if(__precip_mm__b__) ____result.precip_mm = __precip_mm__;
            if(__precip_in__b__) ____result.precip_in = __precip_in__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__cloud__b__) ____result.cloud = __cloud__;
            if(__feelslike_c__b__) ____result.feelslike_c = __feelslike_c__;
            if(__feelslike_f__b__) ____result.feelslike_f = __feelslike_f__;
            if(__windchill_c__b__) ____result.windchill_c = __windchill_c__;
            if(__windchill_f__b__) ____result.windchill_f = __windchill_f__;
            if(__heatindex_c__b__) ____result.heatindex_c = __heatindex_c__;
            if(__heatindex_f__b__) ____result.heatindex_f = __heatindex_f__;
            if(__dewpoint_c__b__) ____result.dewpoint_c = __dewpoint_c__;
            if(__dewpoint_f__b__) ____result.dewpoint_f = __dewpoint_f__;
            if(__will_it_rain__b__) ____result.will_it_rain = __will_it_rain__;
            if(__chance_of_rain__b__) ____result.chance_of_rain = __chance_of_rain__;
            if(__will_it_snow__b__) ____result.will_it_snow = __will_it_snow__;
            if(__chance_of_snow__b__) ____result.chance_of_snow = __chance_of_snow__;
            if(__vis_km__b__) ____result.vis_km = __vis_km__;
            if(__vis_miles__b__) ____result.vis_miles = __vis_miles__;
            if(__gust_mph__b__) ____result.gust_mph = __gust_mph__;
            if(__gust_kph__b__) ____result.gust_kph = __gust_kph__;
            if(__uv__b__) ____result.uv = __uv__;

            return ____result;
        }
    }


    public sealed class ForecastdayFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Forecastday>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastdayFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("date"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("date_epoch"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("day"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("astro"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("hour"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("date"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("date_epoch"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("day"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("astro"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("hour"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Forecastday value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.date);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt64(value.date_epoch);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Day>().Serialize(ref writer, value.day, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Astro>().Serialize(ref writer, value.astro, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Hour[]>().Serialize(ref writer, value.hour, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Forecastday Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __date__ = default(string);
            var __date__b__ = false;
            var __date_epoch__ = default(long);
            var __date_epoch__b__ = false;
            var __day__ = default(global::SimpleWeather.Weather_API.WeatherApi.Day);
            var __day__b__ = false;
            var __astro__ = default(global::SimpleWeather.Weather_API.WeatherApi.Astro);
            var __astro__b__ = false;
            var __hour__ = default(global::SimpleWeather.Weather_API.WeatherApi.Hour[]);
            var __hour__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __date__ = reader.ReadString();
                        __date__b__ = true;
                        break;
                    case 1:
                        __date_epoch__ = reader.ReadInt64();
                        __date_epoch__b__ = true;
                        break;
                    case 2:
                        __day__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Day>().Deserialize(ref reader, formatterResolver);
                        __day__b__ = true;
                        break;
                    case 3:
                        __astro__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Astro>().Deserialize(ref reader, formatterResolver);
                        __astro__b__ = true;
                        break;
                    case 4:
                        __hour__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Hour[]>().Deserialize(ref reader, formatterResolver);
                        __hour__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Forecastday();
            if(__date__b__) ____result.date = __date__;
            if(__date_epoch__b__) ____result.date_epoch = __date_epoch__;
            if(__day__b__) ____result.day = __day__;
            if(__astro__b__) ____result.astro = __astro__;
            if(__hour__b__) ____result.hour = __hour__;

            return ____result;
        }
    }


    public sealed class ForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Forecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastday"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("forecastday"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Forecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Forecastday[]>().Serialize(ref writer, value.forecastday, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Forecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __forecastday__ = default(global::SimpleWeather.Weather_API.WeatherApi.Forecastday[]);
            var __forecastday__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __forecastday__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Forecastday[]>().Deserialize(ref reader, formatterResolver);
                        __forecastday__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Forecast();
            if(__forecastday__b__) ____result.forecastday = __forecastday__;

            return ____result;
        }
    }


    public sealed class AlertFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Alert>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("headline"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("msgtype"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("urgency"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("areas"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("category"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("certainty"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("event"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("note"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("effective"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expires"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("desc"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("instruction"), 12},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("headline"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("msgtype"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("urgency"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("areas"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("category"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("certainty"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("event"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("note"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("effective"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expires"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("desc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("instruction"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Alert value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.headline);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.msgtype);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.severity);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.urgency);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.areas);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.category);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.certainty);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value._event);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.note);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.effective, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.expires, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.desc);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.instruction);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Alert Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __headline__ = default(string);
            var __headline__b__ = false;
            var __msgtype__ = default(string);
            var __msgtype__b__ = false;
            var __severity__ = default(string);
            var __severity__b__ = false;
            var __urgency__ = default(string);
            var __urgency__b__ = false;
            var __areas__ = default(string);
            var __areas__b__ = false;
            var __category__ = default(string);
            var __category__b__ = false;
            var __certainty__ = default(string);
            var __certainty__b__ = false;
            var ___event__ = default(string);
            var ___event__b__ = false;
            var __note__ = default(string);
            var __note__b__ = false;
            var __effective__ = default(global::System.DateTimeOffset);
            var __effective__b__ = false;
            var __expires__ = default(global::System.DateTimeOffset);
            var __expires__b__ = false;
            var __desc__ = default(string);
            var __desc__b__ = false;
            var __instruction__ = default(string);
            var __instruction__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __headline__ = reader.ReadString();
                        __headline__b__ = true;
                        break;
                    case 1:
                        __msgtype__ = reader.ReadString();
                        __msgtype__b__ = true;
                        break;
                    case 2:
                        __severity__ = reader.ReadString();
                        __severity__b__ = true;
                        break;
                    case 3:
                        __urgency__ = reader.ReadString();
                        __urgency__b__ = true;
                        break;
                    case 4:
                        __areas__ = reader.ReadString();
                        __areas__b__ = true;
                        break;
                    case 5:
                        __category__ = reader.ReadString();
                        __category__b__ = true;
                        break;
                    case 6:
                        __certainty__ = reader.ReadString();
                        __certainty__b__ = true;
                        break;
                    case 7:
                        ___event__ = reader.ReadString();
                        ___event__b__ = true;
                        break;
                    case 8:
                        __note__ = reader.ReadString();
                        __note__b__ = true;
                        break;
                    case 9:
                        __effective__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __effective__b__ = true;
                        break;
                    case 10:
                        __expires__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __expires__b__ = true;
                        break;
                    case 11:
                        __desc__ = reader.ReadString();
                        __desc__b__ = true;
                        break;
                    case 12:
                        __instruction__ = reader.ReadString();
                        __instruction__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Alert();
            if(__headline__b__) ____result.headline = __headline__;
            if(__msgtype__b__) ____result.msgtype = __msgtype__;
            if(__severity__b__) ____result.severity = __severity__;
            if(__urgency__b__) ____result.urgency = __urgency__;
            if(__areas__b__) ____result.areas = __areas__;
            if(__category__b__) ____result.category = __category__;
            if(__certainty__b__) ____result.certainty = __certainty__;
            if(___event__b__) ____result._event = ___event__;
            if(__note__b__) ____result.note = __note__;
            if(__effective__b__) ____result.effective = __effective__;
            if(__expires__b__) ____result.expires = __expires__;
            if(__desc__b__) ____result.desc = __desc__;
            if(__instruction__b__) ____result.instruction = __instruction__;

            return ____result;
        }
    }


    public sealed class AlertsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Alerts>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alert"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("alert"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Alerts value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Alert[]>().Serialize(ref writer, value.alert, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Alerts Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __alert__ = default(global::SimpleWeather.Weather_API.WeatherApi.Alert[]);
            var __alert__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __alert__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Alert[]>().Deserialize(ref reader, formatterResolver);
                        __alert__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Alerts();
            if(__alert__b__) ____result.alert = __alert__;

            return ____result;
        }
    }


    public sealed class ForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.ForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("location"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("current"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecast"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("location"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("current"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alerts"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.ForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Location>().Serialize(ref writer, value.location, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Current>().Serialize(ref writer, value.current, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Forecast>().Serialize(ref writer, value.forecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Alerts>().Serialize(ref writer, value.alerts, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.ForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __location__ = default(global::SimpleWeather.Weather_API.WeatherApi.Location);
            var __location__b__ = false;
            var __current__ = default(global::SimpleWeather.Weather_API.WeatherApi.Current);
            var __current__b__ = false;
            var __forecast__ = default(global::SimpleWeather.Weather_API.WeatherApi.Forecast);
            var __forecast__b__ = false;
            var __alerts__ = default(global::SimpleWeather.Weather_API.WeatherApi.Alerts);
            var __alerts__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __location__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Location>().Deserialize(ref reader, formatterResolver);
                        __location__b__ = true;
                        break;
                    case 1:
                        __current__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Current>().Deserialize(ref reader, formatterResolver);
                        __current__b__ = true;
                        break;
                    case 2:
                        __forecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Forecast>().Deserialize(ref reader, formatterResolver);
                        __forecast__b__ = true;
                        break;
                    case 3:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.Alerts>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.ForecastRootobject();
            if(__location__b__) ____result.location = __location__;
            if(__current__b__) ____result.current = __current__;
            if(__forecast__b__) ____result.forecast = __forecast__;
            if(__alerts__b__) ____result.alerts = __alerts__;

            return ____result;
        }
    }


    public sealed class LocationItemFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.LocationItem>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LocationItemFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("region"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("url"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("region"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("url"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.LocationItem value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.region);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.country);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.url);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.LocationItem Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __id__ = default(int);
            var __id__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __region__ = default(string);
            var __region__b__ = false;
            var __country__ = default(string);
            var __country__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __url__ = default(string);
            var __url__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        __id__b__ = true;
                        break;
                    case 1:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 2:
                        __region__ = reader.ReadString();
                        __region__b__ = true;
                        break;
                    case 3:
                        __country__ = reader.ReadString();
                        __country__b__ = true;
                        break;
                    case 4:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 5:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 6:
                        __url__ = reader.ReadString();
                        __url__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.LocationItem();
            if(__id__b__) ____result.id = __id__;
            if(__name__b__) ____result.name = __name__;
            if(__region__b__) ____result.region = __region__;
            if(__country__b__) ____result.country = __country__;
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__url__b__) ____result.url = __url__;

            return ____result;
        }
    }


    public sealed class RootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherApi.Rootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public RootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("LocationItems"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("LocationItems"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherApi.Rootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.LocationItem[]>().Serialize(ref writer, value.LocationItems, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherApi.Rootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __LocationItems__ = default(global::SimpleWeather.Weather_API.WeatherApi.LocationItem[]);
            var __LocationItems__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __LocationItems__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherApi.LocationItem[]>().Deserialize(ref reader, formatterResolver);
                        __LocationItems__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherApi.Rootobject();
            if(__LocationItems__b__) ____result.LocationItems = __LocationItems__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherBit
{
    using System;
    using Utf8Json;


    public sealed class AlertFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.Alert>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("regions"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ends_utc"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("effective_local"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("onset_utc"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expires_local"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expires_utc"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ends_local"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uri"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("onset_local"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("effective_utc"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("title"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 12},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("regions"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ends_utc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("effective_local"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("onset_utc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expires_local"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expires_utc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ends_local"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uri"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("onset_local"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("effective_utc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("title"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.Alert value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.regions, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.ends_utc);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.effective_local);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.onset_utc);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.expires_local);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.expires_utc);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.ends_local);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteString(value.uri);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteString(value.onset_local);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteString(value.effective_utc);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.severity);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.title);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.description);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.Alert Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __regions__ = default(string[]);
            var __regions__b__ = false;
            var __ends_utc__ = default(string);
            var __ends_utc__b__ = false;
            var __effective_local__ = default(string);
            var __effective_local__b__ = false;
            var __onset_utc__ = default(string);
            var __onset_utc__b__ = false;
            var __expires_local__ = default(string);
            var __expires_local__b__ = false;
            var __expires_utc__ = default(string);
            var __expires_utc__b__ = false;
            var __ends_local__ = default(string);
            var __ends_local__b__ = false;
            var __uri__ = default(string);
            var __uri__b__ = false;
            var __onset_local__ = default(string);
            var __onset_local__b__ = false;
            var __effective_utc__ = default(string);
            var __effective_utc__b__ = false;
            var __severity__ = default(string);
            var __severity__b__ = false;
            var __title__ = default(string);
            var __title__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __regions__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __regions__b__ = true;
                        break;
                    case 1:
                        __ends_utc__ = reader.ReadString();
                        __ends_utc__b__ = true;
                        break;
                    case 2:
                        __effective_local__ = reader.ReadString();
                        __effective_local__b__ = true;
                        break;
                    case 3:
                        __onset_utc__ = reader.ReadString();
                        __onset_utc__b__ = true;
                        break;
                    case 4:
                        __expires_local__ = reader.ReadString();
                        __expires_local__b__ = true;
                        break;
                    case 5:
                        __expires_utc__ = reader.ReadString();
                        __expires_utc__b__ = true;
                        break;
                    case 6:
                        __ends_local__ = reader.ReadString();
                        __ends_local__b__ = true;
                        break;
                    case 7:
                        __uri__ = reader.ReadString();
                        __uri__b__ = true;
                        break;
                    case 8:
                        __onset_local__ = reader.ReadString();
                        __onset_local__b__ = true;
                        break;
                    case 9:
                        __effective_utc__ = reader.ReadString();
                        __effective_utc__b__ = true;
                        break;
                    case 10:
                        __severity__ = reader.ReadString();
                        __severity__b__ = true;
                        break;
                    case 11:
                        __title__ = reader.ReadString();
                        __title__b__ = true;
                        break;
                    case 12:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.Alert();
            if(__regions__b__) ____result.regions = __regions__;
            if(__ends_utc__b__) ____result.ends_utc = __ends_utc__;
            if(__effective_local__b__) ____result.effective_local = __effective_local__;
            if(__onset_utc__b__) ____result.onset_utc = __onset_utc__;
            if(__expires_local__b__) ____result.expires_local = __expires_local__;
            if(__expires_utc__b__) ____result.expires_utc = __expires_utc__;
            if(__ends_local__b__) ____result.ends_local = __ends_local__;
            if(__uri__b__) ____result.uri = __uri__;
            if(__onset_local__b__) ____result.onset_local = __onset_local__;
            if(__effective_utc__b__) ____result.effective_utc = __effective_utc__;
            if(__severity__b__) ____result.severity = __severity__;
            if(__title__b__) ____result.title = __title__;
            if(__description__b__) ____result.description = __description__;

            return ____result;
        }
    }


    public sealed class AlertRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.AlertRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AlertRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country_code"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city_name"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state_code"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("country_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city_name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state_code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.AlertRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.country_code);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.Alert[]>().Serialize(ref writer, value.alerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.city_name);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.state_code);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.AlertRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __country_code__ = default(string);
            var __country_code__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;
            var __alerts__ = default(global::SimpleWeather.Weather_API.WeatherBit.Alert[]);
            var __alerts__b__ = false;
            var __city_name__ = default(string);
            var __city_name__b__ = false;
            var __state_code__ = default(string);
            var __state_code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __country_code__ = reader.ReadString();
                        __country_code__b__ = true;
                        break;
                    case 1:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 2:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 3:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 4:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.Alert[]>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    case 5:
                        __city_name__ = reader.ReadString();
                        __city_name__b__ = true;
                        break;
                    case 6:
                        __state_code__ = reader.ReadString();
                        __state_code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.AlertRootobject();
            if(__country_code__b__) ____result.country_code = __country_code__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__lat__b__) ____result.lat = __lat__;
            if(__alerts__b__) ____result.alerts = __alerts__;
            if(__city_name__b__) ____result.city_name = __city_name__;
            if(__state_code__b__) ____result.state_code = __state_code__;

            return ____result;
        }
    }


    public sealed class CurrentWeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentWeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("code"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.code);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.description);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __icon__ = default(string);
            var __icon__b__ = false;
            var __code__ = default(int);
            var __code__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 1:
                        __code__ = reader.ReadInt32();
                        __code__b__ = true;
                        break;
                    case 2:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather();
            if(__icon__b__) ____result.icon = __icon__;
            if(__code__b__) ____result.code = __code__;
            if(__description__b__) ____result.description = __description__;

            return ____result;
        }
    }


    public sealed class CurrentDatumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentDatumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rh"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pod"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pres"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ob_time"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country_code"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ts"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("solar_rad"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state_code"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city_name"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_spd"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_cdir_full"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_cdir"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("h_angle"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dni"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpt"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_dir"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ghi"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dhi"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("aqi"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("datetime"), 31},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 32},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("station"), 33},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("elev_angle"), 34},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("app_temp"), 35},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("rh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pod"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pres"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ob_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("solar_rad"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city_name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_spd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_cdir_full"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_cdir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("h_angle"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dni"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_dir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ghi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dhi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("aqi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("datetime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("station"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("elev_angle"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("app_temp"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.rh);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.pod);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.pres);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.ob_time);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.country_code);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteInt32(value.clouds);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteInt32(value.ts);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.solar_rad);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.state_code);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteString(value.city_name);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.wind_spd);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteString(value.wind_cdir_full);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.wind_cdir);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteSingle(value.slp);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.vis);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.h_angle);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteString(value.sunset);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteSingle(value.dni);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.dewpt);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.snow);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.uv);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.precip);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteInt32(value.wind_dir);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteString(value.sunrise);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteSingle(value.ghi);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteSingle(value.dhi);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteInt32(value.aqi);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteString(value.datetime);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[33]);
            writer.WriteString(value.station);
            writer.WriteRaw(this.____stringByteKeys[34]);
            writer.WriteSingle(value.elev_angle);
            writer.WriteRaw(this.____stringByteKeys[35]);
            writer.WriteSingle(value.app_temp);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __rh__ = default(float);
            var __rh__b__ = false;
            var __pod__ = default(string);
            var __pod__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __pres__ = default(float);
            var __pres__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __ob_time__ = default(string);
            var __ob_time__b__ = false;
            var __country_code__ = default(string);
            var __country_code__b__ = false;
            var __clouds__ = default(int);
            var __clouds__b__ = false;
            var __ts__ = default(int);
            var __ts__b__ = false;
            var __solar_rad__ = default(float);
            var __solar_rad__b__ = false;
            var __state_code__ = default(string);
            var __state_code__b__ = false;
            var __city_name__ = default(string);
            var __city_name__b__ = false;
            var __wind_spd__ = default(float);
            var __wind_spd__b__ = false;
            var __wind_cdir_full__ = default(string);
            var __wind_cdir_full__b__ = false;
            var __wind_cdir__ = default(string);
            var __wind_cdir__b__ = false;
            var __slp__ = default(float);
            var __slp__b__ = false;
            var __vis__ = default(float);
            var __vis__b__ = false;
            var __h_angle__ = default(float);
            var __h_angle__b__ = false;
            var __sunset__ = default(string);
            var __sunset__b__ = false;
            var __dni__ = default(float);
            var __dni__b__ = false;
            var __dewpt__ = default(float);
            var __dewpt__b__ = false;
            var __snow__ = default(float);
            var __snow__b__ = false;
            var __uv__ = default(float);
            var __uv__b__ = false;
            var __precip__ = default(float);
            var __precip__b__ = false;
            var __wind_dir__ = default(int);
            var __wind_dir__b__ = false;
            var __sunrise__ = default(string);
            var __sunrise__b__ = false;
            var __ghi__ = default(float);
            var __ghi__b__ = false;
            var __dhi__ = default(float);
            var __dhi__b__ = false;
            var __aqi__ = default(int);
            var __aqi__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather);
            var __weather__b__ = false;
            var __datetime__ = default(string);
            var __datetime__b__ = false;
            var __temp__ = default(float);
            var __temp__b__ = false;
            var __station__ = default(string);
            var __station__b__ = false;
            var __elev_angle__ = default(float);
            var __elev_angle__b__ = false;
            var __app_temp__ = default(float);
            var __app_temp__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __rh__ = reader.ReadSingle();
                        __rh__b__ = true;
                        break;
                    case 1:
                        __pod__ = reader.ReadString();
                        __pod__b__ = true;
                        break;
                    case 2:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 3:
                        __pres__ = reader.ReadSingle();
                        __pres__b__ = true;
                        break;
                    case 4:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 5:
                        __ob_time__ = reader.ReadString();
                        __ob_time__b__ = true;
                        break;
                    case 6:
                        __country_code__ = reader.ReadString();
                        __country_code__b__ = true;
                        break;
                    case 7:
                        __clouds__ = reader.ReadInt32();
                        __clouds__b__ = true;
                        break;
                    case 8:
                        __ts__ = reader.ReadInt32();
                        __ts__b__ = true;
                        break;
                    case 9:
                        __solar_rad__ = reader.ReadSingle();
                        __solar_rad__b__ = true;
                        break;
                    case 10:
                        __state_code__ = reader.ReadString();
                        __state_code__b__ = true;
                        break;
                    case 11:
                        __city_name__ = reader.ReadString();
                        __city_name__b__ = true;
                        break;
                    case 12:
                        __wind_spd__ = reader.ReadSingle();
                        __wind_spd__b__ = true;
                        break;
                    case 13:
                        __wind_cdir_full__ = reader.ReadString();
                        __wind_cdir_full__b__ = true;
                        break;
                    case 14:
                        __wind_cdir__ = reader.ReadString();
                        __wind_cdir__b__ = true;
                        break;
                    case 15:
                        __slp__ = reader.ReadSingle();
                        __slp__b__ = true;
                        break;
                    case 16:
                        __vis__ = reader.ReadSingle();
                        __vis__b__ = true;
                        break;
                    case 17:
                        __h_angle__ = reader.ReadSingle();
                        __h_angle__b__ = true;
                        break;
                    case 18:
                        __sunset__ = reader.ReadString();
                        __sunset__b__ = true;
                        break;
                    case 19:
                        __dni__ = reader.ReadSingle();
                        __dni__b__ = true;
                        break;
                    case 20:
                        __dewpt__ = reader.ReadSingle();
                        __dewpt__b__ = true;
                        break;
                    case 21:
                        __snow__ = reader.ReadSingle();
                        __snow__b__ = true;
                        break;
                    case 22:
                        __uv__ = reader.ReadSingle();
                        __uv__b__ = true;
                        break;
                    case 23:
                        __precip__ = reader.ReadSingle();
                        __precip__b__ = true;
                        break;
                    case 24:
                        __wind_dir__ = reader.ReadInt32();
                        __wind_dir__b__ = true;
                        break;
                    case 25:
                        __sunrise__ = reader.ReadString();
                        __sunrise__b__ = true;
                        break;
                    case 26:
                        __ghi__ = reader.ReadSingle();
                        __ghi__b__ = true;
                        break;
                    case 27:
                        __dhi__ = reader.ReadSingle();
                        __dhi__b__ = true;
                        break;
                    case 28:
                        __aqi__ = reader.ReadInt32();
                        __aqi__b__ = true;
                        break;
                    case 29:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 30:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.CurrentWeather>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 31:
                        __datetime__ = reader.ReadString();
                        __datetime__b__ = true;
                        break;
                    case 32:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 33:
                        __station__ = reader.ReadString();
                        __station__b__ = true;
                        break;
                    case 34:
                        __elev_angle__ = reader.ReadSingle();
                        __elev_angle__b__ = true;
                        break;
                    case 35:
                        __app_temp__ = reader.ReadSingle();
                        __app_temp__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum();
            if(__rh__b__) ____result.rh = __rh__;
            if(__pod__b__) ____result.pod = __pod__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__pres__b__) ____result.pres = __pres__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__ob_time__b__) ____result.ob_time = __ob_time__;
            if(__country_code__b__) ____result.country_code = __country_code__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__ts__b__) ____result.ts = __ts__;
            if(__solar_rad__b__) ____result.solar_rad = __solar_rad__;
            if(__state_code__b__) ____result.state_code = __state_code__;
            if(__city_name__b__) ____result.city_name = __city_name__;
            if(__wind_spd__b__) ____result.wind_spd = __wind_spd__;
            if(__wind_cdir_full__b__) ____result.wind_cdir_full = __wind_cdir_full__;
            if(__wind_cdir__b__) ____result.wind_cdir = __wind_cdir__;
            if(__slp__b__) ____result.slp = __slp__;
            if(__vis__b__) ____result.vis = __vis__;
            if(__h_angle__b__) ____result.h_angle = __h_angle__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__dni__b__) ____result.dni = __dni__;
            if(__dewpt__b__) ____result.dewpt = __dewpt__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__uv__b__) ____result.uv = __uv__;
            if(__precip__b__) ____result.precip = __precip__;
            if(__wind_dir__b__) ____result.wind_dir = __wind_dir__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__ghi__b__) ____result.ghi = __ghi__;
            if(__dhi__b__) ____result.dhi = __dhi__;
            if(__aqi__b__) ____result.aqi = __aqi__;
            if(__lat__b__) ____result.lat = __lat__;
            if(__weather__b__) ____result.weather = __weather__;
            if(__datetime__b__) ____result.datetime = __datetime__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__station__b__) ____result.station = __station__;
            if(__elev_angle__b__) ____result.elev_angle = __elev_angle__;
            if(__app_temp__b__) ____result.app_temp = __app_temp__;

            return ____result;
        }
    }


    public sealed class MinutelyFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.Minutely>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MinutelyFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestamp_utc"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestamp_local"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ts"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("timestamp_utc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timestamp_local"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.Minutely value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.timestamp_utc);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.snow);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.timestamp_local);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteInt32(value.ts);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.precip);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.Minutely Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __timestamp_utc__ = default(string);
            var __timestamp_utc__b__ = false;
            var __snow__ = default(float);
            var __snow__b__ = false;
            var __temp__ = default(float);
            var __temp__b__ = false;
            var __timestamp_local__ = default(string);
            var __timestamp_local__b__ = false;
            var __ts__ = default(int);
            var __ts__b__ = false;
            var __precip__ = default(float);
            var __precip__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __timestamp_utc__ = reader.ReadString();
                        __timestamp_utc__b__ = true;
                        break;
                    case 1:
                        __snow__ = reader.ReadSingle();
                        __snow__b__ = true;
                        break;
                    case 2:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 3:
                        __timestamp_local__ = reader.ReadString();
                        __timestamp_local__b__ = true;
                        break;
                    case 4:
                        __ts__ = reader.ReadInt32();
                        __ts__b__ = true;
                        break;
                    case 5:
                        __precip__ = reader.ReadSingle();
                        __precip__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.Minutely();
            if(__timestamp_utc__b__) ____result.timestamp_utc = __timestamp_utc__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__timestamp_local__b__) ____result.timestamp_local = __timestamp_local__;
            if(__ts__b__) ____result.ts = __ts__;
            if(__precip__b__) ____result.precip = __precip__;

            return ____result;
        }
    }


    public sealed class CurrentRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.CurrentRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("count"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("minutely"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("alerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("count"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("data"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("minutely"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.CurrentRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.Alert[]>().Serialize(ref writer, value.alerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.count);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum[]>().Serialize(ref writer, value.data, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.Minutely[]>().Serialize(ref writer, value.minutely, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.CurrentRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __alerts__ = default(global::SimpleWeather.Weather_API.WeatherBit.Alert[]);
            var __alerts__b__ = false;
            var __count__ = default(int);
            var __count__b__ = false;
            var __data__ = default(global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum[]);
            var __data__b__ = false;
            var __minutely__ = default(global::SimpleWeather.Weather_API.WeatherBit.Minutely[]);
            var __minutely__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.Alert[]>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    case 1:
                        __count__ = reader.ReadInt32();
                        __count__b__ = true;
                        break;
                    case 2:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.CurrentDatum[]>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    case 3:
                        __minutely__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.Minutely[]>().Deserialize(ref reader, formatterResolver);
                        __minutely__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.CurrentRootobject();
            if(__alerts__b__) ____result.alerts = __alerts__;
            if(__count__b__) ____result.count = __count__;
            if(__data__b__) ____result.data = __data__;
            if(__minutely__b__) ____result.minutely = __minutely__;

            return ____result;
        }
    }


    public sealed class ForecastWeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastWeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("icon"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("code"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.icon);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.code);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.description);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __icon__ = default(string);
            var __icon__b__ = false;
            var __code__ = default(int);
            var __code__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __icon__ = reader.ReadString();
                        __icon__b__ = true;
                        break;
                    case 1:
                        __code__ = reader.ReadInt32();
                        __code__b__ = true;
                        break;
                    case 2:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather();
            if(__icon__b__) ____result.icon = __icon__;
            if(__code__b__) ____result.code = __code__;
            if(__description__b__) ____result.description = __description__;

            return ____result;
        }
    }


    public sealed class ForecastDatumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastDatumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise_ts"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_cdir"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rh"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pres"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("high_temp"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset_ts"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ozone"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moon_phase"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_gust_spd"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_depth"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ts"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise_ts"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("app_min_temp"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_spd"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_cdir_full"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moon_phase_lunation"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("valid_date"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("app_max_temp"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpt"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_dir"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds_hi"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("low_temp"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("max_temp"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset_ts"), 31},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("datetime"), 32},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 33},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("min_temp"), 34},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds_mid"), 35},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds_low"), 36},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("moonrise_ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_cdir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pres"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("high_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset_ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ozone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moon_phase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_gust_spd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_depth"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise_ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("app_min_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_spd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_cdir_full"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moon_phase_lunation"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("valid_date"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("app_max_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_dir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds_hi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("low_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("max_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset_ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("datetime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("min_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds_mid"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds_low"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt32(value.moonrise_ts);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.wind_cdir);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteInt32(value.rh);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.pres);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.high_temp);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteInt32(value.sunset_ts);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.ozone);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.moon_phase);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.wind_gust_spd);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.snow_depth);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteInt32(value.clouds);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteInt32(value.ts);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteInt32(value.sunrise_ts);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.app_min_temp);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteSingle(value.wind_spd);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteInt32(value.pop);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteString(value.wind_cdir_full);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.slp);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.moon_phase_lunation);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteString(value.valid_date);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.app_max_temp);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.vis);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.dewpt);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.snow);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteSingle(value.uv);
            writer.WriteRaw(this.____stringByteKeys[25]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteInt32(value.wind_dir);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteInt32(value.clouds_hi);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteSingle(value.precip);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteSingle(value.low_temp);
            writer.WriteRaw(this.____stringByteKeys[30]);
            writer.WriteSingle(value.max_temp);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteInt32(value.moonset_ts);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.WriteString(value.datetime);
            writer.WriteRaw(this.____stringByteKeys[33]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[34]);
            writer.WriteSingle(value.min_temp);
            writer.WriteRaw(this.____stringByteKeys[35]);
            writer.WriteInt32(value.clouds_mid);
            writer.WriteRaw(this.____stringByteKeys[36]);
            writer.WriteInt32(value.clouds_low);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __moonrise_ts__ = default(int);
            var __moonrise_ts__b__ = false;
            var __wind_cdir__ = default(string);
            var __wind_cdir__b__ = false;
            var __rh__ = default(int);
            var __rh__b__ = false;
            var __pres__ = default(float);
            var __pres__b__ = false;
            var __high_temp__ = default(float);
            var __high_temp__b__ = false;
            var __sunset_ts__ = default(int);
            var __sunset_ts__b__ = false;
            var __ozone__ = default(float);
            var __ozone__b__ = false;
            var __moon_phase__ = default(float);
            var __moon_phase__b__ = false;
            var __wind_gust_spd__ = default(float);
            var __wind_gust_spd__b__ = false;
            var __snow_depth__ = default(float);
            var __snow_depth__b__ = false;
            var __clouds__ = default(int);
            var __clouds__b__ = false;
            var __ts__ = default(int);
            var __ts__b__ = false;
            var __sunrise_ts__ = default(int);
            var __sunrise_ts__b__ = false;
            var __app_min_temp__ = default(float);
            var __app_min_temp__b__ = false;
            var __wind_spd__ = default(float);
            var __wind_spd__b__ = false;
            var __pop__ = default(int);
            var __pop__b__ = false;
            var __wind_cdir_full__ = default(string);
            var __wind_cdir_full__b__ = false;
            var __slp__ = default(float);
            var __slp__b__ = false;
            var __moon_phase_lunation__ = default(float);
            var __moon_phase_lunation__b__ = false;
            var __valid_date__ = default(string);
            var __valid_date__b__ = false;
            var __app_max_temp__ = default(float);
            var __app_max_temp__b__ = false;
            var __vis__ = default(float);
            var __vis__b__ = false;
            var __dewpt__ = default(float);
            var __dewpt__b__ = false;
            var __snow__ = default(float);
            var __snow__b__ = false;
            var __uv__ = default(float);
            var __uv__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather);
            var __weather__b__ = false;
            var __wind_dir__ = default(int);
            var __wind_dir__b__ = false;
            var __clouds_hi__ = default(int);
            var __clouds_hi__b__ = false;
            var __precip__ = default(float);
            var __precip__b__ = false;
            var __low_temp__ = default(float);
            var __low_temp__b__ = false;
            var __max_temp__ = default(float);
            var __max_temp__b__ = false;
            var __moonset_ts__ = default(int);
            var __moonset_ts__b__ = false;
            var __datetime__ = default(string);
            var __datetime__b__ = false;
            var __temp__ = default(float);
            var __temp__b__ = false;
            var __min_temp__ = default(float);
            var __min_temp__b__ = false;
            var __clouds_mid__ = default(int);
            var __clouds_mid__b__ = false;
            var __clouds_low__ = default(int);
            var __clouds_low__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __moonrise_ts__ = reader.ReadInt32();
                        __moonrise_ts__b__ = true;
                        break;
                    case 1:
                        __wind_cdir__ = reader.ReadString();
                        __wind_cdir__b__ = true;
                        break;
                    case 2:
                        __rh__ = reader.ReadInt32();
                        __rh__b__ = true;
                        break;
                    case 3:
                        __pres__ = reader.ReadSingle();
                        __pres__b__ = true;
                        break;
                    case 4:
                        __high_temp__ = reader.ReadSingle();
                        __high_temp__b__ = true;
                        break;
                    case 5:
                        __sunset_ts__ = reader.ReadInt32();
                        __sunset_ts__b__ = true;
                        break;
                    case 6:
                        __ozone__ = reader.ReadSingle();
                        __ozone__b__ = true;
                        break;
                    case 7:
                        __moon_phase__ = reader.ReadSingle();
                        __moon_phase__b__ = true;
                        break;
                    case 8:
                        __wind_gust_spd__ = reader.ReadSingle();
                        __wind_gust_spd__b__ = true;
                        break;
                    case 9:
                        __snow_depth__ = reader.ReadSingle();
                        __snow_depth__b__ = true;
                        break;
                    case 10:
                        __clouds__ = reader.ReadInt32();
                        __clouds__b__ = true;
                        break;
                    case 11:
                        __ts__ = reader.ReadInt32();
                        __ts__b__ = true;
                        break;
                    case 12:
                        __sunrise_ts__ = reader.ReadInt32();
                        __sunrise_ts__b__ = true;
                        break;
                    case 13:
                        __app_min_temp__ = reader.ReadSingle();
                        __app_min_temp__b__ = true;
                        break;
                    case 14:
                        __wind_spd__ = reader.ReadSingle();
                        __wind_spd__b__ = true;
                        break;
                    case 15:
                        __pop__ = reader.ReadInt32();
                        __pop__b__ = true;
                        break;
                    case 16:
                        __wind_cdir_full__ = reader.ReadString();
                        __wind_cdir_full__b__ = true;
                        break;
                    case 17:
                        __slp__ = reader.ReadSingle();
                        __slp__b__ = true;
                        break;
                    case 18:
                        __moon_phase_lunation__ = reader.ReadSingle();
                        __moon_phase_lunation__b__ = true;
                        break;
                    case 19:
                        __valid_date__ = reader.ReadString();
                        __valid_date__b__ = true;
                        break;
                    case 20:
                        __app_max_temp__ = reader.ReadSingle();
                        __app_max_temp__b__ = true;
                        break;
                    case 21:
                        __vis__ = reader.ReadSingle();
                        __vis__b__ = true;
                        break;
                    case 22:
                        __dewpt__ = reader.ReadSingle();
                        __dewpt__b__ = true;
                        break;
                    case 23:
                        __snow__ = reader.ReadSingle();
                        __snow__b__ = true;
                        break;
                    case 24:
                        __uv__ = reader.ReadSingle();
                        __uv__b__ = true;
                        break;
                    case 25:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 26:
                        __wind_dir__ = reader.ReadInt32();
                        __wind_dir__b__ = true;
                        break;
                    case 27:
                        __clouds_hi__ = reader.ReadInt32();
                        __clouds_hi__b__ = true;
                        break;
                    case 28:
                        __precip__ = reader.ReadSingle();
                        __precip__b__ = true;
                        break;
                    case 29:
                        __low_temp__ = reader.ReadSingle();
                        __low_temp__b__ = true;
                        break;
                    case 30:
                        __max_temp__ = reader.ReadSingle();
                        __max_temp__b__ = true;
                        break;
                    case 31:
                        __moonset_ts__ = reader.ReadInt32();
                        __moonset_ts__b__ = true;
                        break;
                    case 32:
                        __datetime__ = reader.ReadString();
                        __datetime__b__ = true;
                        break;
                    case 33:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 34:
                        __min_temp__ = reader.ReadSingle();
                        __min_temp__b__ = true;
                        break;
                    case 35:
                        __clouds_mid__ = reader.ReadInt32();
                        __clouds_mid__b__ = true;
                        break;
                    case 36:
                        __clouds_low__ = reader.ReadInt32();
                        __clouds_low__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum();
            if(__moonrise_ts__b__) ____result.moonrise_ts = __moonrise_ts__;
            if(__wind_cdir__b__) ____result.wind_cdir = __wind_cdir__;
            if(__rh__b__) ____result.rh = __rh__;
            if(__pres__b__) ____result.pres = __pres__;
            if(__high_temp__b__) ____result.high_temp = __high_temp__;
            if(__sunset_ts__b__) ____result.sunset_ts = __sunset_ts__;
            if(__ozone__b__) ____result.ozone = __ozone__;
            if(__moon_phase__b__) ____result.moon_phase = __moon_phase__;
            if(__wind_gust_spd__b__) ____result.wind_gust_spd = __wind_gust_spd__;
            if(__snow_depth__b__) ____result.snow_depth = __snow_depth__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__ts__b__) ____result.ts = __ts__;
            if(__sunrise_ts__b__) ____result.sunrise_ts = __sunrise_ts__;
            if(__app_min_temp__b__) ____result.app_min_temp = __app_min_temp__;
            if(__wind_spd__b__) ____result.wind_spd = __wind_spd__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__wind_cdir_full__b__) ____result.wind_cdir_full = __wind_cdir_full__;
            if(__slp__b__) ____result.slp = __slp__;
            if(__moon_phase_lunation__b__) ____result.moon_phase_lunation = __moon_phase_lunation__;
            if(__valid_date__b__) ____result.valid_date = __valid_date__;
            if(__app_max_temp__b__) ____result.app_max_temp = __app_max_temp__;
            if(__vis__b__) ____result.vis = __vis__;
            if(__dewpt__b__) ____result.dewpt = __dewpt__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__uv__b__) ____result.uv = __uv__;
            if(__weather__b__) ____result.weather = __weather__;
            if(__wind_dir__b__) ____result.wind_dir = __wind_dir__;
            if(__clouds_hi__b__) ____result.clouds_hi = __clouds_hi__;
            if(__precip__b__) ____result.precip = __precip__;
            if(__low_temp__b__) ____result.low_temp = __low_temp__;
            if(__max_temp__b__) ____result.max_temp = __max_temp__;
            if(__moonset_ts__b__) ____result.moonset_ts = __moonset_ts__;
            if(__datetime__b__) ____result.datetime = __datetime__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__min_temp__b__) ____result.min_temp = __min_temp__;
            if(__clouds_mid__b__) ____result.clouds_mid = __clouds_mid__;
            if(__clouds_low__b__) ____result.clouds_low = __clouds_low__;

            return ____result;
        }
    }


    public sealed class ForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.ForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city_name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country_code"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state_code"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("data"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("city_name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state_code"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.ForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum[]>().Serialize(ref writer, value.data, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.city_name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.country_code);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.state_code);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.ForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __data__ = default(global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum[]);
            var __data__b__ = false;
            var __city_name__ = default(string);
            var __city_name__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;
            var __country_code__ = default(string);
            var __country_code__b__ = false;
            var __state_code__ = default(string);
            var __state_code__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.ForecastDatum[]>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    case 1:
                        __city_name__ = reader.ReadString();
                        __city_name__b__ = true;
                        break;
                    case 2:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 3:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 4:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 5:
                        __country_code__ = reader.ReadString();
                        __country_code__b__ = true;
                        break;
                    case 6:
                        __state_code__ = reader.ReadString();
                        __state_code__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.ForecastRootobject();
            if(__data__b__) ____result.data = __data__;
            if(__city_name__b__) ____result.city_name = __city_name__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__lat__b__) ____result.lat = __lat__;
            if(__country_code__b__) ____result.country_code = __country_code__;
            if(__state_code__b__) ____result.state_code = __state_code__;

            return ____result;
        }
    }


    public sealed class HourlyDatumFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyDatumFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ts"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestamp_local"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timestamp_utc"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("datetime"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_depth"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpt"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("app_temp"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rh"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("clouds"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weather"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pres"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uv"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("solar_rad"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("ghi"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dhi"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dni"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pod"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pop"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_spd"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_gust_spd"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_dir"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_cdir"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wind_cdir_full"), 27},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("ts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timestamp_local"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timestamp_utc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("datetime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_depth"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpt"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("app_temp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("clouds"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pres"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uv"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("solar_rad"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("ghi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dhi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dni"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pod"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pop"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_spd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_gust_spd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_dir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_cdir"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wind_cdir_full"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteInt64(value.ts);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.timestamp_local, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.timestamp_utc, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.datetime);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.snow);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.snow_depth);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.precip);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.temp);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.dewpt);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.app_temp);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteInt32(value.rh);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteInt32(value.clouds);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather>().Serialize(ref writer, value.weather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.slp);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteSingle(value.pres);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteSingle(value.uv);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.solar_rad);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.ghi);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.dhi);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteInt32(value.dni);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.vis);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteString(value.pod);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteInt32(value.pop);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.wind_spd);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteSingle(value.wind_gust_spd);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteInt32(value.wind_dir);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteString(value.wind_cdir);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteString(value.wind_cdir_full);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __ts__ = default(long);
            var __ts__b__ = false;
            var __timestamp_local__ = default(global::System.DateTime);
            var __timestamp_local__b__ = false;
            var __timestamp_utc__ = default(global::System.DateTime);
            var __timestamp_utc__b__ = false;
            var __datetime__ = default(string);
            var __datetime__b__ = false;
            var __snow__ = default(float);
            var __snow__b__ = false;
            var __snow_depth__ = default(float);
            var __snow_depth__b__ = false;
            var __precip__ = default(float);
            var __precip__b__ = false;
            var __temp__ = default(float);
            var __temp__b__ = false;
            var __dewpt__ = default(float);
            var __dewpt__b__ = false;
            var __app_temp__ = default(float);
            var __app_temp__b__ = false;
            var __rh__ = default(int);
            var __rh__b__ = false;
            var __clouds__ = default(int);
            var __clouds__b__ = false;
            var __weather__ = default(global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather);
            var __weather__b__ = false;
            var __slp__ = default(float);
            var __slp__b__ = false;
            var __pres__ = default(float);
            var __pres__b__ = false;
            var __uv__ = default(float);
            var __uv__b__ = false;
            var __solar_rad__ = default(float);
            var __solar_rad__b__ = false;
            var __ghi__ = default(float);
            var __ghi__b__ = false;
            var __dhi__ = default(float);
            var __dhi__b__ = false;
            var __dni__ = default(int);
            var __dni__b__ = false;
            var __vis__ = default(float);
            var __vis__b__ = false;
            var __pod__ = default(string);
            var __pod__b__ = false;
            var __pop__ = default(int);
            var __pop__b__ = false;
            var __wind_spd__ = default(float);
            var __wind_spd__b__ = false;
            var __wind_gust_spd__ = default(float);
            var __wind_gust_spd__b__ = false;
            var __wind_dir__ = default(int);
            var __wind_dir__b__ = false;
            var __wind_cdir__ = default(string);
            var __wind_cdir__b__ = false;
            var __wind_cdir_full__ = default(string);
            var __wind_cdir_full__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __ts__ = reader.ReadInt64();
                        __ts__b__ = true;
                        break;
                    case 1:
                        __timestamp_local__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __timestamp_local__b__ = true;
                        break;
                    case 2:
                        __timestamp_utc__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, formatterResolver);
                        __timestamp_utc__b__ = true;
                        break;
                    case 3:
                        __datetime__ = reader.ReadString();
                        __datetime__b__ = true;
                        break;
                    case 4:
                        __snow__ = reader.ReadSingle();
                        __snow__b__ = true;
                        break;
                    case 5:
                        __snow_depth__ = reader.ReadSingle();
                        __snow_depth__b__ = true;
                        break;
                    case 6:
                        __precip__ = reader.ReadSingle();
                        __precip__b__ = true;
                        break;
                    case 7:
                        __temp__ = reader.ReadSingle();
                        __temp__b__ = true;
                        break;
                    case 8:
                        __dewpt__ = reader.ReadSingle();
                        __dewpt__b__ = true;
                        break;
                    case 9:
                        __app_temp__ = reader.ReadSingle();
                        __app_temp__b__ = true;
                        break;
                    case 10:
                        __rh__ = reader.ReadInt32();
                        __rh__b__ = true;
                        break;
                    case 11:
                        __clouds__ = reader.ReadInt32();
                        __clouds__b__ = true;
                        break;
                    case 12:
                        __weather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.ForecastWeather>().Deserialize(ref reader, formatterResolver);
                        __weather__b__ = true;
                        break;
                    case 13:
                        __slp__ = reader.ReadSingle();
                        __slp__b__ = true;
                        break;
                    case 14:
                        __pres__ = reader.ReadSingle();
                        __pres__b__ = true;
                        break;
                    case 15:
                        __uv__ = reader.ReadSingle();
                        __uv__b__ = true;
                        break;
                    case 16:
                        __solar_rad__ = reader.ReadSingle();
                        __solar_rad__b__ = true;
                        break;
                    case 17:
                        __ghi__ = reader.ReadSingle();
                        __ghi__b__ = true;
                        break;
                    case 18:
                        __dhi__ = reader.ReadSingle();
                        __dhi__b__ = true;
                        break;
                    case 19:
                        __dni__ = reader.ReadInt32();
                        __dni__b__ = true;
                        break;
                    case 20:
                        __vis__ = reader.ReadSingle();
                        __vis__b__ = true;
                        break;
                    case 21:
                        __pod__ = reader.ReadString();
                        __pod__b__ = true;
                        break;
                    case 22:
                        __pop__ = reader.ReadInt32();
                        __pop__b__ = true;
                        break;
                    case 23:
                        __wind_spd__ = reader.ReadSingle();
                        __wind_spd__b__ = true;
                        break;
                    case 24:
                        __wind_gust_spd__ = reader.ReadSingle();
                        __wind_gust_spd__b__ = true;
                        break;
                    case 25:
                        __wind_dir__ = reader.ReadInt32();
                        __wind_dir__b__ = true;
                        break;
                    case 26:
                        __wind_cdir__ = reader.ReadString();
                        __wind_cdir__b__ = true;
                        break;
                    case 27:
                        __wind_cdir_full__ = reader.ReadString();
                        __wind_cdir_full__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum();
            if(__ts__b__) ____result.ts = __ts__;
            if(__timestamp_local__b__) ____result.timestamp_local = __timestamp_local__;
            if(__timestamp_utc__b__) ____result.timestamp_utc = __timestamp_utc__;
            if(__datetime__b__) ____result.datetime = __datetime__;
            if(__snow__b__) ____result.snow = __snow__;
            if(__snow_depth__b__) ____result.snow_depth = __snow_depth__;
            if(__precip__b__) ____result.precip = __precip__;
            if(__temp__b__) ____result.temp = __temp__;
            if(__dewpt__b__) ____result.dewpt = __dewpt__;
            if(__app_temp__b__) ____result.app_temp = __app_temp__;
            if(__rh__b__) ____result.rh = __rh__;
            if(__clouds__b__) ____result.clouds = __clouds__;
            if(__weather__b__) ____result.weather = __weather__;
            if(__slp__b__) ____result.slp = __slp__;
            if(__pres__b__) ____result.pres = __pres__;
            if(__uv__b__) ____result.uv = __uv__;
            if(__solar_rad__b__) ____result.solar_rad = __solar_rad__;
            if(__ghi__b__) ____result.ghi = __ghi__;
            if(__dhi__b__) ____result.dhi = __dhi__;
            if(__dni__b__) ____result.dni = __dni__;
            if(__vis__b__) ____result.vis = __vis__;
            if(__pod__b__) ____result.pod = __pod__;
            if(__pop__b__) ____result.pop = __pop__;
            if(__wind_spd__b__) ____result.wind_spd = __wind_spd__;
            if(__wind_gust_spd__b__) ____result.wind_gust_spd = __wind_gust_spd__;
            if(__wind_dir__b__) ____result.wind_dir = __wind_dir__;
            if(__wind_cdir__b__) ____result.wind_cdir = __wind_cdir__;
            if(__wind_cdir_full__b__) ____result.wind_cdir_full = __wind_cdir_full__;

            return ____result;
        }
    }


    public sealed class HourlyRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherBit.HourlyRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("city_name"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("state_code"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("country_code"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("timezone"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("data"), 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("city_name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("state_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("country_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("timezone"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("data"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherBit.HourlyRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.city_name);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.state_code);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.country_code);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.timezone);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum[]>().Serialize(ref writer, value.data, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherBit.HourlyRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __city_name__ = default(string);
            var __city_name__b__ = false;
            var __state_code__ = default(string);
            var __state_code__b__ = false;
            var __country_code__ = default(string);
            var __country_code__b__ = false;
            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __timezone__ = default(string);
            var __timezone__b__ = false;
            var __data__ = default(global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum[]);
            var __data__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __city_name__ = reader.ReadString();
                        __city_name__b__ = true;
                        break;
                    case 1:
                        __state_code__ = reader.ReadString();
                        __state_code__b__ = true;
                        break;
                    case 2:
                        __country_code__ = reader.ReadString();
                        __country_code__b__ = true;
                        break;
                    case 3:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 4:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 5:
                        __timezone__ = reader.ReadString();
                        __timezone__b__ = true;
                        break;
                    case 6:
                        __data__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherBit.HourlyDatum[]>().Deserialize(ref reader, formatterResolver);
                        __data__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherBit.HourlyRootobject();
            if(__city_name__b__) ____result.city_name = __city_name__;
            if(__state_code__b__) ____result.state_code = __state_code__;
            if(__country_code__b__) ____result.country_code = __country_code__;
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__timezone__b__) ____result.timezone = __timezone__;
            if(__data__b__) ____result.data = __data__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherUnlocked
{
    using System;
    using Utf8Json;


    public sealed class CurrentRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherUnlocked.CurrentRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lat"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("lon"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alt_m"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alt_ft"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wx_desc"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wx_code"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wx_icon"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_c"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_f"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_c"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_f"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humid_pct"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_mph"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_kmh"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_kts"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_ms"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("winddir_deg"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("winddir_compass"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudtotal_pct"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_km"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_mi"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_mb"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_in"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpoint_c"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpoint_f"), 24},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("lat"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("lon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alt_m"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("alt_ft"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wx_desc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wx_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wx_icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humid_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_kmh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_kts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_ms"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("winddir_deg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("winddir_compass"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudtotal_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_km"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_mi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_mb"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpoint_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpoint_f"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherUnlocked.CurrentRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.lat);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.lon);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.alt_m);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.alt_ft);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.wx_desc);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteInt32(value.wx_code);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.wx_icon);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.temp_c);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.temp_f);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.feelslike_c);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.feelslike_f);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.humid_pct);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.windspd_mph);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.windspd_kmh);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteSingle(value.windspd_kts);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteSingle(value.windspd_ms);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.winddir_deg);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteString(value.winddir_compass);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.cloudtotal_pct);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteSingle(value.vis_km);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.vis_mi);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.slp_mb);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.slp_in);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.dewpoint_c);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteSingle(value.dewpoint_f);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherUnlocked.CurrentRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __lat__ = default(float);
            var __lat__b__ = false;
            var __lon__ = default(float);
            var __lon__b__ = false;
            var __alt_m__ = default(float);
            var __alt_m__b__ = false;
            var __alt_ft__ = default(float);
            var __alt_ft__b__ = false;
            var __wx_desc__ = default(string);
            var __wx_desc__b__ = false;
            var __wx_code__ = default(int);
            var __wx_code__b__ = false;
            var __wx_icon__ = default(string);
            var __wx_icon__b__ = false;
            var __temp_c__ = default(float);
            var __temp_c__b__ = false;
            var __temp_f__ = default(float);
            var __temp_f__b__ = false;
            var __feelslike_c__ = default(float);
            var __feelslike_c__b__ = false;
            var __feelslike_f__ = default(float);
            var __feelslike_f__b__ = false;
            var __humid_pct__ = default(float);
            var __humid_pct__b__ = false;
            var __windspd_mph__ = default(float);
            var __windspd_mph__b__ = false;
            var __windspd_kmh__ = default(float);
            var __windspd_kmh__b__ = false;
            var __windspd_kts__ = default(float);
            var __windspd_kts__b__ = false;
            var __windspd_ms__ = default(float);
            var __windspd_ms__b__ = false;
            var __winddir_deg__ = default(float);
            var __winddir_deg__b__ = false;
            var __winddir_compass__ = default(string);
            var __winddir_compass__b__ = false;
            var __cloudtotal_pct__ = default(float);
            var __cloudtotal_pct__b__ = false;
            var __vis_km__ = default(float);
            var __vis_km__b__ = false;
            var __vis_mi__ = default(float);
            var __vis_mi__b__ = false;
            var __slp_mb__ = default(float);
            var __slp_mb__b__ = false;
            var __slp_in__ = default(float);
            var __slp_in__b__ = false;
            var __dewpoint_c__ = default(float);
            var __dewpoint_c__b__ = false;
            var __dewpoint_f__ = default(float);
            var __dewpoint_f__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __lat__ = reader.ReadSingle();
                        __lat__b__ = true;
                        break;
                    case 1:
                        __lon__ = reader.ReadSingle();
                        __lon__b__ = true;
                        break;
                    case 2:
                        __alt_m__ = reader.ReadSingle();
                        __alt_m__b__ = true;
                        break;
                    case 3:
                        __alt_ft__ = reader.ReadSingle();
                        __alt_ft__b__ = true;
                        break;
                    case 4:
                        __wx_desc__ = reader.ReadString();
                        __wx_desc__b__ = true;
                        break;
                    case 5:
                        __wx_code__ = reader.ReadInt32();
                        __wx_code__b__ = true;
                        break;
                    case 6:
                        __wx_icon__ = reader.ReadString();
                        __wx_icon__b__ = true;
                        break;
                    case 7:
                        __temp_c__ = reader.ReadSingle();
                        __temp_c__b__ = true;
                        break;
                    case 8:
                        __temp_f__ = reader.ReadSingle();
                        __temp_f__b__ = true;
                        break;
                    case 9:
                        __feelslike_c__ = reader.ReadSingle();
                        __feelslike_c__b__ = true;
                        break;
                    case 10:
                        __feelslike_f__ = reader.ReadSingle();
                        __feelslike_f__b__ = true;
                        break;
                    case 11:
                        __humid_pct__ = reader.ReadSingle();
                        __humid_pct__b__ = true;
                        break;
                    case 12:
                        __windspd_mph__ = reader.ReadSingle();
                        __windspd_mph__b__ = true;
                        break;
                    case 13:
                        __windspd_kmh__ = reader.ReadSingle();
                        __windspd_kmh__b__ = true;
                        break;
                    case 14:
                        __windspd_kts__ = reader.ReadSingle();
                        __windspd_kts__b__ = true;
                        break;
                    case 15:
                        __windspd_ms__ = reader.ReadSingle();
                        __windspd_ms__b__ = true;
                        break;
                    case 16:
                        __winddir_deg__ = reader.ReadSingle();
                        __winddir_deg__b__ = true;
                        break;
                    case 17:
                        __winddir_compass__ = reader.ReadString();
                        __winddir_compass__b__ = true;
                        break;
                    case 18:
                        __cloudtotal_pct__ = reader.ReadSingle();
                        __cloudtotal_pct__b__ = true;
                        break;
                    case 19:
                        __vis_km__ = reader.ReadSingle();
                        __vis_km__b__ = true;
                        break;
                    case 20:
                        __vis_mi__ = reader.ReadSingle();
                        __vis_mi__b__ = true;
                        break;
                    case 21:
                        __slp_mb__ = reader.ReadSingle();
                        __slp_mb__b__ = true;
                        break;
                    case 22:
                        __slp_in__ = reader.ReadSingle();
                        __slp_in__b__ = true;
                        break;
                    case 23:
                        __dewpoint_c__ = reader.ReadSingle();
                        __dewpoint_c__b__ = true;
                        break;
                    case 24:
                        __dewpoint_f__ = reader.ReadSingle();
                        __dewpoint_f__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherUnlocked.CurrentRootobject();
            if(__lat__b__) ____result.lat = __lat__;
            if(__lon__b__) ____result.lon = __lon__;
            if(__alt_m__b__) ____result.alt_m = __alt_m__;
            if(__alt_ft__b__) ____result.alt_ft = __alt_ft__;
            if(__wx_desc__b__) ____result.wx_desc = __wx_desc__;
            if(__wx_code__b__) ____result.wx_code = __wx_code__;
            if(__wx_icon__b__) ____result.wx_icon = __wx_icon__;
            if(__temp_c__b__) ____result.temp_c = __temp_c__;
            if(__temp_f__b__) ____result.temp_f = __temp_f__;
            if(__feelslike_c__b__) ____result.feelslike_c = __feelslike_c__;
            if(__feelslike_f__b__) ____result.feelslike_f = __feelslike_f__;
            if(__humid_pct__b__) ____result.humid_pct = __humid_pct__;
            if(__windspd_mph__b__) ____result.windspd_mph = __windspd_mph__;
            if(__windspd_kmh__b__) ____result.windspd_kmh = __windspd_kmh__;
            if(__windspd_kts__b__) ____result.windspd_kts = __windspd_kts__;
            if(__windspd_ms__b__) ____result.windspd_ms = __windspd_ms__;
            if(__winddir_deg__b__) ____result.winddir_deg = __winddir_deg__;
            if(__winddir_compass__b__) ____result.winddir_compass = __winddir_compass__;
            if(__cloudtotal_pct__b__) ____result.cloudtotal_pct = __cloudtotal_pct__;
            if(__vis_km__b__) ____result.vis_km = __vis_km__;
            if(__vis_mi__b__) ____result.vis_mi = __vis_mi__;
            if(__slp_mb__b__) ____result.slp_mb = __slp_mb__;
            if(__slp_in__b__) ____result.slp_in = __slp_in__;
            if(__dewpoint_c__b__) ____result.dewpoint_c = __dewpoint_c__;
            if(__dewpoint_f__b__) ____result.dewpoint_f = __dewpoint_f__;

            return ____result;
        }
    }


    public sealed class TimeframeFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimeframeFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("date"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("time"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("utcdate"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("utctime"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wx_desc"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wx_code"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("wx_icon"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_c"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_f"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_c"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("feelslike_f"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("winddir_deg"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("winddir_compass"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_mph"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_kmh"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_kts"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_ms"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_mph"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_kmh"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_kts"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_ms"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_low_pct"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_mid_pct"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloud_high_pct"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudtotal_pct"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_mm"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_in"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain_mm"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain_in"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_mm"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_in"), 30},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_accum_cm"), 31},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_accum_in"), 32},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("prob_precip_pct"), 33},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humid_pct"), 34},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpoint_c"), 35},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("dewpoint_f"), 36},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_km"), 37},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("vis_mi"), 38},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_mb"), 39},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_in"), 40},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("date"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("utcdate"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("utctime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wx_desc"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wx_code"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("wx_icon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("feelslike_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("winddir_deg"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("winddir_compass"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_kmh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_kts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_ms"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_kmh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_kts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_ms"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_low_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_mid_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloud_high_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudtotal_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_accum_cm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_accum_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("prob_precip_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humid_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpoint_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("dewpoint_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_km"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("vis_mi"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_mb"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_in"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.date);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteInt32(value.time);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.utcdate);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteInt32(value.utctime);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.wx_desc);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteInt32(value.wx_code);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.wx_icon);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.temp_c);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.temp_f);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.feelslike_c);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.feelslike_f);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.winddir_deg);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteString(value.winddir_compass);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.windspd_mph);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteSingle(value.windspd_kmh);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteSingle(value.windspd_kts);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.windspd_ms);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.windgst_mph);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.windgst_kmh);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteSingle(value.windgst_kts);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.windgst_ms);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.cloud_low_pct);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.cloud_mid_pct);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.cloud_high_pct);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteSingle(value.cloudtotal_pct);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteSingle(value.precip_mm);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteSingle(value.precip_in);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteSingle(value.rain_mm);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteSingle(value.rain_in);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteSingle(value.snow_mm);
            writer.WriteRaw(this.____stringByteKeys[30]);
            writer.WriteSingle(value.snow_in);
            writer.WriteRaw(this.____stringByteKeys[31]);
            writer.WriteSingle(value.snow_accum_cm);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.WriteSingle(value.snow_accum_in);
            writer.WriteRaw(this.____stringByteKeys[33]);
            writer.WriteString(value.prob_precip_pct);
            writer.WriteRaw(this.____stringByteKeys[34]);
            writer.WriteSingle(value.humid_pct);
            writer.WriteRaw(this.____stringByteKeys[35]);
            writer.WriteSingle(value.dewpoint_c);
            writer.WriteRaw(this.____stringByteKeys[36]);
            writer.WriteSingle(value.dewpoint_f);
            writer.WriteRaw(this.____stringByteKeys[37]);
            writer.WriteSingle(value.vis_km);
            writer.WriteRaw(this.____stringByteKeys[38]);
            writer.WriteSingle(value.vis_mi);
            writer.WriteRaw(this.____stringByteKeys[39]);
            writer.WriteSingle(value.slp_mb);
            writer.WriteRaw(this.____stringByteKeys[40]);
            writer.WriteSingle(value.slp_in);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __date__ = default(string);
            var __date__b__ = false;
            var __time__ = default(int);
            var __time__b__ = false;
            var __utcdate__ = default(string);
            var __utcdate__b__ = false;
            var __utctime__ = default(int);
            var __utctime__b__ = false;
            var __wx_desc__ = default(string);
            var __wx_desc__b__ = false;
            var __wx_code__ = default(int);
            var __wx_code__b__ = false;
            var __wx_icon__ = default(string);
            var __wx_icon__b__ = false;
            var __temp_c__ = default(float);
            var __temp_c__b__ = false;
            var __temp_f__ = default(float);
            var __temp_f__b__ = false;
            var __feelslike_c__ = default(float);
            var __feelslike_c__b__ = false;
            var __feelslike_f__ = default(float);
            var __feelslike_f__b__ = false;
            var __winddir_deg__ = default(float);
            var __winddir_deg__b__ = false;
            var __winddir_compass__ = default(string);
            var __winddir_compass__b__ = false;
            var __windspd_mph__ = default(float);
            var __windspd_mph__b__ = false;
            var __windspd_kmh__ = default(float);
            var __windspd_kmh__b__ = false;
            var __windspd_kts__ = default(float);
            var __windspd_kts__b__ = false;
            var __windspd_ms__ = default(float);
            var __windspd_ms__b__ = false;
            var __windgst_mph__ = default(float);
            var __windgst_mph__b__ = false;
            var __windgst_kmh__ = default(float);
            var __windgst_kmh__b__ = false;
            var __windgst_kts__ = default(float);
            var __windgst_kts__b__ = false;
            var __windgst_ms__ = default(float);
            var __windgst_ms__b__ = false;
            var __cloud_low_pct__ = default(float);
            var __cloud_low_pct__b__ = false;
            var __cloud_mid_pct__ = default(float);
            var __cloud_mid_pct__b__ = false;
            var __cloud_high_pct__ = default(float);
            var __cloud_high_pct__b__ = false;
            var __cloudtotal_pct__ = default(float);
            var __cloudtotal_pct__b__ = false;
            var __precip_mm__ = default(float);
            var __precip_mm__b__ = false;
            var __precip_in__ = default(float);
            var __precip_in__b__ = false;
            var __rain_mm__ = default(float);
            var __rain_mm__b__ = false;
            var __rain_in__ = default(float);
            var __rain_in__b__ = false;
            var __snow_mm__ = default(float);
            var __snow_mm__b__ = false;
            var __snow_in__ = default(float);
            var __snow_in__b__ = false;
            var __snow_accum_cm__ = default(float);
            var __snow_accum_cm__b__ = false;
            var __snow_accum_in__ = default(float);
            var __snow_accum_in__b__ = false;
            var __prob_precip_pct__ = default(string);
            var __prob_precip_pct__b__ = false;
            var __humid_pct__ = default(float);
            var __humid_pct__b__ = false;
            var __dewpoint_c__ = default(float);
            var __dewpoint_c__b__ = false;
            var __dewpoint_f__ = default(float);
            var __dewpoint_f__b__ = false;
            var __vis_km__ = default(float);
            var __vis_km__b__ = false;
            var __vis_mi__ = default(float);
            var __vis_mi__b__ = false;
            var __slp_mb__ = default(float);
            var __slp_mb__b__ = false;
            var __slp_in__ = default(float);
            var __slp_in__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __date__ = reader.ReadString();
                        __date__b__ = true;
                        break;
                    case 1:
                        __time__ = reader.ReadInt32();
                        __time__b__ = true;
                        break;
                    case 2:
                        __utcdate__ = reader.ReadString();
                        __utcdate__b__ = true;
                        break;
                    case 3:
                        __utctime__ = reader.ReadInt32();
                        __utctime__b__ = true;
                        break;
                    case 4:
                        __wx_desc__ = reader.ReadString();
                        __wx_desc__b__ = true;
                        break;
                    case 5:
                        __wx_code__ = reader.ReadInt32();
                        __wx_code__b__ = true;
                        break;
                    case 6:
                        __wx_icon__ = reader.ReadString();
                        __wx_icon__b__ = true;
                        break;
                    case 7:
                        __temp_c__ = reader.ReadSingle();
                        __temp_c__b__ = true;
                        break;
                    case 8:
                        __temp_f__ = reader.ReadSingle();
                        __temp_f__b__ = true;
                        break;
                    case 9:
                        __feelslike_c__ = reader.ReadSingle();
                        __feelslike_c__b__ = true;
                        break;
                    case 10:
                        __feelslike_f__ = reader.ReadSingle();
                        __feelslike_f__b__ = true;
                        break;
                    case 11:
                        __winddir_deg__ = reader.ReadSingle();
                        __winddir_deg__b__ = true;
                        break;
                    case 12:
                        __winddir_compass__ = reader.ReadString();
                        __winddir_compass__b__ = true;
                        break;
                    case 13:
                        __windspd_mph__ = reader.ReadSingle();
                        __windspd_mph__b__ = true;
                        break;
                    case 14:
                        __windspd_kmh__ = reader.ReadSingle();
                        __windspd_kmh__b__ = true;
                        break;
                    case 15:
                        __windspd_kts__ = reader.ReadSingle();
                        __windspd_kts__b__ = true;
                        break;
                    case 16:
                        __windspd_ms__ = reader.ReadSingle();
                        __windspd_ms__b__ = true;
                        break;
                    case 17:
                        __windgst_mph__ = reader.ReadSingle();
                        __windgst_mph__b__ = true;
                        break;
                    case 18:
                        __windgst_kmh__ = reader.ReadSingle();
                        __windgst_kmh__b__ = true;
                        break;
                    case 19:
                        __windgst_kts__ = reader.ReadSingle();
                        __windgst_kts__b__ = true;
                        break;
                    case 20:
                        __windgst_ms__ = reader.ReadSingle();
                        __windgst_ms__b__ = true;
                        break;
                    case 21:
                        __cloud_low_pct__ = reader.ReadSingle();
                        __cloud_low_pct__b__ = true;
                        break;
                    case 22:
                        __cloud_mid_pct__ = reader.ReadSingle();
                        __cloud_mid_pct__b__ = true;
                        break;
                    case 23:
                        __cloud_high_pct__ = reader.ReadSingle();
                        __cloud_high_pct__b__ = true;
                        break;
                    case 24:
                        __cloudtotal_pct__ = reader.ReadSingle();
                        __cloudtotal_pct__b__ = true;
                        break;
                    case 25:
                        __precip_mm__ = reader.ReadSingle();
                        __precip_mm__b__ = true;
                        break;
                    case 26:
                        __precip_in__ = reader.ReadSingle();
                        __precip_in__b__ = true;
                        break;
                    case 27:
                        __rain_mm__ = reader.ReadSingle();
                        __rain_mm__b__ = true;
                        break;
                    case 28:
                        __rain_in__ = reader.ReadSingle();
                        __rain_in__b__ = true;
                        break;
                    case 29:
                        __snow_mm__ = reader.ReadSingle();
                        __snow_mm__b__ = true;
                        break;
                    case 30:
                        __snow_in__ = reader.ReadSingle();
                        __snow_in__b__ = true;
                        break;
                    case 31:
                        __snow_accum_cm__ = reader.ReadSingle();
                        __snow_accum_cm__b__ = true;
                        break;
                    case 32:
                        __snow_accum_in__ = reader.ReadSingle();
                        __snow_accum_in__b__ = true;
                        break;
                    case 33:
                        __prob_precip_pct__ = reader.ReadString();
                        __prob_precip_pct__b__ = true;
                        break;
                    case 34:
                        __humid_pct__ = reader.ReadSingle();
                        __humid_pct__b__ = true;
                        break;
                    case 35:
                        __dewpoint_c__ = reader.ReadSingle();
                        __dewpoint_c__b__ = true;
                        break;
                    case 36:
                        __dewpoint_f__ = reader.ReadSingle();
                        __dewpoint_f__b__ = true;
                        break;
                    case 37:
                        __vis_km__ = reader.ReadSingle();
                        __vis_km__b__ = true;
                        break;
                    case 38:
                        __vis_mi__ = reader.ReadSingle();
                        __vis_mi__b__ = true;
                        break;
                    case 39:
                        __slp_mb__ = reader.ReadSingle();
                        __slp_mb__b__ = true;
                        break;
                    case 40:
                        __slp_in__ = reader.ReadSingle();
                        __slp_in__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe();
            if(__date__b__) ____result.date = __date__;
            if(__time__b__) ____result.time = __time__;
            if(__utcdate__b__) ____result.utcdate = __utcdate__;
            if(__utctime__b__) ____result.utctime = __utctime__;
            if(__wx_desc__b__) ____result.wx_desc = __wx_desc__;
            if(__wx_code__b__) ____result.wx_code = __wx_code__;
            if(__wx_icon__b__) ____result.wx_icon = __wx_icon__;
            if(__temp_c__b__) ____result.temp_c = __temp_c__;
            if(__temp_f__b__) ____result.temp_f = __temp_f__;
            if(__feelslike_c__b__) ____result.feelslike_c = __feelslike_c__;
            if(__feelslike_f__b__) ____result.feelslike_f = __feelslike_f__;
            if(__winddir_deg__b__) ____result.winddir_deg = __winddir_deg__;
            if(__winddir_compass__b__) ____result.winddir_compass = __winddir_compass__;
            if(__windspd_mph__b__) ____result.windspd_mph = __windspd_mph__;
            if(__windspd_kmh__b__) ____result.windspd_kmh = __windspd_kmh__;
            if(__windspd_kts__b__) ____result.windspd_kts = __windspd_kts__;
            if(__windspd_ms__b__) ____result.windspd_ms = __windspd_ms__;
            if(__windgst_mph__b__) ____result.windgst_mph = __windgst_mph__;
            if(__windgst_kmh__b__) ____result.windgst_kmh = __windgst_kmh__;
            if(__windgst_kts__b__) ____result.windgst_kts = __windgst_kts__;
            if(__windgst_ms__b__) ____result.windgst_ms = __windgst_ms__;
            if(__cloud_low_pct__b__) ____result.cloud_low_pct = __cloud_low_pct__;
            if(__cloud_mid_pct__b__) ____result.cloud_mid_pct = __cloud_mid_pct__;
            if(__cloud_high_pct__b__) ____result.cloud_high_pct = __cloud_high_pct__;
            if(__cloudtotal_pct__b__) ____result.cloudtotal_pct = __cloudtotal_pct__;
            if(__precip_mm__b__) ____result.precip_mm = __precip_mm__;
            if(__precip_in__b__) ____result.precip_in = __precip_in__;
            if(__rain_mm__b__) ____result.rain_mm = __rain_mm__;
            if(__rain_in__b__) ____result.rain_in = __rain_in__;
            if(__snow_mm__b__) ____result.snow_mm = __snow_mm__;
            if(__snow_in__b__) ____result.snow_in = __snow_in__;
            if(__snow_accum_cm__b__) ____result.snow_accum_cm = __snow_accum_cm__;
            if(__snow_accum_in__b__) ____result.snow_accum_in = __snow_accum_in__;
            if(__prob_precip_pct__b__) ____result.prob_precip_pct = __prob_precip_pct__;
            if(__humid_pct__b__) ____result.humid_pct = __humid_pct__;
            if(__dewpoint_c__b__) ____result.dewpoint_c = __dewpoint_c__;
            if(__dewpoint_f__b__) ____result.dewpoint_f = __dewpoint_f__;
            if(__vis_km__b__) ____result.vis_km = __vis_km__;
            if(__vis_mi__b__) ____result.vis_mi = __vis_mi__;
            if(__slp_mb__b__) ____result.slp_mb = __slp_mb__;
            if(__slp_in__b__) ____result.slp_in = __slp_in__;

            return ____result;
        }
    }


    public sealed class DayFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherUnlocked.Day>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DayFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("date"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise_time"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset_time"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise_time"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset_time"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_max_c"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_max_f"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_min_c"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temp_min_f"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_total_mm"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precip_total_in"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain_total_mm"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("rain_total_in"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_total_mm"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snow_total_in"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("prob_precip_pct"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humid_max_pct"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humid_min_pct"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_max_mph"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_max_kmh"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_max_kts"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windspd_max_ms"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_max_mph"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_max_kmh"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_max_kts"), 24},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windgst_max_ms"), 25},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_max_in"), 26},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_max_mb"), 27},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_min_in"), 28},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("slp_min_mb"), 29},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Timeframes"), 30},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("date"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonrise_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset_time"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_max_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_max_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_min_c"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temp_min_f"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_total_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precip_total_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain_total_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("rain_total_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_total_mm"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snow_total_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("prob_precip_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humid_max_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humid_min_pct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_max_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_max_kmh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_max_kts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windspd_max_ms"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_max_mph"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_max_kmh"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_max_kts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windgst_max_ms"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_max_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_max_mb"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_min_in"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("slp_min_mb"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("Timeframes"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherUnlocked.Day value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.date);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.sunrise_time);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.sunset_time);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.moonrise_time);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.moonset_time);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.temp_max_c);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.temp_max_f);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.temp_min_c);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.temp_min_f);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.precip_total_mm);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.precip_total_in);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.rain_total_mm);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.rain_total_in);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.snow_total_mm);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteSingle(value.snow_total_in);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteSingle(value.prob_precip_pct);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.WriteSingle(value.humid_max_pct);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.humid_min_pct);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.windspd_max_mph);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteSingle(value.windspd_max_kmh);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.WriteSingle(value.windspd_max_kts);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.WriteSingle(value.windspd_max_ms);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.WriteSingle(value.windgst_max_mph);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.windgst_max_kmh);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteSingle(value.windgst_max_kts);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.WriteSingle(value.windgst_max_ms);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.WriteSingle(value.slp_max_in);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.WriteSingle(value.slp_max_mb);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.WriteSingle(value.slp_min_in);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.WriteSingle(value.slp_min_mb);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe[]>().Serialize(ref writer, value.Timeframes, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherUnlocked.Day Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __date__ = default(string);
            var __date__b__ = false;
            var __sunrise_time__ = default(string);
            var __sunrise_time__b__ = false;
            var __sunset_time__ = default(string);
            var __sunset_time__b__ = false;
            var __moonrise_time__ = default(string);
            var __moonrise_time__b__ = false;
            var __moonset_time__ = default(string);
            var __moonset_time__b__ = false;
            var __temp_max_c__ = default(float);
            var __temp_max_c__b__ = false;
            var __temp_max_f__ = default(float);
            var __temp_max_f__b__ = false;
            var __temp_min_c__ = default(float);
            var __temp_min_c__b__ = false;
            var __temp_min_f__ = default(float);
            var __temp_min_f__b__ = false;
            var __precip_total_mm__ = default(float);
            var __precip_total_mm__b__ = false;
            var __precip_total_in__ = default(float);
            var __precip_total_in__b__ = false;
            var __rain_total_mm__ = default(float);
            var __rain_total_mm__b__ = false;
            var __rain_total_in__ = default(float);
            var __rain_total_in__b__ = false;
            var __snow_total_mm__ = default(float);
            var __snow_total_mm__b__ = false;
            var __snow_total_in__ = default(float);
            var __snow_total_in__b__ = false;
            var __prob_precip_pct__ = default(float);
            var __prob_precip_pct__b__ = false;
            var __humid_max_pct__ = default(float);
            var __humid_max_pct__b__ = false;
            var __humid_min_pct__ = default(float);
            var __humid_min_pct__b__ = false;
            var __windspd_max_mph__ = default(float);
            var __windspd_max_mph__b__ = false;
            var __windspd_max_kmh__ = default(float);
            var __windspd_max_kmh__b__ = false;
            var __windspd_max_kts__ = default(float);
            var __windspd_max_kts__b__ = false;
            var __windspd_max_ms__ = default(float);
            var __windspd_max_ms__b__ = false;
            var __windgst_max_mph__ = default(float);
            var __windgst_max_mph__b__ = false;
            var __windgst_max_kmh__ = default(float);
            var __windgst_max_kmh__b__ = false;
            var __windgst_max_kts__ = default(float);
            var __windgst_max_kts__b__ = false;
            var __windgst_max_ms__ = default(float);
            var __windgst_max_ms__b__ = false;
            var __slp_max_in__ = default(float);
            var __slp_max_in__b__ = false;
            var __slp_max_mb__ = default(float);
            var __slp_max_mb__b__ = false;
            var __slp_min_in__ = default(float);
            var __slp_min_in__b__ = false;
            var __slp_min_mb__ = default(float);
            var __slp_min_mb__b__ = false;
            var __Timeframes__ = default(global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe[]);
            var __Timeframes__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __date__ = reader.ReadString();
                        __date__b__ = true;
                        break;
                    case 1:
                        __sunrise_time__ = reader.ReadString();
                        __sunrise_time__b__ = true;
                        break;
                    case 2:
                        __sunset_time__ = reader.ReadString();
                        __sunset_time__b__ = true;
                        break;
                    case 3:
                        __moonrise_time__ = reader.ReadString();
                        __moonrise_time__b__ = true;
                        break;
                    case 4:
                        __moonset_time__ = reader.ReadString();
                        __moonset_time__b__ = true;
                        break;
                    case 5:
                        __temp_max_c__ = reader.ReadSingle();
                        __temp_max_c__b__ = true;
                        break;
                    case 6:
                        __temp_max_f__ = reader.ReadSingle();
                        __temp_max_f__b__ = true;
                        break;
                    case 7:
                        __temp_min_c__ = reader.ReadSingle();
                        __temp_min_c__b__ = true;
                        break;
                    case 8:
                        __temp_min_f__ = reader.ReadSingle();
                        __temp_min_f__b__ = true;
                        break;
                    case 9:
                        __precip_total_mm__ = reader.ReadSingle();
                        __precip_total_mm__b__ = true;
                        break;
                    case 10:
                        __precip_total_in__ = reader.ReadSingle();
                        __precip_total_in__b__ = true;
                        break;
                    case 11:
                        __rain_total_mm__ = reader.ReadSingle();
                        __rain_total_mm__b__ = true;
                        break;
                    case 12:
                        __rain_total_in__ = reader.ReadSingle();
                        __rain_total_in__b__ = true;
                        break;
                    case 13:
                        __snow_total_mm__ = reader.ReadSingle();
                        __snow_total_mm__b__ = true;
                        break;
                    case 14:
                        __snow_total_in__ = reader.ReadSingle();
                        __snow_total_in__b__ = true;
                        break;
                    case 15:
                        __prob_precip_pct__ = reader.ReadSingle();
                        __prob_precip_pct__b__ = true;
                        break;
                    case 16:
                        __humid_max_pct__ = reader.ReadSingle();
                        __humid_max_pct__b__ = true;
                        break;
                    case 17:
                        __humid_min_pct__ = reader.ReadSingle();
                        __humid_min_pct__b__ = true;
                        break;
                    case 18:
                        __windspd_max_mph__ = reader.ReadSingle();
                        __windspd_max_mph__b__ = true;
                        break;
                    case 19:
                        __windspd_max_kmh__ = reader.ReadSingle();
                        __windspd_max_kmh__b__ = true;
                        break;
                    case 20:
                        __windspd_max_kts__ = reader.ReadSingle();
                        __windspd_max_kts__b__ = true;
                        break;
                    case 21:
                        __windspd_max_ms__ = reader.ReadSingle();
                        __windspd_max_ms__b__ = true;
                        break;
                    case 22:
                        __windgst_max_mph__ = reader.ReadSingle();
                        __windgst_max_mph__b__ = true;
                        break;
                    case 23:
                        __windgst_max_kmh__ = reader.ReadSingle();
                        __windgst_max_kmh__b__ = true;
                        break;
                    case 24:
                        __windgst_max_kts__ = reader.ReadSingle();
                        __windgst_max_kts__b__ = true;
                        break;
                    case 25:
                        __windgst_max_ms__ = reader.ReadSingle();
                        __windgst_max_ms__b__ = true;
                        break;
                    case 26:
                        __slp_max_in__ = reader.ReadSingle();
                        __slp_max_in__b__ = true;
                        break;
                    case 27:
                        __slp_max_mb__ = reader.ReadSingle();
                        __slp_max_mb__b__ = true;
                        break;
                    case 28:
                        __slp_min_in__ = reader.ReadSingle();
                        __slp_min_in__b__ = true;
                        break;
                    case 29:
                        __slp_min_mb__ = reader.ReadSingle();
                        __slp_min_mb__b__ = true;
                        break;
                    case 30:
                        __Timeframes__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherUnlocked.Timeframe[]>().Deserialize(ref reader, formatterResolver);
                        __Timeframes__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherUnlocked.Day();
            if(__date__b__) ____result.date = __date__;
            if(__sunrise_time__b__) ____result.sunrise_time = __sunrise_time__;
            if(__sunset_time__b__) ____result.sunset_time = __sunset_time__;
            if(__moonrise_time__b__) ____result.moonrise_time = __moonrise_time__;
            if(__moonset_time__b__) ____result.moonset_time = __moonset_time__;
            if(__temp_max_c__b__) ____result.temp_max_c = __temp_max_c__;
            if(__temp_max_f__b__) ____result.temp_max_f = __temp_max_f__;
            if(__temp_min_c__b__) ____result.temp_min_c = __temp_min_c__;
            if(__temp_min_f__b__) ____result.temp_min_f = __temp_min_f__;
            if(__precip_total_mm__b__) ____result.precip_total_mm = __precip_total_mm__;
            if(__precip_total_in__b__) ____result.precip_total_in = __precip_total_in__;
            if(__rain_total_mm__b__) ____result.rain_total_mm = __rain_total_mm__;
            if(__rain_total_in__b__) ____result.rain_total_in = __rain_total_in__;
            if(__snow_total_mm__b__) ____result.snow_total_mm = __snow_total_mm__;
            if(__snow_total_in__b__) ____result.snow_total_in = __snow_total_in__;
            if(__prob_precip_pct__b__) ____result.prob_precip_pct = __prob_precip_pct__;
            if(__humid_max_pct__b__) ____result.humid_max_pct = __humid_max_pct__;
            if(__humid_min_pct__b__) ____result.humid_min_pct = __humid_min_pct__;
            if(__windspd_max_mph__b__) ____result.windspd_max_mph = __windspd_max_mph__;
            if(__windspd_max_kmh__b__) ____result.windspd_max_kmh = __windspd_max_kmh__;
            if(__windspd_max_kts__b__) ____result.windspd_max_kts = __windspd_max_kts__;
            if(__windspd_max_ms__b__) ____result.windspd_max_ms = __windspd_max_ms__;
            if(__windgst_max_mph__b__) ____result.windgst_max_mph = __windgst_max_mph__;
            if(__windgst_max_kmh__b__) ____result.windgst_max_kmh = __windgst_max_kmh__;
            if(__windgst_max_kts__b__) ____result.windgst_max_kts = __windgst_max_kts__;
            if(__windgst_max_ms__b__) ____result.windgst_max_ms = __windgst_max_ms__;
            if(__slp_max_in__b__) ____result.slp_max_in = __slp_max_in__;
            if(__slp_max_mb__b__) ____result.slp_max_mb = __slp_max_mb__;
            if(__slp_min_in__b__) ____result.slp_min_in = __slp_min_in__;
            if(__slp_min_mb__b__) ____result.slp_min_mb = __slp_min_mb__;
            if(__Timeframes__b__) ____result.Timeframes = __Timeframes__;

            return ____result;
        }
    }


    public sealed class ForecastRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherUnlocked.ForecastRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Days"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Days"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherUnlocked.ForecastRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherUnlocked.Day[]>().Serialize(ref writer, value.Days, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherUnlocked.ForecastRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Days__ = default(global::SimpleWeather.Weather_API.WeatherUnlocked.Day[]);
            var __Days__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Days__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherUnlocked.Day[]>().Deserialize(ref reader, formatterResolver);
                        __Days__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherUnlocked.ForecastRootobject();
            if(__Days__b__) ____result.Days = __Days__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace SimpleWeather.Weather_API.Utf8JsonGen.Formatters.SimpleWeather.Weather_API.WeatherKit
{
    using System;
    using Utf8Json;


    public sealed class AvailabilityRootobjectFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.AvailabilityRootobject>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public AvailabilityRootobjectFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("Datasets"), 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("Datasets"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.AvailabilityRootobject value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.Datasets, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.AvailabilityRootobject Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __Datasets__ = default(string[]);
            var __Datasets__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Datasets__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, formatterResolver);
                        __Datasets__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.AvailabilityRootobject();
            if(__Datasets__b__) ____result.Datasets = __Datasets__;

            return ____result;
        }
    }


    public sealed class MetadataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.Metadata>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MetadataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("attributionURL"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expireTime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("language"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("latitude"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("longitude"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("providerLogo"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("providerName"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("readTime"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("reportedTime"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temporarilyUnavailable"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("units"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("version"), 11},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("attributionURL"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expireTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("language"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("latitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("longitude"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("providerLogo"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("providerName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("readTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("reportedTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temporarilyUnavailable"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("units"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("version"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.Metadata value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.attributionURL);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.expireTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.language);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.latitude);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.longitude);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.providerLogo);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteString(value.providerName);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.readTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.reportedTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.temporarilyUnavailable, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.UnitsSystem?>().Serialize(ref writer, value.units, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteInt32(value.version);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.Metadata Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __attributionURL__ = default(string);
            var __attributionURL__b__ = false;
            var __expireTime__ = default(global::System.DateTimeOffset);
            var __expireTime__b__ = false;
            var __language__ = default(string);
            var __language__b__ = false;
            var __latitude__ = default(float);
            var __latitude__b__ = false;
            var __longitude__ = default(float);
            var __longitude__b__ = false;
            var __providerLogo__ = default(string);
            var __providerLogo__b__ = false;
            var __providerName__ = default(string);
            var __providerName__b__ = false;
            var __readTime__ = default(global::System.DateTimeOffset);
            var __readTime__b__ = false;
            var __reportedTime__ = default(global::System.DateTimeOffset?);
            var __reportedTime__b__ = false;
            var __temporarilyUnavailable__ = default(bool?);
            var __temporarilyUnavailable__b__ = false;
            var __units__ = default(global::SimpleWeather.Weather_API.WeatherKit.UnitsSystem?);
            var __units__b__ = false;
            var __version__ = default(int);
            var __version__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __attributionURL__ = reader.ReadString();
                        __attributionURL__b__ = true;
                        break;
                    case 1:
                        __expireTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __expireTime__b__ = true;
                        break;
                    case 2:
                        __language__ = reader.ReadString();
                        __language__b__ = true;
                        break;
                    case 3:
                        __latitude__ = reader.ReadSingle();
                        __latitude__b__ = true;
                        break;
                    case 4:
                        __longitude__ = reader.ReadSingle();
                        __longitude__b__ = true;
                        break;
                    case 5:
                        __providerLogo__ = reader.ReadString();
                        __providerLogo__b__ = true;
                        break;
                    case 6:
                        __providerName__ = reader.ReadString();
                        __providerName__b__ = true;
                        break;
                    case 7:
                        __readTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __readTime__b__ = true;
                        break;
                    case 8:
                        __reportedTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __reportedTime__b__ = true;
                        break;
                    case 9:
                        __temporarilyUnavailable__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __temporarilyUnavailable__b__ = true;
                        break;
                    case 10:
                        __units__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.UnitsSystem?>().Deserialize(ref reader, formatterResolver);
                        __units__b__ = true;
                        break;
                    case 11:
                        __version__ = reader.ReadInt32();
                        __version__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.Metadata();
            if(__attributionURL__b__) ____result.attributionURL = __attributionURL__;
            if(__expireTime__b__) ____result.expireTime = __expireTime__;
            if(__language__b__) ____result.language = __language__;
            if(__latitude__b__) ____result.latitude = __latitude__;
            if(__longitude__b__) ____result.longitude = __longitude__;
            if(__providerLogo__b__) ____result.providerLogo = __providerLogo__;
            if(__providerName__b__) ____result.providerName = __providerName__;
            if(__readTime__b__) ____result.readTime = __readTime__;
            if(__reportedTime__b__) ____result.reportedTime = __reportedTime__;
            if(__temporarilyUnavailable__b__) ____result.temporarilyUnavailable = __temporarilyUnavailable__;
            if(__units__b__) ____result.units = __units__;
            if(__version__b__) ____result.version = __version__;

            return ____result;
        }
    }


    public sealed class CurrentWeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CurrentWeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("asOf"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCover"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCoverLowAltPct"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCoverMidAltPct"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCoverHighAltPct"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("conditionCode"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daylight"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationIntensity"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressureTrend"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureApparent"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureDewPoint"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvIndex"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windGust"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metadata"), 20},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("asOf"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudCoverLowAltPct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudCoverMidAltPct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("cloudCoverHighAltPct"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("conditionCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daylight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationIntensity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressureTrend"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureApparent"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureDewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metadata"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.asOf, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloudCover, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloudCoverLowAltPct, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloudCoverMidAltPct, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.cloudCoverHighAltPct, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.conditionCode);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.daylight, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.precipitationIntensity);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.pressure);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PressureTrend>().Serialize(ref writer, value.pressureTrend, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.temperature);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.temperatureApparent);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteSingle(value.temperatureDewPoint);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteInt32(value.uvIndex);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.WriteSingle(value.visibility);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.windDirection, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.windGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.WriteSingle(value.windSpeed);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Serialize(ref writer, value.metadata, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __asOf__ = default(global::System.DateTimeOffset);
            var __asOf__b__ = false;
            var __cloudCover__ = default(float?);
            var __cloudCover__b__ = false;
            var __cloudCoverLowAltPct__ = default(float?);
            var __cloudCoverLowAltPct__b__ = false;
            var __cloudCoverMidAltPct__ = default(float?);
            var __cloudCoverMidAltPct__b__ = false;
            var __cloudCoverHighAltPct__ = default(float?);
            var __cloudCoverHighAltPct__b__ = false;
            var __conditionCode__ = default(string);
            var __conditionCode__b__ = false;
            var __daylight__ = default(bool?);
            var __daylight__b__ = false;
            var __humidity__ = default(float);
            var __humidity__b__ = false;
            var __precipitationIntensity__ = default(float);
            var __precipitationIntensity__b__ = false;
            var __pressure__ = default(float);
            var __pressure__b__ = false;
            var __pressureTrend__ = default(global::SimpleWeather.Weather_API.WeatherKit.PressureTrend);
            var __pressureTrend__b__ = false;
            var __temperature__ = default(float);
            var __temperature__b__ = false;
            var __temperatureApparent__ = default(float);
            var __temperatureApparent__b__ = false;
            var __temperatureDewPoint__ = default(float);
            var __temperatureDewPoint__b__ = false;
            var __uvIndex__ = default(int);
            var __uvIndex__b__ = false;
            var __visibility__ = default(float);
            var __visibility__b__ = false;
            var __windDirection__ = default(int?);
            var __windDirection__b__ = false;
            var __windGust__ = default(float?);
            var __windGust__b__ = false;
            var __windSpeed__ = default(float);
            var __windSpeed__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __metadata__ = default(global::SimpleWeather.Weather_API.WeatherKit.Metadata);
            var __metadata__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __asOf__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __asOf__b__ = true;
                        break;
                    case 1:
                        __cloudCover__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloudCover__b__ = true;
                        break;
                    case 2:
                        __cloudCoverLowAltPct__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloudCoverLowAltPct__b__ = true;
                        break;
                    case 3:
                        __cloudCoverMidAltPct__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloudCoverMidAltPct__b__ = true;
                        break;
                    case 4:
                        __cloudCoverHighAltPct__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __cloudCoverHighAltPct__b__ = true;
                        break;
                    case 5:
                        __conditionCode__ = reader.ReadString();
                        __conditionCode__b__ = true;
                        break;
                    case 6:
                        __daylight__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __daylight__b__ = true;
                        break;
                    case 7:
                        __humidity__ = reader.ReadSingle();
                        __humidity__b__ = true;
                        break;
                    case 8:
                        __precipitationIntensity__ = reader.ReadSingle();
                        __precipitationIntensity__b__ = true;
                        break;
                    case 9:
                        __pressure__ = reader.ReadSingle();
                        __pressure__b__ = true;
                        break;
                    case 10:
                        __pressureTrend__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PressureTrend>().Deserialize(ref reader, formatterResolver);
                        __pressureTrend__b__ = true;
                        break;
                    case 11:
                        __temperature__ = reader.ReadSingle();
                        __temperature__b__ = true;
                        break;
                    case 12:
                        __temperatureApparent__ = reader.ReadSingle();
                        __temperatureApparent__b__ = true;
                        break;
                    case 13:
                        __temperatureDewPoint__ = reader.ReadSingle();
                        __temperatureDewPoint__b__ = true;
                        break;
                    case 14:
                        __uvIndex__ = reader.ReadInt32();
                        __uvIndex__b__ = true;
                        break;
                    case 15:
                        __visibility__ = reader.ReadSingle();
                        __visibility__b__ = true;
                        break;
                    case 16:
                        __windDirection__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __windDirection__b__ = true;
                        break;
                    case 17:
                        __windGust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __windGust__b__ = true;
                        break;
                    case 18:
                        __windSpeed__ = reader.ReadSingle();
                        __windSpeed__b__ = true;
                        break;
                    case 19:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 20:
                        __metadata__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Deserialize(ref reader, formatterResolver);
                        __metadata__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather();
            if(__asOf__b__) ____result.asOf = __asOf__;
            if(__cloudCover__b__) ____result.cloudCover = __cloudCover__;
            if(__cloudCoverLowAltPct__b__) ____result.cloudCoverLowAltPct = __cloudCoverLowAltPct__;
            if(__cloudCoverMidAltPct__b__) ____result.cloudCoverMidAltPct = __cloudCoverMidAltPct__;
            if(__cloudCoverHighAltPct__b__) ____result.cloudCoverHighAltPct = __cloudCoverHighAltPct__;
            if(__conditionCode__b__) ____result.conditionCode = __conditionCode__;
            if(__daylight__b__) ____result.daylight = __daylight__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__precipitationIntensity__b__) ____result.precipitationIntensity = __precipitationIntensity__;
            if(__pressure__b__) ____result.pressure = __pressure__;
            if(__pressureTrend__b__) ____result.pressureTrend = __pressureTrend__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__temperatureApparent__b__) ____result.temperatureApparent = __temperatureApparent__;
            if(__temperatureDewPoint__b__) ____result.temperatureDewPoint = __temperatureDewPoint__;
            if(__uvIndex__b__) ____result.uvIndex = __uvIndex__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windGust__b__) ____result.windGust = __windGust__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__name__b__) ____result.name = __name__;
            if(__metadata__b__) ____result.metadata = __metadata__;

            return ____result;
        }
    }


    public sealed class DayPartForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DayPartForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCover"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("conditionCode"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastEnd"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastStart"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationAmount"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationChance"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationType"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowfallAmount"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 10},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("cloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("conditionCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastEnd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastStart"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationAmount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationChance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snowfallAmount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.cloudCover);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.conditionCode);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.forecastEnd, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.forecastStart, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.precipitationAmount);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.WriteSingle(value.precipitationChance);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Serialize(ref writer, value.precipitationType, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.WriteSingle(value.snowfallAmount);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.windDirection, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.windSpeed);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __cloudCover__ = default(float);
            var __cloudCover__b__ = false;
            var __conditionCode__ = default(string);
            var __conditionCode__b__ = false;
            var __forecastEnd__ = default(global::System.DateTimeOffset);
            var __forecastEnd__b__ = false;
            var __forecastStart__ = default(global::System.DateTimeOffset);
            var __forecastStart__b__ = false;
            var __humidity__ = default(float);
            var __humidity__b__ = false;
            var __precipitationAmount__ = default(float);
            var __precipitationAmount__b__ = false;
            var __precipitationChance__ = default(float);
            var __precipitationChance__b__ = false;
            var __precipitationType__ = default(global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType);
            var __precipitationType__b__ = false;
            var __snowfallAmount__ = default(float);
            var __snowfallAmount__b__ = false;
            var __windDirection__ = default(int?);
            var __windDirection__b__ = false;
            var __windSpeed__ = default(float);
            var __windSpeed__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __cloudCover__ = reader.ReadSingle();
                        __cloudCover__b__ = true;
                        break;
                    case 1:
                        __conditionCode__ = reader.ReadString();
                        __conditionCode__b__ = true;
                        break;
                    case 2:
                        __forecastEnd__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __forecastEnd__b__ = true;
                        break;
                    case 3:
                        __forecastStart__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __forecastStart__b__ = true;
                        break;
                    case 4:
                        __humidity__ = reader.ReadSingle();
                        __humidity__b__ = true;
                        break;
                    case 5:
                        __precipitationAmount__ = reader.ReadSingle();
                        __precipitationAmount__b__ = true;
                        break;
                    case 6:
                        __precipitationChance__ = reader.ReadSingle();
                        __precipitationChance__b__ = true;
                        break;
                    case 7:
                        __precipitationType__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Deserialize(ref reader, formatterResolver);
                        __precipitationType__b__ = true;
                        break;
                    case 8:
                        __snowfallAmount__ = reader.ReadSingle();
                        __snowfallAmount__b__ = true;
                        break;
                    case 9:
                        __windDirection__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __windDirection__b__ = true;
                        break;
                    case 10:
                        __windSpeed__ = reader.ReadSingle();
                        __windSpeed__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast();
            if(__cloudCover__b__) ____result.cloudCover = __cloudCover__;
            if(__conditionCode__b__) ____result.conditionCode = __conditionCode__;
            if(__forecastEnd__b__) ____result.forecastEnd = __forecastEnd__;
            if(__forecastStart__b__) ____result.forecastStart = __forecastStart__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__precipitationAmount__b__) ____result.precipitationAmount = __precipitationAmount__;
            if(__precipitationChance__b__) ____result.precipitationChance = __precipitationChance__;
            if(__precipitationType__b__) ____result.precipitationType = __precipitationType__;
            if(__snowfallAmount__b__) ____result.snowfallAmount = __snowfallAmount__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;

            return ____result;
        }
    }


    public sealed class DayWeatherConditionsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DayWeatherConditionsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("conditionCode"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daytimeForecast"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastEnd"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastStart"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("maxUvIndex"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonPhase"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonrise"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("moonset"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("overnightForecast"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationAmount"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationChance"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationType"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowfallAmount"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("solarMidnight"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("solarNoon"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunrise"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunriseAstronomical"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunriseCivil"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunriseNautical"), 18},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunset"), 19},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunsetAstronomical"), 20},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunsetCivil"), 21},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("sunsetNautical"), 22},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureMax"), 23},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureMin"), 24},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("conditionCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daytimeForecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastEnd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastStart"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("maxUvIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonPhase"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("moonset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("overnightForecast"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationAmount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationChance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snowfallAmount"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("solarMidnight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("solarNoon"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunrise"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunriseAstronomical"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunriseCivil"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunriseNautical"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunset"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunsetAstronomical"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunsetCivil"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("sunsetNautical"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureMax"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureMin"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.conditionCode);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast>().Serialize(ref writer, value.daytimeForecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.forecastEnd, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.forecastStart, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteInt32(value.maxUvIndex);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.MoonPhase>().Serialize(ref writer, value.moonPhase, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.moonrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.moonset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast>().Serialize(ref writer, value.overnightForecast, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.WriteSingle(value.precipitationAmount);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.precipitationChance);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Serialize(ref writer, value.precipitationType, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.WriteSingle(value.snowfallAmount);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.solarMidnight, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.solarNoon, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunrise, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunriseAstronomical, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunriseCivil, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunriseNautical, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[19]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunset, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunsetAstronomical, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[21]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunsetCivil, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[22]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.sunsetNautical, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.WriteSingle(value.temperatureMax);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.WriteSingle(value.temperatureMin);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __conditionCode__ = default(string);
            var __conditionCode__b__ = false;
            var __daytimeForecast__ = default(global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast);
            var __daytimeForecast__b__ = false;
            var __forecastEnd__ = default(global::System.DateTimeOffset);
            var __forecastEnd__b__ = false;
            var __forecastStart__ = default(global::System.DateTimeOffset);
            var __forecastStart__b__ = false;
            var __maxUvIndex__ = default(int);
            var __maxUvIndex__b__ = false;
            var __moonPhase__ = default(global::SimpleWeather.Weather_API.WeatherKit.MoonPhase);
            var __moonPhase__b__ = false;
            var __moonrise__ = default(global::System.DateTimeOffset?);
            var __moonrise__b__ = false;
            var __moonset__ = default(global::System.DateTimeOffset?);
            var __moonset__b__ = false;
            var __overnightForecast__ = default(global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast);
            var __overnightForecast__b__ = false;
            var __precipitationAmount__ = default(float);
            var __precipitationAmount__b__ = false;
            var __precipitationChance__ = default(float);
            var __precipitationChance__b__ = false;
            var __precipitationType__ = default(global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType);
            var __precipitationType__b__ = false;
            var __snowfallAmount__ = default(float);
            var __snowfallAmount__b__ = false;
            var __solarMidnight__ = default(global::System.DateTimeOffset?);
            var __solarMidnight__b__ = false;
            var __solarNoon__ = default(global::System.DateTimeOffset?);
            var __solarNoon__b__ = false;
            var __sunrise__ = default(global::System.DateTimeOffset?);
            var __sunrise__b__ = false;
            var __sunriseAstronomical__ = default(global::System.DateTimeOffset?);
            var __sunriseAstronomical__b__ = false;
            var __sunriseCivil__ = default(global::System.DateTimeOffset?);
            var __sunriseCivil__b__ = false;
            var __sunriseNautical__ = default(global::System.DateTimeOffset?);
            var __sunriseNautical__b__ = false;
            var __sunset__ = default(global::System.DateTimeOffset?);
            var __sunset__b__ = false;
            var __sunsetAstronomical__ = default(global::System.DateTimeOffset?);
            var __sunsetAstronomical__b__ = false;
            var __sunsetCivil__ = default(global::System.DateTimeOffset?);
            var __sunsetCivil__b__ = false;
            var __sunsetNautical__ = default(global::System.DateTimeOffset?);
            var __sunsetNautical__b__ = false;
            var __temperatureMax__ = default(float);
            var __temperatureMax__b__ = false;
            var __temperatureMin__ = default(float);
            var __temperatureMin__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __conditionCode__ = reader.ReadString();
                        __conditionCode__b__ = true;
                        break;
                    case 1:
                        __daytimeForecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast>().Deserialize(ref reader, formatterResolver);
                        __daytimeForecast__b__ = true;
                        break;
                    case 2:
                        __forecastEnd__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __forecastEnd__b__ = true;
                        break;
                    case 3:
                        __forecastStart__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __forecastStart__b__ = true;
                        break;
                    case 4:
                        __maxUvIndex__ = reader.ReadInt32();
                        __maxUvIndex__b__ = true;
                        break;
                    case 5:
                        __moonPhase__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.MoonPhase>().Deserialize(ref reader, formatterResolver);
                        __moonPhase__b__ = true;
                        break;
                    case 6:
                        __moonrise__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __moonrise__b__ = true;
                        break;
                    case 7:
                        __moonset__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __moonset__b__ = true;
                        break;
                    case 8:
                        __overnightForecast__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DayPartForecast>().Deserialize(ref reader, formatterResolver);
                        __overnightForecast__b__ = true;
                        break;
                    case 9:
                        __precipitationAmount__ = reader.ReadSingle();
                        __precipitationAmount__b__ = true;
                        break;
                    case 10:
                        __precipitationChance__ = reader.ReadSingle();
                        __precipitationChance__b__ = true;
                        break;
                    case 11:
                        __precipitationType__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Deserialize(ref reader, formatterResolver);
                        __precipitationType__b__ = true;
                        break;
                    case 12:
                        __snowfallAmount__ = reader.ReadSingle();
                        __snowfallAmount__b__ = true;
                        break;
                    case 13:
                        __solarMidnight__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __solarMidnight__b__ = true;
                        break;
                    case 14:
                        __solarNoon__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __solarNoon__b__ = true;
                        break;
                    case 15:
                        __sunrise__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunrise__b__ = true;
                        break;
                    case 16:
                        __sunriseAstronomical__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunriseAstronomical__b__ = true;
                        break;
                    case 17:
                        __sunriseCivil__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunriseCivil__b__ = true;
                        break;
                    case 18:
                        __sunriseNautical__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunriseNautical__b__ = true;
                        break;
                    case 19:
                        __sunset__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunset__b__ = true;
                        break;
                    case 20:
                        __sunsetAstronomical__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunsetAstronomical__b__ = true;
                        break;
                    case 21:
                        __sunsetCivil__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunsetCivil__b__ = true;
                        break;
                    case 22:
                        __sunsetNautical__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __sunsetNautical__b__ = true;
                        break;
                    case 23:
                        __temperatureMax__ = reader.ReadSingle();
                        __temperatureMax__b__ = true;
                        break;
                    case 24:
                        __temperatureMin__ = reader.ReadSingle();
                        __temperatureMin__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions();
            if(__conditionCode__b__) ____result.conditionCode = __conditionCode__;
            if(__daytimeForecast__b__) ____result.daytimeForecast = __daytimeForecast__;
            if(__forecastEnd__b__) ____result.forecastEnd = __forecastEnd__;
            if(__forecastStart__b__) ____result.forecastStart = __forecastStart__;
            if(__maxUvIndex__b__) ____result.maxUvIndex = __maxUvIndex__;
            if(__moonPhase__b__) ____result.moonPhase = __moonPhase__;
            if(__moonrise__b__) ____result.moonrise = __moonrise__;
            if(__moonset__b__) ____result.moonset = __moonset__;
            if(__overnightForecast__b__) ____result.overnightForecast = __overnightForecast__;
            if(__precipitationAmount__b__) ____result.precipitationAmount = __precipitationAmount__;
            if(__precipitationChance__b__) ____result.precipitationChance = __precipitationChance__;
            if(__precipitationType__b__) ____result.precipitationType = __precipitationType__;
            if(__snowfallAmount__b__) ____result.snowfallAmount = __snowfallAmount__;
            if(__solarMidnight__b__) ____result.solarMidnight = __solarMidnight__;
            if(__solarNoon__b__) ____result.solarNoon = __solarNoon__;
            if(__sunrise__b__) ____result.sunrise = __sunrise__;
            if(__sunriseAstronomical__b__) ____result.sunriseAstronomical = __sunriseAstronomical__;
            if(__sunriseCivil__b__) ____result.sunriseCivil = __sunriseCivil__;
            if(__sunriseNautical__b__) ____result.sunriseNautical = __sunriseNautical__;
            if(__sunset__b__) ____result.sunset = __sunset__;
            if(__sunsetAstronomical__b__) ____result.sunsetAstronomical = __sunsetAstronomical__;
            if(__sunsetCivil__b__) ____result.sunsetCivil = __sunsetCivil__;
            if(__sunsetNautical__b__) ____result.sunsetNautical = __sunsetNautical__;
            if(__temperatureMax__b__) ____result.temperatureMax = __temperatureMax__;
            if(__temperatureMin__b__) ____result.temperatureMin = __temperatureMin__;

            return ____result;
        }
    }


    public sealed class DailyForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.DailyForecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public DailyForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("days"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("learnMoreURL"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metadata"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("days"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("learnMoreURL"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metadata"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.DailyForecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions[]>().Serialize(ref writer, value.days, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.learnMoreURL);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Serialize(ref writer, value.metadata, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.DailyForecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __days__ = default(global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions[]);
            var __days__b__ = false;
            var __learnMoreURL__ = default(string);
            var __learnMoreURL__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __metadata__ = default(global::SimpleWeather.Weather_API.WeatherKit.Metadata);
            var __metadata__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __days__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DayWeatherConditions[]>().Deserialize(ref reader, formatterResolver);
                        __days__b__ = true;
                        break;
                    case 1:
                        __learnMoreURL__ = reader.ReadString();
                        __learnMoreURL__b__ = true;
                        break;
                    case 2:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 3:
                        __metadata__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Deserialize(ref reader, formatterResolver);
                        __metadata__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.DailyForecast();
            if(__days__b__) ____result.days = __days__;
            if(__learnMoreURL__b__) ____result.learnMoreURL = __learnMoreURL__;
            if(__name__b__) ____result.name = __name__;
            if(__metadata__b__) ____result.metadata = __metadata__;

            return ____result;
        }
    }


    public sealed class HourWeatherConditionsFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourWeatherConditionsFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("cloudCover"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("conditionCode"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("daylight"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastStart"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("humidity"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationChance"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationType"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressure"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("pressureTrend"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("snowfallIntensity"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperature"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureApparent"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("temperatureDewPoint"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("uvIndex"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("visibility"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windDirection"), 15},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windGust"), 16},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("windSpeed"), 17},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationAmount"), 18},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("cloudCover"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("conditionCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("daylight"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastStart"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("humidity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationChance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationType"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressure"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("pressureTrend"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("snowfallIntensity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperature"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureApparent"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("temperatureDewPoint"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("uvIndex"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("visibility"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windDirection"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windGust"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("windSpeed"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationAmount"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.cloudCover);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.conditionCode);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<bool?>().Serialize(ref writer, value.daylight, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.forecastStart, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteSingle(value.humidity);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteSingle(value.precipitationChance);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Serialize(ref writer, value.precipitationType, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.WriteSingle(value.pressure);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PressureTrend?>().Serialize(ref writer, value.pressureTrend, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.snowfallIntensity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteSingle(value.temperature);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.WriteSingle(value.temperatureApparent);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.temperatureDewPoint, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.WriteInt32(value.uvIndex);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteSingle(value.visibility);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.windDirection, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[16]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.windGust, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.WriteSingle(value.windSpeed);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<float?>().Serialize(ref writer, value.precipitationAmount, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __cloudCover__ = default(float);
            var __cloudCover__b__ = false;
            var __conditionCode__ = default(string);
            var __conditionCode__b__ = false;
            var __daylight__ = default(bool?);
            var __daylight__b__ = false;
            var __forecastStart__ = default(global::System.DateTimeOffset);
            var __forecastStart__b__ = false;
            var __humidity__ = default(float);
            var __humidity__b__ = false;
            var __precipitationChance__ = default(float);
            var __precipitationChance__b__ = false;
            var __precipitationType__ = default(global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType);
            var __precipitationType__b__ = false;
            var __pressure__ = default(float);
            var __pressure__b__ = false;
            var __pressureTrend__ = default(global::SimpleWeather.Weather_API.WeatherKit.PressureTrend?);
            var __pressureTrend__b__ = false;
            var __snowfallIntensity__ = default(float?);
            var __snowfallIntensity__b__ = false;
            var __temperature__ = default(float);
            var __temperature__b__ = false;
            var __temperatureApparent__ = default(float);
            var __temperatureApparent__b__ = false;
            var __temperatureDewPoint__ = default(float?);
            var __temperatureDewPoint__b__ = false;
            var __uvIndex__ = default(int);
            var __uvIndex__b__ = false;
            var __visibility__ = default(float);
            var __visibility__b__ = false;
            var __windDirection__ = default(int?);
            var __windDirection__b__ = false;
            var __windGust__ = default(float?);
            var __windGust__b__ = false;
            var __windSpeed__ = default(float);
            var __windSpeed__b__ = false;
            var __precipitationAmount__ = default(float?);
            var __precipitationAmount__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __cloudCover__ = reader.ReadSingle();
                        __cloudCover__b__ = true;
                        break;
                    case 1:
                        __conditionCode__ = reader.ReadString();
                        __conditionCode__b__ = true;
                        break;
                    case 2:
                        __daylight__ = formatterResolver.GetFormatterWithVerify<bool?>().Deserialize(ref reader, formatterResolver);
                        __daylight__b__ = true;
                        break;
                    case 3:
                        __forecastStart__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __forecastStart__b__ = true;
                        break;
                    case 4:
                        __humidity__ = reader.ReadSingle();
                        __humidity__b__ = true;
                        break;
                    case 5:
                        __precipitationChance__ = reader.ReadSingle();
                        __precipitationChance__b__ = true;
                        break;
                    case 6:
                        __precipitationType__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Deserialize(ref reader, formatterResolver);
                        __precipitationType__b__ = true;
                        break;
                    case 7:
                        __pressure__ = reader.ReadSingle();
                        __pressure__b__ = true;
                        break;
                    case 8:
                        __pressureTrend__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PressureTrend?>().Deserialize(ref reader, formatterResolver);
                        __pressureTrend__b__ = true;
                        break;
                    case 9:
                        __snowfallIntensity__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __snowfallIntensity__b__ = true;
                        break;
                    case 10:
                        __temperature__ = reader.ReadSingle();
                        __temperature__b__ = true;
                        break;
                    case 11:
                        __temperatureApparent__ = reader.ReadSingle();
                        __temperatureApparent__b__ = true;
                        break;
                    case 12:
                        __temperatureDewPoint__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __temperatureDewPoint__b__ = true;
                        break;
                    case 13:
                        __uvIndex__ = reader.ReadInt32();
                        __uvIndex__b__ = true;
                        break;
                    case 14:
                        __visibility__ = reader.ReadSingle();
                        __visibility__b__ = true;
                        break;
                    case 15:
                        __windDirection__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, formatterResolver);
                        __windDirection__b__ = true;
                        break;
                    case 16:
                        __windGust__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __windGust__b__ = true;
                        break;
                    case 17:
                        __windSpeed__ = reader.ReadSingle();
                        __windSpeed__b__ = true;
                        break;
                    case 18:
                        __precipitationAmount__ = formatterResolver.GetFormatterWithVerify<float?>().Deserialize(ref reader, formatterResolver);
                        __precipitationAmount__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions();
            if(__cloudCover__b__) ____result.cloudCover = __cloudCover__;
            if(__conditionCode__b__) ____result.conditionCode = __conditionCode__;
            if(__daylight__b__) ____result.daylight = __daylight__;
            if(__forecastStart__b__) ____result.forecastStart = __forecastStart__;
            if(__humidity__b__) ____result.humidity = __humidity__;
            if(__precipitationChance__b__) ____result.precipitationChance = __precipitationChance__;
            if(__precipitationType__b__) ____result.precipitationType = __precipitationType__;
            if(__pressure__b__) ____result.pressure = __pressure__;
            if(__pressureTrend__b__) ____result.pressureTrend = __pressureTrend__;
            if(__snowfallIntensity__b__) ____result.snowfallIntensity = __snowfallIntensity__;
            if(__temperature__b__) ____result.temperature = __temperature__;
            if(__temperatureApparent__b__) ____result.temperatureApparent = __temperatureApparent__;
            if(__temperatureDewPoint__b__) ____result.temperatureDewPoint = __temperatureDewPoint__;
            if(__uvIndex__b__) ____result.uvIndex = __uvIndex__;
            if(__visibility__b__) ____result.visibility = __visibility__;
            if(__windDirection__b__) ____result.windDirection = __windDirection__;
            if(__windGust__b__) ____result.windGust = __windGust__;
            if(__windSpeed__b__) ____result.windSpeed = __windSpeed__;
            if(__precipitationAmount__b__) ____result.precipitationAmount = __precipitationAmount__;

            return ____result;
        }
    }


    public sealed class HourlyForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public HourlyForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("hours"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metadata"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("hours"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metadata"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions[]>().Serialize(ref writer, value.hours, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Serialize(ref writer, value.metadata, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __hours__ = default(global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions[]);
            var __hours__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __metadata__ = default(global::SimpleWeather.Weather_API.WeatherKit.Metadata);
            var __metadata__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __hours__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.HourWeatherConditions[]>().Deserialize(ref reader, formatterResolver);
                        __hours__b__ = true;
                        break;
                    case 1:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 2:
                        __metadata__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Deserialize(ref reader, formatterResolver);
                        __metadata__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast();
            if(__hours__b__) ____result.hours = __hours__;
            if(__name__b__) ____result.name = __name__;
            if(__metadata__b__) ____result.metadata = __metadata__;

            return ____result;
        }
    }


    public sealed class ForecastMinuteFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastMinuteFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationChance"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationIntensity"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startTime"), 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("precipitationChance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationIntensity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("startTime"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteSingle(value.precipitationChance);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteSingle(value.precipitationIntensity);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.startTime, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __precipitationChance__ = default(float);
            var __precipitationChance__b__ = false;
            var __precipitationIntensity__ = default(float);
            var __precipitationIntensity__b__ = false;
            var __startTime__ = default(global::System.DateTimeOffset);
            var __startTime__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __precipitationChance__ = reader.ReadSingle();
                        __precipitationChance__b__ = true;
                        break;
                    case 1:
                        __precipitationIntensity__ = reader.ReadSingle();
                        __precipitationIntensity__b__ = true;
                        break;
                    case 2:
                        __startTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __startTime__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute();
            if(__precipitationChance__b__) ____result.precipitationChance = __precipitationChance__;
            if(__precipitationIntensity__b__) ____result.precipitationIntensity = __precipitationIntensity__;
            if(__startTime__b__) ____result.startTime = __startTime__;

            return ____result;
        }
    }


    public sealed class ForecastPeriodSummaryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ForecastPeriodSummaryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("condition"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("endTime"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationChance"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("precipitationIntensity"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("startTime"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("condition"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("endTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationChance"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("precipitationIntensity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("startTime"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Serialize(ref writer, value.condition, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.endTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteSingle(value.precipitationChance);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteSingle(value.precipitationIntensity);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.startTime, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __condition__ = default(global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType);
            var __condition__b__ = false;
            var __endTime__ = default(global::System.DateTimeOffset?);
            var __endTime__b__ = false;
            var __precipitationChance__ = default(float);
            var __precipitationChance__b__ = false;
            var __precipitationIntensity__ = default(float);
            var __precipitationIntensity__b__ = false;
            var __startTime__ = default(global::System.DateTimeOffset);
            var __startTime__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __condition__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.PrecipitationType>().Deserialize(ref reader, formatterResolver);
                        __condition__b__ = true;
                        break;
                    case 1:
                        __endTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __endTime__b__ = true;
                        break;
                    case 2:
                        __precipitationChance__ = reader.ReadSingle();
                        __precipitationChance__b__ = true;
                        break;
                    case 3:
                        __precipitationIntensity__ = reader.ReadSingle();
                        __precipitationIntensity__b__ = true;
                        break;
                    case 4:
                        __startTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __startTime__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary();
            if(__condition__b__) ____result.condition = __condition__;
            if(__endTime__b__) ____result.endTime = __endTime__;
            if(__precipitationChance__b__) ____result.precipitationChance = __precipitationChance__;
            if(__precipitationIntensity__b__) ____result.precipitationIntensity = __precipitationIntensity__;
            if(__startTime__b__) ____result.startTime = __startTime__;

            return ____result;
        }
    }


    public sealed class NextHourForecastFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public NextHourForecastFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastEnd"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastStart"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("minutes"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("summary"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metadata"), 5},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("forecastEnd"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastStart"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("minutes"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("summary"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metadata"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.forecastEnd, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.forecastStart, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute[]>().Serialize(ref writer, value.minutes, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary[]>().Serialize(ref writer, value.summary, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Serialize(ref writer, value.metadata, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __forecastEnd__ = default(global::System.DateTimeOffset?);
            var __forecastEnd__b__ = false;
            var __forecastStart__ = default(global::System.DateTimeOffset?);
            var __forecastStart__b__ = false;
            var __minutes__ = default(global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute[]);
            var __minutes__b__ = false;
            var __summary__ = default(global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary[]);
            var __summary__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __metadata__ = default(global::SimpleWeather.Weather_API.WeatherKit.Metadata);
            var __metadata__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __forecastEnd__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __forecastEnd__b__ = true;
                        break;
                    case 1:
                        __forecastStart__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __forecastStart__b__ = true;
                        break;
                    case 2:
                        __minutes__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.ForecastMinute[]>().Deserialize(ref reader, formatterResolver);
                        __minutes__b__ = true;
                        break;
                    case 3:
                        __summary__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.ForecastPeriodSummary[]>().Deserialize(ref reader, formatterResolver);
                        __summary__b__ = true;
                        break;
                    case 4:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 5:
                        __metadata__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Deserialize(ref reader, formatterResolver);
                        __metadata__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast();
            if(__forecastEnd__b__) ____result.forecastEnd = __forecastEnd__;
            if(__forecastStart__b__) ____result.forecastStart = __forecastStart__;
            if(__minutes__b__) ____result.minutes = __minutes__;
            if(__summary__b__) ____result.summary = __summary__;
            if(__name__b__) ____result.name = __name__;
            if(__metadata__b__) ____result.metadata = __metadata__;

            return ____result;
        }
    }


    public sealed class WeatherAlertSummaryFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WeatherAlertSummaryFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("areaId"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("areaName"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("certainty"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("countryCode"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("description"), 4},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("detailsUrl"), 5},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("effectiveTime"), 6},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("eventEndTime"), 7},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("eventOnsetTime"), 8},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("expireTime"), 9},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("id"), 10},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("issuedTime"), 11},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("responses"), 12},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("severity"), 13},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("source"), 14},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("urgency"), 15},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("areaId"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("areaName"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("certainty"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("countryCode"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("description"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("detailsUrl"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("effectiveTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("eventEndTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("eventOnsetTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("expireTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("id"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("issuedTime"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("responses"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("severity"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("source"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("urgency"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.areaId);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.areaName);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Certainty>().Serialize(ref writer, value.certainty, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.WriteString(value.countryCode);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.WriteString(value.description);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.WriteString(value.detailsUrl);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.effectiveTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.eventEndTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Serialize(ref writer, value.eventOnsetTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.expireTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.WriteString(value.id);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.issuedTime, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.ResponseType[]>().Serialize(ref writer, value.responses, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Severity>().Serialize(ref writer, value.severity, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.WriteString(value.source);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Urgency>().Serialize(ref writer, value.urgency, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __areaId__ = default(string);
            var __areaId__b__ = false;
            var __areaName__ = default(string);
            var __areaName__b__ = false;
            var __certainty__ = default(global::SimpleWeather.Weather_API.WeatherKit.Certainty);
            var __certainty__b__ = false;
            var __countryCode__ = default(string);
            var __countryCode__b__ = false;
            var __description__ = default(string);
            var __description__b__ = false;
            var __detailsUrl__ = default(string);
            var __detailsUrl__b__ = false;
            var __effectiveTime__ = default(global::System.DateTimeOffset);
            var __effectiveTime__b__ = false;
            var __eventEndTime__ = default(global::System.DateTimeOffset?);
            var __eventEndTime__b__ = false;
            var __eventOnsetTime__ = default(global::System.DateTimeOffset?);
            var __eventOnsetTime__b__ = false;
            var __expireTime__ = default(global::System.DateTimeOffset);
            var __expireTime__b__ = false;
            var __id__ = default(string);
            var __id__b__ = false;
            var __issuedTime__ = default(global::System.DateTimeOffset);
            var __issuedTime__b__ = false;
            var __responses__ = default(global::SimpleWeather.Weather_API.WeatherKit.ResponseType[]);
            var __responses__b__ = false;
            var __severity__ = default(global::SimpleWeather.Weather_API.WeatherKit.Severity);
            var __severity__b__ = false;
            var __source__ = default(string);
            var __source__b__ = false;
            var __urgency__ = default(global::SimpleWeather.Weather_API.WeatherKit.Urgency);
            var __urgency__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __areaId__ = reader.ReadString();
                        __areaId__b__ = true;
                        break;
                    case 1:
                        __areaName__ = reader.ReadString();
                        __areaName__b__ = true;
                        break;
                    case 2:
                        __certainty__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Certainty>().Deserialize(ref reader, formatterResolver);
                        __certainty__b__ = true;
                        break;
                    case 3:
                        __countryCode__ = reader.ReadString();
                        __countryCode__b__ = true;
                        break;
                    case 4:
                        __description__ = reader.ReadString();
                        __description__b__ = true;
                        break;
                    case 5:
                        __detailsUrl__ = reader.ReadString();
                        __detailsUrl__b__ = true;
                        break;
                    case 6:
                        __effectiveTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __effectiveTime__b__ = true;
                        break;
                    case 7:
                        __eventEndTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __eventEndTime__b__ = true;
                        break;
                    case 8:
                        __eventOnsetTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset?>().Deserialize(ref reader, formatterResolver);
                        __eventOnsetTime__b__ = true;
                        break;
                    case 9:
                        __expireTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __expireTime__b__ = true;
                        break;
                    case 10:
                        __id__ = reader.ReadString();
                        __id__b__ = true;
                        break;
                    case 11:
                        __issuedTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, formatterResolver);
                        __issuedTime__b__ = true;
                        break;
                    case 12:
                        __responses__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.ResponseType[]>().Deserialize(ref reader, formatterResolver);
                        __responses__b__ = true;
                        break;
                    case 13:
                        __severity__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Severity>().Deserialize(ref reader, formatterResolver);
                        __severity__b__ = true;
                        break;
                    case 14:
                        __source__ = reader.ReadString();
                        __source__b__ = true;
                        break;
                    case 15:
                        __urgency__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Urgency>().Deserialize(ref reader, formatterResolver);
                        __urgency__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary();
            if(__areaId__b__) ____result.areaId = __areaId__;
            if(__areaName__b__) ____result.areaName = __areaName__;
            if(__certainty__b__) ____result.certainty = __certainty__;
            if(__countryCode__b__) ____result.countryCode = __countryCode__;
            if(__description__b__) ____result.description = __description__;
            if(__detailsUrl__b__) ____result.detailsUrl = __detailsUrl__;
            if(__effectiveTime__b__) ____result.effectiveTime = __effectiveTime__;
            if(__eventEndTime__b__) ____result.eventEndTime = __eventEndTime__;
            if(__eventOnsetTime__b__) ____result.eventOnsetTime = __eventOnsetTime__;
            if(__expireTime__b__) ____result.expireTime = __expireTime__;
            if(__id__b__) ____result.id = __id__;
            if(__issuedTime__b__) ____result.issuedTime = __issuedTime__;
            if(__responses__b__) ____result.responses = __responses__;
            if(__severity__b__) ____result.severity = __severity__;
            if(__source__b__) ____result.source = __source__;
            if(__urgency__b__) ____result.urgency = __urgency__;

            return ____result;
        }
    }


    public sealed class WeatherAlertCollectionFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WeatherAlertCollectionFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("alerts"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("detailsUrl"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metadata"), 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("alerts"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("detailsUrl"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metadata"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary[]>().Serialize(ref writer, value.alerts, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.WriteString(value.detailsUrl);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Serialize(ref writer, value.metadata, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __alerts__ = default(global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary[]);
            var __alerts__b__ = false;
            var __detailsUrl__ = default(string);
            var __detailsUrl__b__ = false;
            var __name__ = default(string);
            var __name__b__ = false;
            var __metadata__ = default(global::SimpleWeather.Weather_API.WeatherKit.Metadata);
            var __metadata__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __alerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertSummary[]>().Deserialize(ref reader, formatterResolver);
                        __alerts__b__ = true;
                        break;
                    case 1:
                        __detailsUrl__ = reader.ReadString();
                        __detailsUrl__b__ = true;
                        break;
                    case 2:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 3:
                        __metadata__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Deserialize(ref reader, formatterResolver);
                        __metadata__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection();
            if(__alerts__b__) ____result.alerts = __alerts__;
            if(__detailsUrl__b__) ____result.detailsUrl = __detailsUrl__;
            if(__name__b__) ____result.name = __name__;
            if(__metadata__b__) ____result.metadata = __metadata__;

            return ____result;
        }
    }


    public sealed class WeatherFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.Weather>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public WeatherFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("currentWeather"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastDaily"), 1},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastHourly"), 2},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("forecastNextHour"), 3},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("weatherAlerts"), 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("currentWeather"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastDaily"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastHourly"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("forecastNextHour"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("weatherAlerts"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.Weather value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather>().Serialize(ref writer, value.currentWeather, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DailyForecast>().Serialize(ref writer, value.forecastDaily, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast>().Serialize(ref writer, value.forecastHourly, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast>().Serialize(ref writer, value.forecastNextHour, formatterResolver);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection>().Serialize(ref writer, value.weatherAlerts, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.Weather Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __currentWeather__ = default(global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather);
            var __currentWeather__b__ = false;
            var __forecastDaily__ = default(global::SimpleWeather.Weather_API.WeatherKit.DailyForecast);
            var __forecastDaily__b__ = false;
            var __forecastHourly__ = default(global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast);
            var __forecastHourly__b__ = false;
            var __forecastNextHour__ = default(global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast);
            var __forecastNextHour__b__ = false;
            var __weatherAlerts__ = default(global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection);
            var __weatherAlerts__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __currentWeather__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.CurrentWeather>().Deserialize(ref reader, formatterResolver);
                        __currentWeather__b__ = true;
                        break;
                    case 1:
                        __forecastDaily__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.DailyForecast>().Deserialize(ref reader, formatterResolver);
                        __forecastDaily__b__ = true;
                        break;
                    case 2:
                        __forecastHourly__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.HourlyForecast>().Deserialize(ref reader, formatterResolver);
                        __forecastHourly__b__ = true;
                        break;
                    case 3:
                        __forecastNextHour__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.NextHourForecast>().Deserialize(ref reader, formatterResolver);
                        __forecastNextHour__b__ = true;
                        break;
                    case 4:
                        __weatherAlerts__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.WeatherAlertCollection>().Deserialize(ref reader, formatterResolver);
                        __weatherAlerts__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.Weather();
            if(__currentWeather__b__) ____result.currentWeather = __currentWeather__;
            if(__forecastDaily__b__) ____result.forecastDaily = __forecastDaily__;
            if(__forecastHourly__b__) ____result.forecastHourly = __forecastHourly__;
            if(__forecastNextHour__b__) ____result.forecastNextHour = __forecastNextHour__;
            if(__weatherAlerts__b__) ____result.weatherAlerts = __weatherAlerts__;

            return ____result;
        }
    }


    public sealed class ProductDataFormatter : global::Utf8Json.IJsonFormatter<global::SimpleWeather.Weather_API.WeatherKit.ProductData>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public ProductDataFormatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("name"), 0},
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("metadata"), 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                JsonWriter.GetEncodedPropertyNameWithBeginObject("name"),
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("metadata"),
                
            };
        }

        public void Serialize(ref JsonWriter writer, global::SimpleWeather.Weather_API.WeatherKit.ProductData value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
            

            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.WriteString(value.name);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Serialize(ref writer, value.metadata, formatterResolver);
            
            writer.WriteEndObject();
        }

        public global::SimpleWeather.Weather_API.WeatherKit.ProductData Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            

            var __name__ = default(string);
            var __name__b__ = false;
            var __metadata__ = default(global::SimpleWeather.Weather_API.WeatherKit.Metadata);
            var __metadata__b__ = false;

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __name__ = reader.ReadString();
                        __name__b__ = true;
                        break;
                    case 1:
                        __metadata__ = formatterResolver.GetFormatterWithVerify<global::SimpleWeather.Weather_API.WeatherKit.Metadata>().Deserialize(ref reader, formatterResolver);
                        __metadata__b__ = true;
                        break;
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new global::SimpleWeather.Weather_API.WeatherKit.ProductData();
            if(__name__b__) ____result.name = __name__;
            if(__metadata__b__) ____result.metadata = __metadata__;

            return ____result;
        }
    }

}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
