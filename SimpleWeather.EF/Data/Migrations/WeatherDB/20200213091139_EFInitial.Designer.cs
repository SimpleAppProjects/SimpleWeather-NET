// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleWeather.Utils;

namespace SimpleWeather.Data.Migrations.WeatherDB
{
    [DbContext(typeof(WeatherDBContext))]
    [Migration("20200213091139_EFInitial")]
    partial class EFInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("SimpleWeather.WeatherData.Forecasts", b =>
                {
                    b.Property<string>("query")
                        .HasColumnType("TEXT");

                    b.Property<string>("forecast")
                        .HasColumnType("TEXT");

                    b.Property<string>("txt_forecast")
                        .HasColumnType("TEXT");

                    b.HasKey("query");

                    b.ToTable("forecasts");
                });

            modelBuilder.Entity("SimpleWeather.WeatherData.HourlyForecasts", b =>
                {
                    b.Property<string>("query")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("dateblob")
                        .HasColumnType("TEXT");

                    b.Property<string>("hr_forecast")
                        .HasColumnType("TEXT");

                    b.HasKey("query", "date");

                    b.ToTable("hr_forecasts");
                });

            modelBuilder.Entity("SimpleWeather.WeatherData.Weather", b =>
                {
                    b.Property<string>("query")
                        .HasColumnType("TEXT");

                    b.Property<string>("astronomy")
                        .HasColumnName("astronomyblob")
                        .HasColumnType("TEXT");

                    b.Property<string>("atmosphere")
                        .HasColumnName("atmosphereblob")
                        .HasColumnType("TEXT");

                    b.Property<string>("condition")
                        .HasColumnName("conditionblob")
                        .HasColumnType("TEXT");

                    b.Property<string>("locale")
                        .HasColumnType("TEXT");

                    b.Property<string>("location")
                        .HasColumnName("locationblob")
                        .HasColumnType("TEXT");

                    b.Property<string>("precipitation")
                        .HasColumnName("precipitationblob")
                        .HasColumnType("TEXT");

                    b.Property<string>("source")
                        .HasColumnType("TEXT");

                    b.Property<string>("ttl")
                        .HasColumnType("TEXT");

                    b.Property<string>("updatetimeblob")
                        .HasColumnName("update_time")
                        .HasColumnType("TEXT");

                    b.HasKey("query");

                    b.ToTable("weatherdata");
                });

            modelBuilder.Entity("SimpleWeather.WeatherData.WeatherAlerts", b =>
                {
                    b.Property<string>("query")
                        .HasColumnType("TEXT");

                    b.Property<string>("alerts")
                        .HasColumnName("weather_alerts")
                        .HasColumnType("TEXT");

                    b.HasKey("query");

                    b.ToTable("weatheralerts");
                });
#pragma warning restore 612, 618
        }
    }
}
